{
	"name": "Prod_import_most_recent",
	"properties": {
		"folder": {
			"name": "tsc/Prod"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a2e23000-0228-4c91-a0e4-039a68e2781a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import re\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from datetime import datetime\r\n",
					"\r\n",
					"\r\n",
					"#root_folder = \"abfss://usage@s037costmgmt.dfs.core.windows.net/subscriptions\"\r\n",
					"#file_name = \"subscriptions_\"\r\n",
					"#file_type = 'json'\r\n",
					"def most_recent(root_folder, file_name,file_type):\r\n",
					"    file_paths = [str(path) for path in mssparkutils.fs.ls(root_folder)]\r\n",
					"    filtered_paths = [path for path in file_paths if file_name in path]\r\n",
					"    years = [re.search('\\d{4}', str(x).split('_')[1]).group(0) for x in filtered_paths]\r\n",
					"\r\n",
					"    for year in years[::-1]:\r\n",
					"        months = [re.search('\\d{2}', str(x).split('-')[1]).group(0) for x in filtered_paths]\r\n",
					"                 \r\n",
					"        for month in months[::-1]:\r\n",
					"            days = [re.search('\\d{2}', str(x).split('-')[2]).group(0) for x in filtered_paths]\r\n",
					"\r\n",
					"            for day in days[::-1]:\r\n",
					"                folder_path = root_folder + '/' + file_name + year + '-' + month + '-' + day+'.'+ file_type\r\n",
					"\r\n",
					"                return folder_path\r\n",
					"                try:\r\n",
					"                    match = [x[1] for x in filtered_paths if x[1].startswith(file_name)][0]\r\n",
					"                    return(folder_path + match)\r\n",
					"                except:\r\n",
					"                    continue\r\n",
					"                    \r\n",
					"    print('Unable to find ', file_name,' in ', root_folder)\r\n",
					"#most_recent(root_folder,file_name)"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}