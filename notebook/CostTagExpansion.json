{
	"name": "CostTagExpansion",
	"properties": {
		"folder": {
			"name": "NotebookNotInUse/Keep"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "4c4d2bc6-a65d-44e5-b545-7c9b2166512a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"amortizedCostPath = 'exports/monthly/ACMMonthlyAmortizedCost/'\n",
					"actualCostPath = 'exports/monthly/ACMMonthlyActualCost/'\n",
					"toDate = '20230430'\n",
					"fromDate = '20230401'\n",
					"container = 'usage'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\n",
					"import numpy as np\n",
					"from datetime import datetime\n",
					"import calendar"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def load_source_files(path, subscription_path, appListPath, fileType):\n",
					"    \n",
					"    #print('Loading Source Parquet file....')\n",
					"    #orig_df = pd.read_parquet(path)\n",
					"    \n",
					"    if fileType == 'parquet':\n",
					"        print('Loading Source Parquet file....')\n",
					"        df = pd.read_parquet(path)\n",
					"    else:  \n",
					"        print('Loading Source Parquet file....')\n",
					"        df = pd.read_csv(path)  \n",
					"    df['CostAllocationType'] = np.nan\n",
					"    df['CostAllocationCode'] = np.nan\n",
					"    df['ActiveWBSReason'] = np.nan\n",
					"    print('Loading Subscription list...')\n",
					"    subscription_list = pd.read_json(subscription_path)\n",
					"    print('Loading SNOW Application list...')\n",
					"    appList = pd.read_parquet(appListPath)\n",
					"    print('File loading complete!')\n",
					"\n",
					"    return df, subscription_list, appList\n",
					"\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"def shorten_df(orig_df, size):\n",
					"\n",
					"    if size > 0:\n",
					"        orig_df = orig_df.head(size)\n",
					"        return orig_df\n",
					"    else:\n",
					"        return orig_df\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_subscription_tags(subscription_list):\n",
					"\n",
					"    print('Expanding the SubscriptionWBS and SubscriptionServiceNow-App fields from the subscription list Tags field into their own fields...')\n",
					"\n",
					"    subscription_tags_df = subscription_list.pop('tags').apply(pd.Series)\n",
					"    subscription_list['SubscriptionWBS'] = subscription_tags_df['WBS']\n",
					"    subscription_list['SubscriptionServiceNow-App'] = subscription_tags_df['ServiceNow-App']\n",
					"    \n",
					"    subscription_list.rename(columns={\"id\": \"SubscriptionId\"}, inplace=True)\n",
					"    columns_to_keep = ['SubscriptionId', 'SubscriptionWBS', 'SubscriptionServiceNow-App']\n",
					"    \n",
					"    subscription_list.drop(columns=subscription_list.columns.difference(columns_to_keep), inplace=True)\n",
					"        \n",
					"    return subscription_list"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def merge_dataframes(df, subscription_list):\n",
					"\n",
					"    print('Merging the SubscriptionWBS and SubscriptionServiceNow-App fields from the subscription list into the cost dataframe...')\n",
					"    df = df.merge(subscription_list, how='left', on='SubscriptionId')\n",
					"    \n",
					"    return df, subscription_list\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"def replace_empty_cost_fields_with_subscription_details(df, subscription_list, appList):\n",
					"\n",
					"    print(\"Creating ActiveWBS column, copying over CostAllocationCode, replacing 'TOBESPECIFIED' and empty values then filling gaps with SubscriptionWBS...\")\n",
					"\n",
					"    df['CostAllocationCode'].replace('', np.nan, inplace=True)\n",
					"    df['CostAllocationType'].replace('', np.nan, inplace=True)\n",
					"    df['ActiveWBS'] = df.loc[df['CostAllocationType'] == 'WBS', 'CostAllocationCode']\n",
					"\n",
					"    mask = (df['CostAllocationType'] != \"WBS\") & (df['CostAllocationType'] != \"APPID\") & (df['CostAllocationType'] != \"CI\") & (df['CostAllocationType'] != \"SubscriptionWBS\")\n",
					"    df.loc[mask, ['ActiveWBSReason']] = 'Invalid CostAllocationType: not APPID, CI or WBS'\n",
					"\n",
					"    mask = (df['CostAllocationCode'].str.contains('^[a-zA-Z]\\.\\S*', regex=True) == False) & (df['CostAllocationType'] == 'WBS')\n",
					"    df.loc[mask, 'ActiveWBS'] = df.loc[mask, 'SubscriptionWBS']\n",
					"    df.loc[mask, 'CostAllocationType'] = 'SubscriptionWBS'\n",
					"    df.loc[mask, 'ActiveWBSReason'] = 'Invalid CostAllocationCode WBS'\n",
					"    \n",
					"    df['ActiveWBS'] = df['ActiveWBS'].fillna(df['CostAllocationCode'].map(appList.set_index('u_number')['u_operational_wbs']))\n",
					"    df['ActiveWBS'] = df['ActiveWBS'].fillna(df['CostAllocationCode'].map(appList.set_index('name')['u_operational_wbs']))\n",
					"    df['ActiveWBS'].replace('TOBESPECIFIED', np.nan, inplace=True)  \n",
					"    \n",
					"    df.loc[df['CostAllocationType'].isnull(), 'CostAllocationCode'] = np.nan\n",
					"    df.loc[df['CostAllocationType'].isnull(), 'CostAllocationType'] = 'SubscriptionWBS'\n",
					"    df.loc[df['ActiveWBS'].isnull(), 'ActiveWBS'] = df['SubscriptionWBS']\n",
					"    \n",
					"    df.loc[df['CostAllocationType'].isnull(), 'CostAllocationType'] = 'SubscriptionWBS'\n",
					"\n",
					"    mask = (df['CostAllocationType'] == 'CI')\n",
					"    df.loc[mask, 'ActiveWBSReason'] = 'CI WBS Lookup from SNOW'\n",
					"\n",
					"    mask = (df['CostAllocationType'] == 'APPID')\n",
					"    df.loc[mask, 'ActiveWBSReason'] = 'APPID WBS Lookup from SNOW'\n",
					"\n",
					"    mask = (df['CostAllocationType'] == 'WBS')\n",
					"    df.loc[mask, 'ActiveWBSReason'] = 'WBS Cost Tag used'\n",
					"\n",
					"    mask = (df['Tags'].str.contains('CostAllocationCode', case=False, na=False) == False) | (df['Tags'].str.contains('CostAllocationType', case=False, na=False) == False)\n",
					"    df.loc[mask, 'ActiveWBSReason'] = 'CostAllocationType or CostAllocationCode not present in Tags'\n",
					"\n",
					"    return df, subscription_list"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_output_file(df, destinationFilename, fileType):\n",
					"    \n",
					"    if fileType == 'parquet':\n",
					"        #print(f'Writing output file to: \"{destinationFilename}.parquet\"')\n",
					"        print(f'Writing output file to: {destinationFilename}')\n",
					"        #df.to_parquet(destinationFilename + '.parquet')\n",
					"        df.to_parquet(destinationFilename)\n",
					"        print('File write complete!')\n",
					"    else:\n",
					"        print(f'Writing output file to: \"{destinationFilename}.csv\"')\n",
					"        df.to_csv(destinationFilename + '.csv')\n",
					"        print('File write complete!')"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def return_costallocationcode_list(tag):\n",
					"    \n",
					"     if pd.isnull(tag):\n",
					"          return np.nan\n",
					"     else:\n",
					"          try:\n",
					"               tag_array = tag.split('\",\"')\n",
					"               #print(f\"Tag array is: {tag_array}\")\n",
					"               #print(type(tag_array))\n",
					"               for pair in tag_array:\n",
					"                    x,y = pair.split('\": \"')\n",
					"                    #print(f'x is: {x}')\n",
					"                    #print(f'y is: {y}')\n",
					"                    #temp =  x.replace('\"','').upper()\n",
					"                    #print(f'if test: {temp}')\n",
					"                    if x.replace(\"\\\"\",\"\").upper() == \"COSTALLOCATIONCODE\":\n",
					"                         #print(\"here1\")\n",
					"                         #print(y.replace(\"\\\"\",\"\").strip('\\n').strip().upper())\n",
					"                         return y.replace(\"\\\"\",\"\").strip('\\n').strip().upper()\n",
					"          except:\n",
					"               return \"ERROR\"\n",
					"               #print(f\"Isnull = false, Index is {index}, Tags is {df['Tags'][index]}\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def return_costallocationtype_list(tag):\n",
					"\n",
					"    \n",
					"     if pd.isnull(tag):\n",
					"          #print(\"Here2 - null\")\n",
					"          return np.nan\n",
					"     else:\n",
					"          try:\n",
					"               type_list = ['WBS', 'CI', 'APPID']\n",
					"               tag_array = tag.split('\",\"')\n",
					"               #print(f\"Tag array is: {tag_array}\")\n",
					"               #print(type(tag_array))\n",
					"               for pair in tag_array:\n",
					"                    x,y = pair.split('\": \"')\n",
					"                    #print(f'x is: {x}')\n",
					"                    #print(f'y is: {y}')\n",
					"                    #temp =  x.replace('\"','').upper()\n",
					"                    #print(f'if test: {temp}')\n",
					"                    #if temp == 'C.BAX.20.021':\n",
					"                              #print(\"here1\")\n",
					"                              #print(temp)\n",
					"                              #print(tag_array)\n",
					"                    if x.replace('\"','').upper() == \"COSTALLOCATIONTYPE\":\n",
					"                         #temp2 = y.replace('\"','').strip('\\n').strip().upper()\n",
					"                         #print(temp2)\n",
					"                         if y.replace('\"','').strip('\\n').strip().upper() in type_list:\n",
					"                              return y.replace('\"','').strip('\\n').strip().upper()\n",
					"                         else:\n",
					"                              #print(\"here2\")\n",
					"                              #print(temp2)\n",
					"                              #print(tag_array)\n",
					"                              return np.nan\n",
					"          except:\n",
					"               return \"ERROR\"\n",
					"               #print(f\"Isnull = false, Index is {index}, Tags is {df['Tags'][index]}\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_cost_tags(df):\n",
					"\n",
					"    print(\"Extracting cost Type and Code and storing in dedicated columns...\")\n",
					"\n",
					"    df['CostAllocationType'] = df.apply(lambda x: return_costallocationtype_list(x['Tags']), axis = 1)\n",
					"    df['CostAllocationCode'] = df.apply(lambda x: return_costallocationcode_list(x['Tags']), axis = 1)\n",
					"\n",
					"    return df"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pd.set_option('max_colwidth', 50)\n",
					"\n",
					"years = ['2021']\n",
					"#months = ['01', '02', '03', '04', '05', '06', '06', '07', '08', '09', '10', '11', '12']\n",
					"months = ['10', '11', '12']\n",
					"#months = ['07', '08', '09', '10', '11', '12']\n",
					"\n",
					"for year in years:\n",
					"    for month in months:\n",
					"        fromDate = year + month + '01'    \n",
					"        inputDate = datetime(int(year), int(month), 1)\n",
					"        res = calendar.monthrange(int(year), int(month))\n",
					"        lastDay = res[1]\n",
					"        toDate = year + month + str(lastDay)\n",
					"        print(toDate)\n",
					"\n",
					"        dateRange = fromDate + '-' + toDate\n",
					"\n",
					"        longToDate = datetime.strptime(toDate, '%Y%m%d').strftime('%Y-%m-%d')\n",
					"\n",
					"        extended_actual_cost_data_path = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/' + actualCostPath + dateRange + '/Extended_ACMMonthlyActualCost_' + dateRange + '.parquet'\n",
					"        subscription_path = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/subscriptions/subscriptions_' + longToDate + '.json'\n",
					"        #subscription_path = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/subscriptions/subscriptions.json'\n",
					"        appListPath = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/applications/applicationList.parquet'\n",
					"\n",
					"        #extended_actual_cost_data_path = 'data/2022 Actual cost (10k rows).csv'\n",
					"        #extended_actual_cost_data_path = 'data/ACMMonthlyActualCost_20220101-20220131.parquet'\n",
					"        #extended_actual_cost_data_path = 'data/ACMMonthlyActualCost_20220201-20220228.parquet'\n",
					"        #size = 100000\n",
					"        #subscription_path = 'data/subscriptions.json'\n",
					"        #appListPath = 'data/applicationList.parquet'\n",
					"\n",
					"        df, subscription_list, appList = load_source_files(extended_actual_cost_data_path, subscription_path, appListPath, 'parquet')\n",
					"        #df, subscription_list, appList = load_source_files(extended_actual_cost_data_path, subscription_path, appListPath, 'csv')\n",
					"        #df = shorten_df(df, size)\n",
					"\n",
					"        #df = orig_df.copy()\n",
					"        df = expand_cost_tags(df)\n",
					"        #print(df[['Tags', 'CostAllocationType', 'CostAllocationCode']])\n",
					"        subscription_list = expand_subscription_tags(subscription_list)\n",
					"        #print(subscription_list)\n",
					"        df, subscription_list = merge_dataframes(df, subscription_list)\n",
					"        df, subscription_list = replace_empty_cost_fields_with_subscription_details(df, subscription_list, appList)\n",
					"        write_output_file(df, extended_actual_cost_data_path, 'parquet')"
				],
				"execution_count": 12
			}
		]
	}
}