{
	"name": "Extend Cost File_v2",
	"properties": {
		"folder": {
			"name": "NotebookNotInUse"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "c2216ffe-84ee-4a51-abea-458cbeebf7a8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"amortizedCostPath = 'exports/monthly/ACMMonthlyAmortizedCost/'\r\n",
					"actualCostPath = 'exports/monthly/ACMMonthlyActualCost/'\r\n",
					"toDate = '20230731'\r\n",
					"fromDate = '20230701'\r\n",
					"container = 'usage'\r\n",
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.pandas as ps\r\n",
					"import json\r\n",
					"import numpy as np\r\n",
					"import pandas as pd\r\n",
					"import warnings\r\n",
					"\r\n",
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.types as T"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def load_source(actualCostSourcefilename):\r\n",
					"\r\n",
					"    print('Loading Actual Cost df...')\r\n",
					"    print(actualCostSourcefilename)\r\n",
					"    actualCost_df = spark.read.format('parquet').load(actualCostSourcefilename)\r\n",
					"    #actualCost_df = pd.read_parquet(actualCostSourcefilename, engine='fastparquet')\r\n",
					"    #actualCost_df = pq.read_table(source=actualCostSourcefilename).to_pandas()\r\n",
					"    print(f'Source file contains {actualCost_df.count():,} rows')\r\n",
					"\r\n",
					"    return actualCost_df"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def populate_columns(actualCost_df):\r\n",
					"\r\n",
					"    actualCost_df = actualCost_df.withColumn('Azure_Hybrid_Benefit', F.when(F.col('MeterSubCategory').contains('Windows'), \"Not Enabled\")\\\r\n",
					"                                                                      .when(F.col('ServiceInfo2') == 'Windows Server BYOL', \"Enabled\")\\\r\n",
					"                                                                      .otherwise('Not Supported'))\r\n",
					"\r\n",
					"    actualCost_df = actualCost_df.withColumn('IsRIUsage', F.when(F.col('ReservationId').isNull(), 'On Demand Usage').otherwise('RI Usage'))\r\n",
					"\r\n",
					"    return actualCost_df\r\n",
					"    "
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def extend_additional_info(actualCost_df):\r\n",
					"    # Convert column into Json-dict\r\n",
					"    actualCost_df = actualCost_df.withColumn('AdditionalInfo', F.from_json(F.col('AdditionalInfo'), 'map<string,string>', options={'inferSchema': 'true'}))\r\n",
					"\r\n",
					"    actualCost_df = actualCost_df.withColumn('id', F.monotonically_increasing_id())\r\n",
					"\r\n",
					"    cols_to_keep = [\"UsageType\",\r\n",
					"                    \"ImageType\",\r\n",
					"                    \"ServiceType\",\r\n",
					"                    \"VMName\",\r\n",
					"                    \"VMProperties\",\r\n",
					"                    \"VCPUs\",\r\n",
					"                    \"AHB\",\r\n",
					"                    \"vCores\",\r\n",
					"                    \"RINormalizationRatio\",\r\n",
					"                    \"ConsumedQuantity\",\r\n",
					"                    \"DatabaseName\"]\r\n",
					"\r\n",
					"    for col in cols_to_keep:\r\n",
					"        actualCost_df = actualCost_df.withColumn('ai_' + col, F.coalesce(F.col(f'AdditionalInfo.{col}'), F.lit(None)))\r\n",
					"\r\n",
					"    return actualCost_df"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def AHB_column(actualCost_df):\r\n",
					"    print('Populating the AHB vCPUs column...')\r\n",
					"    actualCost_df = actualCost_df.withColumn('ai_VCPUs', F.col('ai_VCPUs').cast('int'))\r\n",
					"    actualCost_df = actualCost_df.na.fill({'ai_VCPUs' : 0})\r\n",
					"    actualCost_df = actualCost_df.withColumn('AHB_CPUs', F.when(F.col('ai_VCPUs') == 0, 0)\\\r\n",
					"                                                          .when(F.col('ai_VCPUs') < 8, 8)\\\r\n",
					"                                                          .when(F.col('ai_VCPUs') < 16, 16)\\\r\n",
					"                                                          .when(F.col('ai_VCPUs') == 20, 24)\\\r\n",
					"                                                          .when(F.col('ai_VCPUs') > 20, F.col('ai_VCPUs'))\\\r\n",
					"                                                          .otherwise(0))\r\n",
					"\r\n",
					"    return actualCost_df"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def populate_wbs_columns(cost_df, subscription_list, year, month, reportType):\r\n",
					"\r\n",
					"    cost_df = expand_cost_tags(cost_df)\r\n",
					"    subscription_list = expand_subscription_tags(subscription_list)\r\n",
					"    cost_df, subscription_list = merge_dataframes(cost_df, subscription_list)\r\n",
					"    cost_df = replace_empty_cost_fields_with_subscription_details(cost_df, appList)\r\n",
					"\r\n",
					"    print('WBS population complete')\r\n",
					"    \r\n",
					"    return cost_df"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def instance_name(actualCost_df):    \r\n",
					"    \r\n",
					"    print('Populating the Instance Name column...')\r\n",
					"    # actualCost_df = actualCost_df.withColumnRenamed('ai_VMName', 'ai_Container_VmName'})\r\n",
					"    actualCost_df = actualCost_df.withColumn('Instance_Name', F.when(F.col('ai_VMName').isNull(), F.col('ResourceName'))\\\r\n",
					"                                                               .when(F.col('ai_VMName').isNotNull(), F.col('ai_VMName'))\\\r\n",
					"                                                               .otherwise(0))  \r\n",
					"    \r\n",
					"\r\n",
					"    actualCost_df = actualCost_df.withColumn('Date', F.col('Date').cast(T.DateType()))\r\n",
					"    \r\n",
					"    return actualCost_df"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_output(actualCost_df, actualCostDestinationfilename):\r\n",
					"\r\n",
					"    # Dropping some columns before writing the output\r\n",
					"    actualCost_df = actualCost_df.drop('id', 'AdditionalInfo')\r\n",
					"\r\n",
					"    print('Writing Extended file...')\r\n",
					"    actualCost_df.write.format('parquet').mode('overwrite').option('path', actualCostDestinationfilename).save()\r\n",
					"\r\n",
					"    del actualCost_df\r\n",
					"    print('Extended file write complete!')"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"warnings.simplefilter(action='ignore', category=FutureWarning)\r\n",
					"\r\n",
					"dateRange = fromDate + '-' + toDate\r\n",
					"\r\n",
					"#actualCostSourcefilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + actualCostPath + dateRange + '/ACMMonthlyActualCost_' + dateRange + '.parquet'\r\n",
					"#actualCostDestinationfilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + actualCostPath + dateRange + '/Extended_ACMMonthlyActualCost_' + dateRange + '.parquet'\r\n",
					"\r\n",
					"actualCostSourcefilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + amortizedCostPath + dateRange + '/ACMMonthlyAmortizedCost_' + dateRange + '.parquet'\r\n",
					"actualCostDestinationfilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + amortizedCostPath + dateRange + '/Extended_ACMMonthlyAmortizedCost_' + dateRange + '.parquet'\r\n",
					"\r\n",
					"actualCost_df = load_source(actualCostSourcefilename)\r\n",
					"actualCost_df = populate_columns(actualCost_df)\r\n",
					"actualCost_df = extend_additional_info(actualCost_df)\r\n",
					"actualCost_df = AHB_column(actualCost_df)\r\n",
					"actualCost_df = instance_name(actualCost_df)\r\n",
					"write_output(actualCost_df, actualCostDestinationfilename)\r\n",
					"\r\n",
					"# display(actualCost_df)"
				],
				"execution_count": 33
			}
		]
	}
}