{
	"name": "compute-usd-plan-discounts",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "95aef653-4973-4305-a98c-39b9d57a2477"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import numpy as np\r\n",
					"import pyspark.sql.window as W"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"AZURE_INTERNAL_USD_TO_NOK = 10.958\r\n",
					"START_DATE = '2024-02-01'\r\n",
					"START_DISCOUNT = 20\r\n",
					"END_DISCOUNT = 50\r\n",
					"DISCOUNT_INCREMENT = 5"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"exchange_rate_path = f'abfss://usage@s037costmgmt.dfs.core.windows.net/exchange-rates/usd-to-nok.parquet'\r\n",
					"exchange_rate_df = spark.read.format('parquet').load(exchange_rate_path)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"exchange_rate_df = exchange_rate_df \\\r\n",
					"    .select('TIME_PERIOD', 'OBS_VALUE') \\\r\n",
					"    .withColumnRenamed('OBS_VALUE', 'USD2NOK') \\\r\n",
					"    .withColumn('DateKey', F.date_format('TIME_PERIOD', 'yyyy-MM-dd')) \\\r\n",
					"    .drop('TIME_PERIOD')"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_path = f'abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyAmortizedCost/*/Extended_v3_ACMMonthlyAmortizedCost_*.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)\r\n",
					"cost_df = cost_df.where(F.col('Date') >= START_DATE)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"window_spec = W.Window.orderBy(\"Date\")\r\n",
					"\r\n",
					"cost_df = cost_df \\\r\n",
					"    .select('Date','ChargeType', 'PricingModel', 'CostInBillingCurrency', 'Quantity', 'PayGPrice') \\\r\n",
					"    .where((F.col('PricingModel') == 'OnDemand') & (F.col('ChargeType') == 'Usage')) \\\r\n",
					"    .withColumn('RetailCost', F.col('PayGPrice') * F.col('Quantity')) \\\r\n",
					"    .withColumn('DateKey', F.date_format('Date', 'yyyy-MM-dd')) \\\r\n",
					"    .groupBy('Date', 'DateKey') \\\r\n",
					"    .agg(F.sum('CostInBillingCurrency').alias('CurrentCost'), F.sum('RetailCost').alias('RetailCost')) \\\r\n",
					"    .join(exchange_rate_df, 'DateKey', 'left') \\\r\n",
					"    .withColumn(\"USD2NOK_lag\", F.lag(\"USD2NOK\").over(window_spec)) \\\r\n",
					"    .withColumn(\"USD2NOK\", F.when(F.col(\"USD2NOK\").isNull(), F.last(F.col(\"USD2NOK_lag\"), True).over(window_spec)).otherwise(F.col(\"USD2NOK\"))) \\\r\n",
					"    .drop('DateKey', 'USD2NOK_lag')"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.withColumn('InternalRate', F.lit(AZURE_INTERNAL_USD_TO_NOK))\r\n",
					"cost_df = cost_df.withColumn('MarkupRate', F.col('InternalRate') / F.col('USD2NOK'))\r\n",
					"cost_df = cost_df.withColumn('AdjustedRetailCost', F.col('RetailCost') / F.col('MarkupRate'))"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"discounts = np.arange(START_DISCOUNT, END_DISCOUNT + 1, DISCOUNT_INCREMENT)\r\n",
					"for discount in discounts:\r\n",
					"    cost_df = cost_df.withColumn(f'DiscountedCost_{discount}', F.col('AdjustedRetailCost') * (1 - (discount / 100)))"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"usd_plan_cost_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/exchange-rates/usd-plan-cost.parquet\"\r\n",
					"cost_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(usd_plan_cost_path)"
				],
				"execution_count": 21
			}
		]
	}
}