{
	"name": "compute-sql-hub-savings",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "f54ff5a8-6d65-498d-ac77-593cd6ccf7c8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Initialize script"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.types as T"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Constants \r\n",
					"SQL_ANNUAL_LICENSE_COST =  3272361.37 "
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/*/Extended_v3_ACMMonthlyActualCost_*.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"isManagedInstance = ((F.col('MeterCategory') == 'SQL Managed Instance') & (F.col('ai_AHB') == True))\r\n",
					"isVMLicense = (F.col('MeterCategory') == 'Virtual Machine Licenses') & F.col('MeterSubCategory').like('%Hybrid%')\r\n",
					"\r\n",
					"cost_df = cost_df.where(isManagedInstance | isVMLicense)\r\n",
					"cost_df = cost_df.withColumn('Date', F.date_format('Date', 'yyyy-MM'))\r\n",
					"cost_df = cost_df.withColumn(\"Date\", F.to_date(cost_df.Date, \"yyyy-MM\"))\r\n",
					"cost_df = cost_df.withColumnRenamed('ai_ServiceType', 'ServiceType')\r\n",
					"cost_df = cost_df.withColumnRenamed('ai_VCPUs', 'VCPUs')\r\n",
					"cost_df = cost_df.withColumnRenamed('ai_VCores', 'VCores')\r\n",
					"cost_df = cost_df.withColumnRenamed('ai_AHB', 'AHB')"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/pricesheet-LATEST.parquet'\r\n",
					"pricesheet_df = spark.read.format('parquet').load(pricesheet_path)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pricesheet_df = pricesheet_df.withColumn('unitQuantity', F.split('unitOfMeasure', ' ')[0])\r\n",
					"pricesheet_df = pricesheet_df.withColumn('pricePerUnit', F.col('unitPrice') / F.col('unitQuantity'))\r\n",
					"pricesheet_df = pricesheet_df.select('meterName', 'unitOfMeasure', 'unitQuantity', 'unitPrice', 'pricePerUnit')"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hub_df = cost_df \\\r\n",
					"    .select('ServiceType', 'AHB', 'VCores', 'VCPUs', 'MeterCategory', 'MeterSubCategory', 'Date', 'Quantity', 'ProductName', 'ResourceId') \\\r\n",
					"    .groupBy('ServiceType', 'AHB', 'VCores', 'VCPUs', 'MeterCategory', 'MeterSubCategory', 'Date', 'ProductName', 'ResourceId') \\\r\n",
					"    .agg(F.sum('Quantity').alias('Quantity')) \\\r\n",
					"    .orderBy('Date', 'Quantity')\r\n",
					"\r\n",
					"# hub_df = hub_df.where(F.col('VCPUs') != 0)\r\n",
					"# hub_df = hub_df.withColumn('pricesheetService', F.concat(F.lit('Windows Server - '), F.col('VCPUs'), F.lit(' vCPU VM License')))"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hub_df = hub_df.withColumn('DBType', \r\n",
					"    F.when(F.col('ResourceId').like('%Microsoft.Sql/servers%'), 'SQL DB')\r\n",
					"    .when(F.col('ResourceId').like('%Microsoft.Sql/managedInstances%'), 'SQL MI')\r\n",
					"    .when(F.col('ResourceId').like('%Microsoft.Compute/virtualMachines%'), 'SQL VM')\r\n",
					"    .otherwise('undefined')\r\n",
					" )"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(hub_df)"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"```\r\n",
					"-- This is auto-generated code\r\n",
					"SELECT\r\n",
					"    --TOP 100 \r\n",
					"    ai_ServiceType as ServiceType, \r\n",
					"    ai_AHB as AHB, \r\n",
					"    ai_vCores as vCores, \r\n",
					"    ai_VCPUs as VCPUs, \r\n",
					"    MeterCategory,\r\n",
					"    MeterSubCategory,\r\n",
					"    format([Date], 'yyyy-MM') as [Short Date], \r\n",
					"    sum(Quantity) as Quantity,\r\n",
					"    --PartNumber,\r\n",
					"    ProductName,\r\n",
					"    ResourceId\r\n",
					"    \r\n",
					"FROM\r\n",
					"    OPENROWSET(\r\n",
					"        BULK 'https://s037costmgmt.dfs.core.windows.net/usage/exports/monthly/ACMMonthlyActualCost/202*/Extended_v2_ACMMonthlyActualCost_*.parquet/**',\r\n",
					"        FORMAT = 'PARQUET'\r\n",
					"    ) AS [result]\r\n",
					"WHERE (MeterCategory = 'SQL Managed Instance' and ai_AHB = 'True') \r\n",
					"or (MeterCategory = 'Virtual Machines Licenses' and MeterSubCategory LIKE '%Hybrid%') \r\n",
					"and format([Date], 'yyyy-MM') >= '2022-11' and format([Date], 'yyyy-MM') <= '2023-10' \r\n",
					"--WHERE JSON_VALUE(AdditionalInfo, '$.AHB') = 'True' or MeterSubCategory LIKE '%Hybrid%'\r\n",
					"\r\n",
					"-----Below line extracts non HUB SQL entries for testing & investigation purposes\r\n",
					"--WHERE (MeterCategory = 'SQL Managed Instance' and JSON_VALUE(AdditionalInfo, '$.AHB') = 'False') or (MeterCategory = 'Virtual Machines Licenses' and MeterSubCategory NOT LIKE '%Hybrid%') and Product LIKE 'SQL Server%' and Product NOT LIKE 'SQL Server Express%'\r\n",
					"\r\n",
					"GROUP BY  ai_ServiceType, ai_AHB, ai_vCores, ai_VCPUs, MeterCategory, MeterSubCategory, format([Date], 'yyyy-MM'), ProductName, ResourceId\r\n",
					"ORDER BY format([Date], 'yyyy-MM'), Quantity DESC\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"```"
				]
			}
		]
	}
}