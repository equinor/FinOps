{
	"name": "prepare-latest-hub-deployments",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "dcf369c8-3f5a-429e-a6a8-17c20fc72d32"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.types as T\r\n",
					"from enum import Enum\r\n",
					"from datetime import timedelta, datetime\r\n",
					"from dateutil.relativedelta import relativedelta"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class DeploymentStatus(Enum):\r\n",
					"    Enabled = \"Enabled\"\r\n",
					"    Disabled = \"Disabled\"\r\n",
					"\r\n",
					"class DeploymentType(Enum):\r\n",
					"    VM = \"VM\"\r\n",
					"    SQL = \"SQL\""
				],
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load AHUB Deployments from source"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_enable_path = 'abfss://sql-hub-logs-v2@hubautomation.dfs.core.windows.net/LATEST-AHUB-Deployment.csv'\r\n",
					"sql_disable_path = 'abfss://sql-hub-logs-v2@hubautomation.dfs.core.windows.net/LATEST-AHUB-Removal.csv'\r\n",
					"vm_enable_path = 'abfss://win-hub-logs-v2@hubautomation.dfs.core.windows.net/LATEST-AHUB-Deployment.csv'\r\n",
					"vm_disable_path = 'abfss://win-hub-logs-v2@hubautomation.dfs.core.windows.net/LATEST-AHUB-Removal.csv'\r\n",
					"\r\n",
					"csv_options = {\r\n",
					"    'header' : True,\r\n",
					"    'delimiter' : ',',\r\n",
					"    'quote' : '\"',\r\n",
					"    'escape' : '\"'\r\n",
					"}\r\n",
					"\r\n",
					"sql_enable_df = spark.read.options(**csv_options).csv(sql_enable_path)\r\n",
					"sql_disable_df = spark.read.options(**csv_options).csv(sql_disable_path)\r\n",
					"vm_enable_df = spark.read.options(**csv_options).csv(vm_enable_path)\r\n",
					"vm_disable_df = spark.read.options(**csv_options).csv(vm_disable_path)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_enable_df = sql_enable_df \\\r\n",
					"    .select('Date', 'ResourceId', 'SubscriptionId', 'ResourceName', 'ResourceGroup', 'SQLAHB_VCPUs') \\\r\n",
					"    .withColumnRenamed('SQLAHB_VCPUs', 'NormalizedCores') \\\r\n",
					"    .withColumn('DeploymentStatus', F.lit(DeploymentStatus.Enabled.value)) \\\r\n",
					"    .withColumn('DeploymentType', F.lit(DeploymentType.SQL.value))\r\n",
					"\r\n",
					"sql_disable_df = sql_disable_df \\\r\n",
					"    .select('Date', 'ResourceId', 'SubscriptionId', 'ResourceName', 'ResourceGroup', 'SQLAHB_VCPUs') \\\r\n",
					"    .withColumnRenamed('SQLAHB_VCPUs', 'NormalizedCores') \\\r\n",
					"    .withColumn('DeploymentStatus', F.lit(DeploymentStatus.Disabled.value)) \\\r\n",
					"    .withColumn('DeploymentType', F.lit(DeploymentType.SQL.value))\r\n",
					"\r\n",
					"vm_enable_df = vm_enable_df \\\r\n",
					"    .select('Date', 'ResourceId', 'SubscriptionId', 'ResourceName', 'ResourceGroup', 'WindowsAHB_VCPUs') \\\r\n",
					"    .withColumnRenamed('WindowsAHB_VCPUs', 'NormalizedCores') \\\r\n",
					"    .withColumn('DeploymentStatus', F.lit(DeploymentStatus.Enabled.value)) \\\r\n",
					"    .withColumn('DeploymentType', F.lit(DeploymentType.VM.value))\r\n",
					"\r\n",
					"vm_disable_df = vm_disable_df \\\r\n",
					"    .select('Date', 'ResourceId', 'SubscriptionId', 'ResourceName', 'ResourceGroup', 'WindowsAHB_VCPUs') \\\r\n",
					"    .withColumnRenamed('WindowsAHB_VCPUs', 'NormalizedCores') \\\r\n",
					"    .withColumn('DeploymentStatus', F.lit(DeploymentStatus.Disabled.value)) \\\r\n",
					"    .withColumn('DeploymentType', F.lit(DeploymentType.VM.value))\r\n",
					"\r\n",
					"ahb_assignments = sql_enable_df.union(vm_enable_df)\r\n",
					"ahb_removals = sql_disable_df.union(vm_disable_df)\r\n",
					"ahb_deployments_df = ahb_assignments.union(ahb_removals)\r\n",
					"ahb_deployments_df = ahb_deployments_df.withColumn('NormalizedCores', F.col('NormalizedCores').cast(T.IntegerType()))\r\n",
					"ahb_deployments_df = ahb_deployments_df.withColumn('Date', F.col('Date').cast(T.DateType()))"
				],
				"execution_count": 59
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load usage data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"today = datetime.now()\r\n",
					"next_month_start = (today + relativedelta(months=1)).replace(day=1)\r\n",
					"current_month_start = today.replace(day=1).strftime('%Y%m%d')\r\n",
					"current_month_end = (next_month_start - timedelta(days=1)).strftime('%Y%m%d')\r\n",
					"date_range = f'{current_month_start}-{current_month_end}'"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"usage_path = f'abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/{date_range}/Extended_v3_ACMMonthlyActualCost_{date_range}.parquet'\r\n",
					"usage_df = spark.read.format('parquet').load(usage_path)"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Only look at yesterdays usage (usage from today will not be accessible yet)\r\n",
					"usage_df = usage_df.where(F.col('Date') == (today - relativedelta(days=1)).strftime('%Y-%m-%d'))\r\n",
					"\r\n",
					"# Find all usage with AHB enabled\r\n",
					"usage_df = usage_df.where((F.col('WindowsAHB') == 'Enabled') | (F.col('SQLAHB') == 'Enabled'))\r\n",
					"usage_df = usage_df.select('Date', 'ResourceId', 'ResourceName', 'ResourceGroup', 'SubscriptionName', 'MeterCategory', 'MeterSubCategory')\r\n",
					"usage_df = usage_df.drop_duplicates(['ResourceId'])"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Exclude TS VMs - as the AHB for these instances are managed by a separate team\r\n",
					"TS_VM_RG = [\r\n",
					"    'RG-TERMINAL_SERVERS-NOE',\r\n",
					"    'RG-TERMINAL_SERVERS-NOW',\r\n",
					"    'RG-TERMINAL_SERVERS-SCUS'\r\n",
					"]\r\n",
					"\r\n",
					"usage_df = usage_df.where(~F.col('ResourceGroup').isin(TS_VM_RG))"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Find rouge AHB enabled instances (i.e instances with AHB enabled that are not in the assignment list)\r\n",
					"assigned_resource_list = ahb_assignments.select(F.collect_list('ResourceId')).first()[0]\r\n",
					"rouge_resources = usage_df.where(~F.col('ResourceId').isin(assigned_resource_list))"
				],
				"execution_count": 64
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write results back to data lake"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"deployment_path = f\"abfss://usage@s037costmgmt.dfs.core.windows.net/hub/latest-hub-deployments.parquet\"\r\n",
					"ahb_deployments_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(deployment_path)\r\n",
					"\r\n",
					"rouge_path = f\"abfss://usage@s037costmgmt.dfs.core.windows.net/hub/latest-hub-rouge-instances.parquet\"\r\n",
					"rouge_resources.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(rouge_path)"
				],
				"execution_count": 65
			}
		]
	}
}