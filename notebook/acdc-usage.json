{
	"name": "acdc-usage",
	"properties": {
		"folder": {
			"name": "NotebookInProduction"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "159c79c0-4377-48f0-aae6-0bbf0182f450"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.types as T"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"acdc_path = 'abfss://usage@s037costmgmt.dfs.core.windows.net/ACDC/cost_details.parquet'\r\n",
					"acdc_df = spark.read.format('parquet').load(acdc_path)"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"acdc_df = acdc_df.select(\r\n",
					"    'WBS',\r\n",
					"    'SubscriptionId',\r\n",
					"    'SubscriptionName',\r\n",
					"    'ResourceGroup',\r\n",
					"    'Amount',\r\n",
					"    'ServiceNowAppName',\r\n",
					"    'Posting_Date',\r\n",
					"    'AllocType',\r\n",
					"    'ResourceCostAllocationType',\r\n",
					"    'LatestCostAllocationCode',\r\n",
					"    'LatestCostAllocationCodeStatus',\r\n",
					"    'LatestCostCenter',\r\n",
					"    'LatestCostCenterStatus',\r\n",
					"    'ServiceNowWBS',\r\n",
					"    'ServiceNowWBSStatus',\r\n",
					"    'Line_Text',\r\n",
					"    'SAP_Line_Text',\r\n",
					"    'Document_Number',\r\n",
					"    'SAP_Response_Text',\r\n",
					"    'Period'\r\n",
					")\r\n",
					"\r\n",
					"acdc_df = acdc_df.withColumn('Date', F.to_date('Period', 'yyyy/MM'))\r\n",
					"acdc_df = acdc_df.withColumn('Amount', F.regexp_replace(\"Amount\", \",\", \".\").cast(T.DoubleType()))"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_path = f'abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyAmortizedCost/*/Extended_v3_ACMMonthlyAmortizedCost_*.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.select(\r\n",
					"    'CostInBillingCurrency',\r\n",
					"    'SubscriptionId',\r\n",
					"    'SubscriptionName',\r\n",
					"    'ResourceGroup',\r\n",
					"    'Application_Name',\r\n",
					"    'ActiveWBS',\r\n",
					"    'Date'\r\n",
					")"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.withColumn('Date', F.date_format('Date', 'yyyy-MM-01'))\r\n",
					"cost_df = cost_df.where(F.col('Date') >= '2022-05-01')"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df \\\r\n",
					"    .groupBy('Date', 'SubscriptionId', 'SubscriptionName', 'ResourceGroup', 'Application_Name', 'ActiveWBS') \\\r\n",
					"    .agg(F.sum('CostInBillingCurrency').alias('Amount'))"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"acdc_processed_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/ACDC/processed_acdc_details.parquet\"\r\n",
					"acdc_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(acdc_processed_path)\r\n",
					"\r\n",
					"cost_processed_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/ACDC/processed_finops_details.parquet\"\r\n",
					"cost_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(cost_processed_path)"
				],
				"execution_count": 60
			}
		]
	}
}