{
	"name": "Prod_actual_usage_management",
	"properties": {
		"description": "\n",
		"folder": {
			"name": "tsc/Unused"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "fa2f62a0-53c7-4293-b377-fe6f502df901"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"58e51e4f-0a93-448c-adf3-34f7ee12cdf3": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [],
								"schema": [
									{
										"key": "0",
										"name": "InvoiceSectionName",
										"type": "string"
									},
									{
										"key": "1",
										"name": "AccountName",
										"type": "string"
									},
									{
										"key": "2",
										"name": "AccountOwnerId",
										"type": "string"
									},
									{
										"key": "3",
										"name": "SubscriptionId",
										"type": "string"
									},
									{
										"key": "4",
										"name": "SubscriptionName",
										"type": "string"
									},
									{
										"key": "5",
										"name": "ResourceGroup",
										"type": "string"
									},
									{
										"key": "6",
										"name": "ResourceLocation",
										"type": "string"
									},
									{
										"key": "7",
										"name": "Date",
										"type": "timestamp"
									},
									{
										"key": "8",
										"name": "ProductName",
										"type": "string"
									},
									{
										"key": "9",
										"name": "MeterCategory",
										"type": "string"
									},
									{
										"key": "10",
										"name": "MeterSubCategory",
										"type": "string"
									},
									{
										"key": "11",
										"name": "MeterId",
										"type": "string"
									},
									{
										"key": "12",
										"name": "MeterName",
										"type": "string"
									},
									{
										"key": "13",
										"name": "MeterRegion",
										"type": "string"
									},
									{
										"key": "14",
										"name": "UnitOfMeasure",
										"type": "string"
									},
									{
										"key": "15",
										"name": "Quantity",
										"type": "double"
									},
									{
										"key": "16",
										"name": "EffectivePrice",
										"type": "double"
									},
									{
										"key": "17",
										"name": "CostInBillingCurrency",
										"type": "double"
									},
									{
										"key": "18",
										"name": "CostCenter",
										"type": "string"
									},
									{
										"key": "19",
										"name": "ConsumedService",
										"type": "string"
									},
									{
										"key": "20",
										"name": "ResourceId",
										"type": "string"
									},
									{
										"key": "21",
										"name": "Tags",
										"type": "string"
									},
									{
										"key": "22",
										"name": "OfferId",
										"type": "string"
									},
									{
										"key": "23",
										"name": "AdditionalInfo",
										"type": "string"
									},
									{
										"key": "24",
										"name": "ServiceInfo1",
										"type": "string"
									},
									{
										"key": "25",
										"name": "ServiceInfo2",
										"type": "string"
									},
									{
										"key": "26",
										"name": "ResourceName",
										"type": "string"
									},
									{
										"key": "27",
										"name": "ReservationId",
										"type": "string"
									},
									{
										"key": "28",
										"name": "ReservationName",
										"type": "string"
									},
									{
										"key": "29",
										"name": "UnitPrice",
										"type": "double"
									},
									{
										"key": "30",
										"name": "ProductOrderId",
										"type": "string"
									},
									{
										"key": "31",
										"name": "ProductOrderName",
										"type": "string"
									},
									{
										"key": "32",
										"name": "Term",
										"type": "string"
									},
									{
										"key": "33",
										"name": "PublisherType",
										"type": "string"
									},
									{
										"key": "34",
										"name": "PublisherName",
										"type": "string"
									},
									{
										"key": "35",
										"name": "ChargeType",
										"type": "string"
									},
									{
										"key": "36",
										"name": "Frequency",
										"type": "string"
									},
									{
										"key": "37",
										"name": "PricingModel",
										"type": "string"
									},
									{
										"key": "38",
										"name": "AvailabilityZone",
										"type": "string"
									},
									{
										"key": "39",
										"name": "BillingAccountId",
										"type": "string"
									},
									{
										"key": "40",
										"name": "BillingAccountName",
										"type": "string"
									},
									{
										"key": "41",
										"name": "BillingCurrencyCode",
										"type": "string"
									},
									{
										"key": "42",
										"name": "BillingPeriodStartDate",
										"type": "string"
									},
									{
										"key": "43",
										"name": "BillingPeriodEndDate",
										"type": "string"
									},
									{
										"key": "44",
										"name": "BillingProfileId",
										"type": "string"
									},
									{
										"key": "45",
										"name": "BillingProfileName",
										"type": "string"
									},
									{
										"key": "46",
										"name": "InvoiceSectionId",
										"type": "string"
									},
									{
										"key": "47",
										"name": "IsAzureCreditEligible",
										"type": "string"
									},
									{
										"key": "48",
										"name": "PartNumber",
										"type": "string"
									},
									{
										"key": "49",
										"name": "PayGPrice",
										"type": "double"
									},
									{
										"key": "50",
										"name": "PlanName",
										"type": "string"
									},
									{
										"key": "51",
										"name": "ServiceFamily",
										"type": "string"
									},
									{
										"key": "52",
										"name": "CostAllocationRuleName",
										"type": "string"
									},
									{
										"key": "53",
										"name": "benefitId",
										"type": "string"
									},
									{
										"key": "54",
										"name": "benefitName",
										"type": "string"
									},
									{
										"key": "55",
										"name": "Report_Date",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"15"
									],
									"isStacked": false
								}
							}
						}
					},
					"3846b6cd-fdc8-4ea6-9935-15ab62776bf2": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [],
								"schema": [
									{
										"key": "0",
										"name": "SubscriptionId",
										"type": "string"
									},
									{
										"key": "1",
										"name": "SubscriptionName",
										"type": "string"
									},
									{
										"key": "2",
										"name": "CostCenter",
										"type": "string"
									},
									{
										"key": "3",
										"name": "ResourceGroup",
										"type": "string"
									},
									{
										"key": "4",
										"name": "ResourceLocation",
										"type": "string"
									},
									{
										"key": "5",
										"name": "ResourceName",
										"type": "string"
									},
									{
										"key": "6",
										"name": "MeterName",
										"type": "string"
									},
									{
										"key": "7",
										"name": "MeterCategory",
										"type": "string"
									},
									{
										"key": "8",
										"name": "MeterSubCategory",
										"type": "string"
									},
									{
										"key": "9",
										"name": "Report_Date",
										"type": "string"
									},
									{
										"key": "10",
										"name": "Date",
										"type": "timestamp"
									},
									{
										"key": "11",
										"name": "TotalQuantity",
										"type": "double"
									},
									{
										"key": "12",
										"name": "CostInKroner",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"11"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Install older version of pandas to avoid any mismatch issue"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# spark.conf.set(\"spark.sql.execution.arrow.pyspark.enabled\", \"false\")\r\n",
					"%pip install -U pandas==1.5.3"
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import Libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd \r\n",
					"import pyspark.pandas as ps\r\n",
					"from pyspark.sql import functions as F\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import StructType\r\n",
					"import pandas as pd\r\n",
					"from pyspark.sql.functions import lit"
				],
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load the data"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Collect the data schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define a path for the data with random period\r\n",
					"path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/20190301-20190331/ACMMonthlyActualCost_20190301-20190331.parquet\"\r\n",
					"\r\n",
					"# Load the data schema and add a new column for Report Date\r\n",
					"df_schema = spark.read.format(\"parquet\").load(path)#.toPandas()\r\n",
					"df_schema = df_schema.withColumn('Report_Date', lit(''))\r\n",
					"\r\n",
					"# Load the data schema that fits for extended file_paths # \r\n",
					"#df_schema_extended = spark.read.format(\"parquet\").load(path)#.toPandas()\r\n",
					"#df_schema_extended = df_schema_extended.withColumn('Report_Date', lit(''))"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"len(df_schema.columns)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load all ACMMonthlyActualCost data and append to one dataframe."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Create a SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Define an empty schema\r\n",
					"schema = df_schema.schema\r\n",
					"\r\n",
					"# Create an empty DataFrame with the specified schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Define the root path\r\n",
					"root_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost\"\r\n",
					"\r\n",
					"# Collect all the folders under this root path\r\n",
					"folders = mssparkutils.fs.ls(root_path)\r\n",
					"\r\n",
					"\r\n",
					"for folder in folders:\r\n",
					"    # Collect all file path from the folder\r\n",
					"    file_paths = mssparkutils.fs.ls(root_path +'/'+ str(folder.name))\r\n",
					"    for file_path in file_paths:\r\n",
					"        # Focus on parquet file not csv file\r\n",
					"        #if '.parquet' in file_path.name:\r\n",
					"        if 'Extended_' in file_path.name:\r\n",
					"            try:\r\n",
					"                # Add a Report date column in the dataframe\r\n",
					"                date = pd.to_datetime(folder.path.split('/')[-1].split('-')[0],format=\"%Y/%m/%d\")\r\n",
					"                df_temp = spark.read.format(\"parquet\").load(file_path.path)\r\n",
					"                df_temp = df_temp.withColumn('Report_Date', lit(date))\r\n",
					"                # Append the dataframe\r\n",
					"                df = df.union(df_temp)\r\n",
					"            except Exception as e:\r\n",
					"                # Exclude the extended files that are developed by David.\r\n",
					"                print(\"Those files will not be read\",file_path.name)\r\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Display the dataframe"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"print('Number of rows:',df.count())\r\n",
					"display(df)"
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Aggregate the data \r\n",
					"Reduce the size of the data to fit PowerBI performance\r\n",
					"\r\n",
					"Only select the useful fields"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Aggregate the data\r\n",
					"df_agg = df.groupBy('SubscriptionId','SubscriptionName','CostCenter','ResourceGroup','ResourceLocation','ResourceName','MeterName','MeterCategory','MeterSubCategory','Report_Date','Date').agg(F.sum('Quantity').alias('TotalQuantity'),F.sum('CostInBillingCurrency').alias('CostInKroner'))"
				],
				"execution_count": 37
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Display aggregated data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"print(\"The number of the rows:\", df_agg.count())\r\n",
					"display(df_agg)"
				],
				"execution_count": 38
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Save it to optimized container"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define optimized path to save the data\r\n",
					"#optimized_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/partition_aggregate/parquet/ACMMonthlyActualCost_Aggregated_overview.parquet\" \r\n",
					"optimized_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/partition_aggregate/parquet/Extended_ACMMonthlyActualCost_Aggregated_overview.parquet\" \r\n",
					"#Save the data with partitioned by time\r\n",
					"df_agg.write.format('parquet').mode('overwrite').partitionBy('Report_Date').option('overwriteSchema', 'true').save(optimized_path)"
				],
				"execution_count": 39
			}
		]
	}
}