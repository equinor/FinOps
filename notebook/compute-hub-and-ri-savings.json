{
	"name": "compute-hub-and-ri-savings",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB and RI Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "8a60cf0e-7ed6-4072-8d83-9c136c39f479"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Initialize script"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"from enum import Enum\r\n",
					"from datetime import datetime, timedelta"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"PROD_OFFER_ID = 'MS-AZR-0017P'"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class HUBType(Enum):\r\n",
					"    SQL = \"SQL\"\r\n",
					"    VM = \"VM\"\r\n",
					"\r\n",
					"class HUBCategory(Enum):\r\n",
					"    RI_HUB = \"RI enabled - HUB enabled\"\r\n",
					"    RI_nHUB = \"RI enabled - HUB disabled\"\r\n",
					"    nRI_HUB = \"RI disabled - HUB enabled\"\r\n",
					"    nRI_nHUB = \"RI disabled - HUB disabled\"\r\n",
					"    Unknown = \"Unknown\"\r\n",
					"\r\n",
					"class DBTypes(Enum):\r\n",
					"    DB = \"SQL DB\"\r\n",
					"    MI = \"SQL MI\"\r\n",
					"    VM = \"SQL VM\"\r\n",
					"    Unknown = \"Unknown\"\r\n",
					"\r\n",
					"class LicenseTypes(Enum):\r\n",
					"    Standard = \"Standard License\"\r\n",
					"    Enterprise = \"Enterprise License\"\r\n",
					"    Unknown = \"Unknown\"\r\n",
					"\r\n",
					"class RITypes(Enum):\r\n",
					"    VM = \"VM\"\r\n",
					"    SQL = \"SQL\"\r\n",
					"\r\n",
					"class ReservationType(Enum):\r\n",
					"    S037 = \"S037\"\r\n",
					"    SAP = \"SAP\"\r\n",
					"    Other = \"Other\""
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load cost data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"date_two_year_ago = datetime.now().date()-timedelta(days=710)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/*/Extended_v3_ACMMonthlyActualCost_*.parquet'\r\n",
					"cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyAmortizedCost/*/Extended_v3_ACMMonthlyAmortizedCost_*.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)\r\n",
					"cost_df = cost_df.where(F.col('Date') >= date_two_year_ago)"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.select(\r\n",
					"    'Date', \r\n",
					"    'MeterCategory', \r\n",
					"    'MeterSubCategory', \r\n",
					"    'ResourceName',\r\n",
					"    'ProductName',\r\n",
					"    'CostInBillingCurrency',\r\n",
					"    'Quantity',\r\n",
					"    'UnitOfMeasure', \r\n",
					"    'ResourceId', \r\n",
					"    'ServiceInfo2', \r\n",
					"    'WindowsAHB',\r\n",
					"    'SQLAHB', \r\n",
					"    'benefitName', \r\n",
					"    'WindowsAHB_VCPUS',\r\n",
					"    'SQLAHB_VCPUS',  \r\n",
					"    'ai_DatabaseName',\r\n",
					"    'ai_AHB', \r\n",
					"    'ai_VCPUs',\r\n",
					"    'UnitPrice',\r\n",
					"    'EffectivePrice',\r\n",
					"    'benefitName',\r\n",
					"    'ChargeType'\r\n",
					")\r\n",
					"\r\n",
					"cost_df = cost_df \\\r\n",
					"    .withColumn('Date', F.date_trunc('month', 'Date')) \\\r\n",
					"    .withColumnRenamed('ai_VCPUs', 'VCPUs')"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"is_ri_cost = F.col('benefitName').isNotNull()\r\n",
					"\r\n",
					"cost_df = cost_df.withColumn('IsRICost', F.when(is_ri_cost, True).otherwise(False))\r\n",
					"\r\n",
					"cost_df = cost_df.withColumn('Reservation', \r\n",
					"    F.when(is_ri_cost & F.upper(F.col('benefitName')).like('%S037%'), ReservationType.S037.value)\r\n",
					"    .when(is_ri_cost & F.upper(F.col('benefitName')).like('%S138%'), ReservationType.SAP.value)\r\n",
					"    .when(is_ri_cost, ReservationType.Other.value)\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"cost_df = cost_df.withColumn('RIType', \r\n",
					"    F.when(is_ri_cost & F.col('MeterCategory').like('%Virtual Machines%'), RITypes.VM.value)\r\n",
					"    .when(is_ri_cost & F.col('MeterCategory').like('%SQL%'), RITypes.SQL.value)\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"cost_df = cost_df.withColumn('IsReservationUnused', \r\n",
					"    F.when(is_ri_cost & (F.col('ChargeType') == 'UnusedReservation'), True)\r\n",
					"    .when(is_ri_cost, False)\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"\r\n",
					"cost_df = cost_df.withColumn('RICostSavings', F.when(is_ri_cost, (F.col('UnitPrice') - F.col('EffectivePrice')) * F.col('Quantity')).otherwise(0))\r\n",
					"cost_df = cost_df.withColumn('RIEffectiveCost', F.when(is_ri_cost, F.col('EffectivePrice') * F.col('Quantity')).otherwise(0))"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"is_vm_cost = (F.col('ResourceId').like('%/virtualMachines/%') | F.col('ResourceId').like('%/virtualMachineScaleSets/%')) \\\r\n",
					"    & (F.col('MeterSubCategory').contains('Windows') | (F.col('ServiceInfo2') == 'Windows Server BYOL')) \\\r\n",
					"    & ~F.col('ResourceName').like('CVD-%')\r\n",
					"\r\n",
					"is_sql_cost = (F.col('ResourceId').like('%Microsoft.Sql/servers%') & F.col('MeterCategory').like('SQL%')) \\\r\n",
					"    | (F.col('ResourceId').like('%Microsoft.Sql/managedInstances%') & F.col('MeterCategory').like('SQL%')) \\\r\n",
					"    | ((F.col('MeterCategory') == 'Virtual Machines Licenses') & F.col('MeterSubCategory').like('SQL Server%'))"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.withColumn('HUBType',\r\n",
					"    F.when(is_vm_cost, F.lit(HUBType.VM.value))\r\n",
					"    .when(is_sql_cost, F.lit(HUBType.SQL.value))\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"\r\n",
					"cost_df = cost_df.withColumn('DBType',\r\n",
					"    F.when(is_vm_cost, F.lit(None))\r\n",
					"    .when(is_sql_cost & F.col('ResourceId').like('%Microsoft.Sql/servers%'), DBTypes.DB.value)\r\n",
					"    .when(is_sql_cost & F.col('ResourceId').like('%Microsoft.Sql/managedInstances%'), DBTypes.MI.value)\r\n",
					"    .when(is_sql_cost & F.col('ResourceId').like('%Microsoft.Compute/virtualMachines%'), DBTypes.VM.value)\r\n",
					"    .otherwise(F.lit(None))\r\n",
					")\r\n",
					"\r\n",
					"cost_df = cost_df.withColumn('LicenseType',\r\n",
					"    F.when(is_sql_cost & (F.col('ProductName').like('%Standard%') | F.col('ProductName').like('%General%')), LicenseTypes.Standard.value)\r\n",
					"    .when(is_sql_cost & (F.col('ProductName').like('%Enterprise%') | F.col('ProductName').like('%Critical%')), LicenseTypes.Enterprise.value)\r\n",
					"    .when(is_sql_cost, LicenseTypes.Unknown.value)\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"\r\n",
					"cost_df = cost_df.withColumn('PricesheetJoinKey', \r\n",
					"    F.when(is_vm_cost,\r\n",
					"        F.concat(\r\n",
					"            F.lit('Windows Server'),\r\n",
					"            F.when(F.col('MeterSubCategory') == 'Windows Server Burst', ' Burst - ').otherwise(' - '), \r\n",
					"            F.col('VCPUs'), \r\n",
					"            F.lit(' vCPU VM License')\r\n",
					"        )\r\n",
					"    )\r\n",
					"    .when(is_sql_cost & (F.col('DBType') == DBTypes.MI.value) & (F.col('LicenseType') == LicenseTypes.Standard.value), 'SQL Managed Instance General Purpose - SQL License - vCore')\r\n",
					"    .when(is_sql_cost & (F.col('DBType') == DBTypes.MI.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value), 'SQL Managed Instance Business Critical - SQL License - vCore')\r\n",
					"    .when(is_sql_cost & (F.col('DBType') == DBTypes.DB.value) & (F.col('LicenseType') == LicenseTypes.Standard.value), 'SQL Database Single/Elastic Pool General Purpose - SQL License - vCore')\r\n",
					"    .when(is_sql_cost & (F.col('DBType') == DBTypes.DB.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value), 'SQL Database Single/Elastic Pool Business Critical - SQL License - vCore')\r\n",
					"    .when(is_sql_cost & (F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Standard.value) & (F.col('VCPUs') < 5), 'SQL Server Standard - 1-4 vCPU VM License')\r\n",
					"    .when(is_sql_cost & (F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value) & (F.col('VCPUs') < 5), 'SQL Server Enterprise - 1-4 vCPU VM License')\r\n",
					"    .when(is_sql_cost & (F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Standard.value) & (F.col('VCPUs') >= 5), F.concat(F.lit('SQL Server Standard - '), F.col('VCPUs'), F.lit(' vCPU VM License')))\r\n",
					"    .when(is_sql_cost & (F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value) & (F.col('VCPUs') >= 5), F.concat(F.lit('SQL Server Enterprise - '), F.col('VCPUs'), F.lit(' vCPU VM License')))\r\n",
					"    .otherwise(None)\r\n",
					")"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"is_valid_vm_cost = is_vm_cost & (F.col('VCPUs') != 0)\r\n",
					"is_valid_sql_cost = is_sql_cost & ~F.col('UnitOfMeasure').like('%GB%') & ~F.col('UnitOfMeasure').like('%/Day%') & (F.col('MeterSubCategory') != 'SQL Server Express Edition')\r\n",
					"\r\n",
					"cost_df = cost_df.where(is_ri_cost | is_valid_vm_cost | is_valid_sql_cost)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df \\\r\n",
					"    .select(\r\n",
					"        'Date', \r\n",
					"        'ResourceName', \r\n",
					"        'CostInBillingCurrency', \r\n",
					"        'Quantity', \r\n",
					"        'WindowsAHB', \r\n",
					"        'SQLAHB', \r\n",
					"        'WindowsAHB_VCPUS', \r\n",
					"        'SQLAHB_VCPUS', \r\n",
					"        'VCPUs', \r\n",
					"        'IsRICost', \r\n",
					"        'Reservation', \r\n",
					"        'RIType', \r\n",
					"        'IsReservationUnused', \r\n",
					"        'RICostSavings', \r\n",
					"        'RIEffectiveCost', \r\n",
					"        'HUBType',\r\n",
					"        'DBType', \r\n",
					"        'PricesheetJoinKey'\r\n",
					"    ) \\\r\n",
					"    .groupBy('Date', 'ResourceName', 'WindowsAHB', 'SQLAHB', 'VCPUs', 'WindowsAHB_VCPUS', 'SQLAHB_VCPUS', 'IsRICost', 'Reservation', 'RIType', 'IsReservationUnused', 'HUBType', 'DBType', 'PricesheetJoinKey') \\\r\n",
					"    .agg(F.sum('Quantity').alias('Quantity'), F.sum('CostInBillingCurrency').alias('ResourceCost'), F.sum('RICostSavings').alias('RICostSavings'), F.sum('RIEffectiveCost').alias('RIEffectiveCost'))\\\r\n",
					"    .orderBy('Date')"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create dummy date column for pricesheet join operation\r\n",
					"cost_df = cost_df.withColumn(\"TempDate\", F.date_format(\"Date\", \"yyyyMM\"))"
				],
				"execution_count": 61
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Fetch old pricesheet"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"old_pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/v2_schema/pricesheet-2022*.parquet'\r\n",
					"old_pricesheet_df = spark.read.format('parquet').load(old_pricesheet_path)\r\n",
					"old_pricesheet_df = old_pricesheet_df.where(F.col('offerId') == PROD_OFFER_ID)\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumnRenamed('meterName', 'ProductMapping')\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumnRenamed('unitOfMeasure', 'UnitOfMeasure')\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumnRenamed('unitPrice', 'UnitPrice')\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumnRenamed('billingPeriodId', 'BillingPeriodId')\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumn('UnitQuantity', F.split('UnitOfMeasure', ' ')[0])\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumn('PricePerUnit', F.col('UnitPrice') / F.col('UnitQuantity'))\r\n",
					"old_pricesheet_df = old_pricesheet_df.select('ProductMapping', 'UnitOfMeasure', 'UnitQuantity', 'UnitPrice', 'PricePerUnit', 'BillingPeriodId')"
				],
				"execution_count": 62
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" ##### Fetch new pricesheet"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/portal-export/FinOps-Pricesheet-Monthly/*/*/*.csv'\r\n",
					"new_pricesheet_df = spark.read.csv(new_pricesheet_path, header=True, inferSchema=True)\r\n",
					"new_pricesheet_df = new_pricesheet_df.where(F.col('OfferId') == PROD_OFFER_ID)\r\n",
					"new_pricesheet_df = new_pricesheet_df.withColumn('FormattedDate', F.to_date(new_pricesheet_df.EffectiveStartDate, 'MM/dd/yyy HH:mm:ss'))\r\n",
					"new_pricesheet_df = new_pricesheet_df.withColumn('BillingPeriodId', F.date_format('FormattedDate', \"yyyyMM\"))\r\n",
					"new_pricesheet_df = new_pricesheet_df.withColumn('UnitQuantity', F.split('UnitOfMeasure', ' ')[0])\r\n",
					"new_pricesheet_df = new_pricesheet_df.withColumn('PricePerUnit', F.col('UnitPrice') / F.col('UnitQuantity'))\r\n",
					"new_pricesheet_df = new_pricesheet_df.withColumnRenamed('Product', 'ProductMapping')\r\n",
					"new_pricesheet_df = new_pricesheet_df.select('ProductMapping', 'UnitOfMeasure', 'UnitQuantity', 'UnitPrice', 'PricePerUnit', 'BillingPeriodId')"
				],
				"execution_count": 63
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Combine pricesheets"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pricesheet_df = new_pricesheet_df.union(old_pricesheet_df)"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.join(pricesheet_df, (pricesheet_df.ProductMapping == cost_df.PricesheetJoinKey) & (pricesheet_df.BillingPeriodId == cost_df.TempDate), \"left\")\r\n",
					"cost_df = cost_df.drop('PricesheetJoinKey', 'TempDate')\r\n",
					"\r\n",
					"cost_df = cost_df.withColumn('PAYGLicenseCost', F.col('Quantity') * F.col('PricePerUnit'))"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.withColumn('CostWithHub', \r\n",
					"    F.when((F.col('WindowsAHB') == 'Enabled') | (F.col('SQLAHB') == 'Enabled'), F.col('ResourceCost'))\r\n",
					"    .when((F.col('WindowsAHB') == 'Not Enabled') | (F.col('SQLAHB') == 'Not Enabled'), F.col('ResourceCost') - F.col('PAYGLicenseCost'))\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"\r\n",
					"cost_df = cost_df.withColumn('UnlockedSavings', F.when((F.col('WindowsAHB') == 'Enabled') | (F.col('SQLAHB') == 'Enabled'), F.col('PAYGLicenseCost')).otherwise(0))\r\n",
					"cost_df = cost_df.withColumn('PotentialSavings', F.when((F.col('WindowsAHB') == 'Not Enabled') | (F.col('SQLAHB') == 'Not Enabled'), F.col('ResourceCost') - F.col('CostWithHub')).otherwise(0))"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.drop('UnitOfMeasure', 'UnitQuantity', 'UnitPrice', 'PricePerUnit', 'ProductMapping', 'BillingPeriodId')"
				],
				"execution_count": 67
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Store result in optimized container"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"target_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/hub/hub-and-ri-savings-past-two-years.parquet\"\r\n",
					"cost_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(target_path)"
				],
				"execution_count": 68
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Finding SQL Server related cost\r\n",
					"\r\n",
					"SQL cost are grouped into three categories:\r\n",
					"\r\n",
					"1. SQL Virtual Machine - Cost with _MeterCategory_ like **Virtual Machines Licenses** and _MeterSubCategory_ like **SQL Server%** (besides SQL Server Express)\r\n",
					"2. SQL Managed Instance - Cost with _ResourceId_ like **Microsoft.Sql/managedInstances**\r\n",
					"3. SQL Database - Cost with _ResourceId_ like **Microsoft.Sql/servers**\r\n",
					"\r\n",
					"\r\n",
					"### SQL Database\r\n",
					"\r\n",
					"This category will include _MeterCategories_ like SQL Managed Instance, Microsoft Defender for Cloud, SQL Database and Azure Synapse Analytics.\r\n",
					"\r\n",
					"Should exclude _Microsoft Defender for Cloud_ and _Azure Synapse Analytics_ as these meter categories is not applicable for HUB\r\n",
					"\r\n",
					"### SQL Managed Instance\r\n",
					"\r\n",
					"This category will include _MeterCategories_ like SQL Managed Instance and Microsoft Defender for Cloud.\r\n",
					"\r\n",
					"Should exclude _Microsoft Defender for Cloud_ as this meter category is not applicable for HUB\r\n",
					"\r\n",
					"\r\n",
					"## SQL Cost with VCPU\r\n",
					"\r\n",
					"There is a lot of cost associated with SQL that has VCPUs set to 0. \r\n",
					"If the unit of measure for these cost items is inspected, it varies between _x hours_, _x / day_ and _x GB/month_\r\n",
					"We would only be interested in cost with unit of measure equal to _x hours_ (corresponds to SQL serverless pools), whereas the other corresponds to memory/DTU cost. "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## VM Related Cost\r\n",
					"\r\n",
					"#### Comparing the two following queries\r\n",
					"\r\n",
					"1. _ResourceId_ includes **/virtualMachines/** or **/virtualMachineScaleSets/** (dataset1)\r\n",
					"2. _MeterCategory_ is **Virtual Machines** or **Virtual Machines Licenses** (dataset2)\r\n",
					"\r\n",
					"Note: both queries also checks that _MeterSubCategory_ includes **Windows** or _ServiceInfo2_ is **Windows Server BYOL** to only account for Windows VMs\r\n",
					"\r\n",
					"Based on the queries above, the resulting counts for november 2023 where:\r\n",
					"\r\n",
					"1. 135,453 cost items\r\n",
					"2. 136,203 cost items\r\n",
					"\r\n",
					"There is a small difference between these two subsets.\r\n",
					"\r\n",
					"Analysis of certain dataset columns yielded the following results:\r\n",
					"\r\n",
					"**MeterSubCategory** column in dataset2 includes the following values that are not present in dataset1\r\n",
					"- Av2 Series Windows\r\n",
					"- Ev3/ESv3 Series Windows\r\n",
					"\r\n",
					"**ProductName** column in dataset2 includes the following values that are not present in dataset1\r\n",
					"- Virtual Machines Ev3/ESv3 Series Windows - E4 v3/E4s v3 - EU North\r\n",
					"- Virtual Machines Av2 Series Windows - A1 v2 - NO East\r\n",
					"- Virtual Machines F/FS Series Windows - F8/F8s - EU North\r\n",
					"\r\n",
					"**MeterName** column in dataset2 includes the following values that are not present in dataset1\r\n",
					"- A1 v2\r\n",
					"\r\n",
					"**ai_ServiceType** column in dataset2 includes the following values that are not present in dataset1\r\n",
					"- Standard_A1_v2\r\n",
					"- Standard_F8\r\n",
					"- Standard_E4_v3\r\n",
					"\r\n",
					"After further inspection of the above dataset differences, all related costs to the odd values for columns in dataset2, they have the following facts in common:\r\n",
					"\r\n",
					"- Very small subset of cost\r\n",
					"- All are PAYG cost (no HUB enabled)\r\n",
					"- The resource id of all these costs have the form: /subscriptions/df89af9f-9074-40b4-a620-1d35c0eea0a4/resourceGroups/rg-observability-dev/providers/Microsoft.Batch/batchAccounts/baobservabilitydev/pools/poolobservabilitydev\r\n",
					"- All costs are associated with Microsoft.Batch consumed service type\r\n",
					"\r\n",
					"This is why it is not covered by the dataset that requires virtualMachines or virtualMachineScaleSets to be part of the resource identifier\r\n",
					"\r\n",
					"\r\n",
					""
				]
			}
		]
	}
}