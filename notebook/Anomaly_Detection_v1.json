{
	"name": "Anomaly_Detection_v1",
	"properties": {
		"folder": {
			"name": "NotebookInProduction"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "628a2c05-f5ba-42e4-9efe-6ee591cc442c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.types as T\r\n",
					"from pyspark.sql.window import Window"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def preprocessing_anomaly_detection(df):\r\n",
					"\r\n",
					"    # Selecting just relevant columns for anomaly detection\r\n",
					"    new_df = df.select('SubscriptionName', 'ResourceGroup', 'MeterCategory', 'ActiveWBS', 'Date', 'CostInBillingCurrency')\r\n",
					"\r\n",
					"    # Filtering out data older than 90 days to get only the latest historical data\r\n",
					"    threshold = F.date_sub(F.current_date(), 90)\r\n",
					"    filtered_df = new_df.filter(F.col('Date') >= threshold)\r\n",
					"\r\n",
					"    # Grouping the data by each filtering level and getting the sum of all costs related to the filtering columns\r\n",
					"    grouped_df = filtered_df.groupBy('SubscriptionName',\r\n",
					"                                     'ResourceGroup',\r\n",
					"                                     'MeterCategory',\r\n",
					"                                     'ActiveWBS',\r\n",
					"                                     'Date').agg(F.round(\r\n",
					"                                                  F.sum(\r\n",
					"                                                   F.col('CostInBillingCurrency')), 1).alias('TotalCost'))\r\n",
					"\r\n",
					"    return grouped_df"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def anomaly_detection_classifier(df,\r\n",
					"                                 filter_column_1,\r\n",
					"                                 filter_column_2,\r\n",
					"                                 filter_column_3,\r\n",
					"                                 filter_column_4,\r\n",
					"                                 window_size=30):\r\n",
					"\r\n",
					"    # Setting a partition window to divide the dataset in the filter options and order it by the Date\r\n",
					"    windowSpec = Window.partitionBy(filter_column_1, filter_column_2, filter_column_3, filter_column_4).orderBy('Date').rowsBetween(-window_size, 0)\r\n",
					"\r\n",
					"    # Set a moving average that is set by the n previous days\r\n",
					"    costs_by_dates = df.withColumn('MovingAverage', F.round(F.avg(F.col('TotalCost')).over(windowSpec), 1))\r\n",
					"\r\n",
					"    # Set a moving standard deviation of the same period\r\n",
					"    costs_by_dates = costs_by_dates.withColumn('MovingStdDev', F.round(F.stddev(F.col('TotalCost')).over(windowSpec), 1))\r\n",
					"\r\n",
					"    # Setting a scaling mechanism on the threshold in order to reduce the threshold when the costs are very high\r\n",
					"    am_curve = lambda x: 13.6 * x ** -0.22\r\n",
					"    \r\n",
					"    # Set a minimum scale of 0.1 and a maximum scale of 3.5 \r\n",
					"    costs_by_dates = costs_by_dates.withColumn('Scaler', F.when(F.col('MovingStdDev') > 0.1, am_curve(F.col('MovingStdDev'))).otherwise(F.lit(0.1)))\r\n",
					"    costs_by_dates = costs_by_dates.withColumn('Scaler', F.when(F.col('Scaler') > 3.5, F.lit(3.5)).otherwise(F.col('Scaler')))\r\n",
					"\r\n",
					"    costs_by_dates = costs_by_dates.withColumn('Threshold', F.col('MovingAverage') + (F.col('MovingStdDev') * F.col('Scaler')))\r\n",
					"\r\n",
					"     # If the cost is more than the stddev threshold (+ some noise cancellation), then set the datapoint to be 1, otherwise 0\r\n",
					"    costs_by_dates = costs_by_dates.withColumn('AboveThreshold', F.when(F.col('TotalCost') > (F.col('Threshold') + 1), F.lit(1))\\\r\n",
					"                                                                                 .otherwise(F.lit(0)))\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    window_spec = Window.partitionBy(filter_column_1, filter_column_2, filter_column_3, filter_column_4).orderBy('Date')\r\n",
					"\r\n",
					"    thres_df = costs_by_dates.withColumn('AboveThresYstrdy', F.lag(F.col('AboveThreshold'), 1).over(window_spec))\r\n",
					"    thres_df = thres_df.withColumn('AboveThresFor2Days', F.lag(F.col('AboveThreshold'), 2).over(window_spec))\r\n",
					"\r\n",
					"    thres_mask = (F.col('AboveThreshold') == 1) & (F.col('AboveThresYstrdy') == 1) & (F.col('AboveThresFor2Days') == 1)\r\n",
					"    cost_mask = F.col('TotalCost') >= 10000\r\n",
					"    date_mask = F.col('Date') == F.current_date()\r\n",
					"\r\n",
					"    # For Testing\r\n",
					"    thres_df = thres_df.withColumn('NotifyAnomaly', F.when(thres_mask & cost_mask, F.lit(True)).otherwise(F.lit(False)))\r\n",
					"\r\n",
					"    # # For Production\r\n",
					"    # thres_df = thres_df.withColumn('NotifyAnomaly', F.when(thres_mask & date_mask & cost_mask, F.lit(True)).otherwise(F.lit(False)))\r\n",
					"\r\n",
					"    dropped_df = thres_df.drop('Scaler', 'AboveThreshold', 'AboveThresYstrdy', 'AboveThresFor2Days')\r\n",
					"\r\n",
					"    filtered_df = dropped_df.filter(F.col('NotifyAnomaly') == True)\r\n",
					"\r\n",
					"    return filtered_df"
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"def merge_with_subscription(input_df, subscription_path):\r\n",
					"\r\n",
					"    sub_df = spark.read.json(subscription_path).select('name', 'WBSOwner', 'productOwner')\r\n",
					"\r\n",
					"    merged_df = input_df.join(sub_df, on=input_df.SubscriptionName == sub_df.name, how='left')\r\n",
					"    \r\n",
					"    return merged_df"
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"source_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/aggregate/parquet/Extended_ACMMonthlyAmortizedCost_overview_OneYear.parquet\"\r\n",
					"destination_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/aggregate/parquet/Extended_ACMMonthlyAmortizedCost_AnomalyDetection_3mnth.parquet\"\r\n",
					"subscription_path = 'abfss://usage@s037costmgmt.dfs.core.windows.net/subscriptions/subscriptions_2023-08-31.json'\r\n",
					"\r\n",
					"print(f\"Reading data from: {source_path}\")\r\n",
					"df = spark.read.format('parquet').load(source_path)\r\n",
					"\r\n",
					"preproc_data = preprocessing_anomaly_detection(df)\r\n",
					"\r\n",
					"print(\"Running the Anomaly Detection Classifier for Subscription-partitioned data\")\r\n",
					"filtered_df =  anomaly_detection_classifier(df=preproc_data,\r\n",
					"                                            filter_column_1='SubscriptionName',\r\n",
					"                                            filter_column_2='ResourceGroup',\r\n",
					"                                            filter_column_3='MeterCategory',\r\n",
					"                                            filter_column_4='ActiveWBS',\r\n",
					"                                            window_size=60)\r\n",
					"\r\n",
					"\r\n",
					"merged_df = merge_with_subscription(filtered_df, \r\n",
					"                                    subscription_path)\r\n",
					"\r\n",
					"\r\n",
					"# print(f\"Writing classification data to this path: {destination_path}\")\r\n",
					"# merged_df.write.format('parquet').mode('overwrite').save(destination_path)\r\n",
					"# print('Write Complete!')"
				],
				"execution_count": 90
			}
		]
	}
}