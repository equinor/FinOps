{
	"name": "Anomaly_Detection_v1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b59b0ec4-99be-4386-a175-5b65c03e9a1f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.types as T\r\n",
					"from pyspark.sql.window import Window"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def preprocessing_anomaly_detection(df):\r\n",
					"\r\n",
					"    # Selecting just relevant columns for anomaly detection\r\n",
					"    new_df = df.select('ActiveWBS', 'SubscriptionName', 'MeterCategory', 'Date', 'CostInBillingCurrency')\r\n",
					"\r\n",
					"    # Filtering out data older than 180 days to get only the latest historical data\r\n",
					"    threshold = F.date_sub(F.current_date(), 200)\r\n",
					"    filtered_df = new_df.filter(F.col('Date') >= threshold)\r\n",
					"\r\n",
					"    # Grouping the data by each filtering level and getting the sum of all costs related to the filtering columns\r\n",
					"    grouped_df = filtered_df.groupBy('ActiveWBS', 'SubscriptionName', 'MeterCategory', 'Date').agg(F.sum(F.col('CostInBillingCurrency')).alias('TotalCost'))\r\n",
					"\r\n",
					"    return grouped_df"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def anomaly_detection_classifier(df,\r\n",
					"                                 filter_column_1, \r\n",
					"                                 filter_column_2, \r\n",
					"                                 cost_column,\r\n",
					"                                 filter_tag,\r\n",
					"                                 window_size=30):\r\n",
					"\r\n",
					"    \r\n",
					"    # # Selecting the filter-categories (Subscription and Meter Category), the time-stamp and the cost data\r\n",
					"    # costs_by_dates = df.select(filter_column_1, filter_column_2, 'Date', cost_column)\r\n",
					"\r\n",
					"    # Setting a partition window to divide the dataset in the filter options and order it by the Date\r\n",
					"    windowSpec = Window.partitionBy(filter_column_1, filter_column_2).orderBy('Date').rowsBetween(-window_size, 0)\r\n",
					"\r\n",
					"    # Define column-names\r\n",
					"    ma_col_name = f'MovingAverage_{filter_tag}'\r\n",
					"    std_col_name = f'MovingStdDev_{filter_tag}'\r\n",
					"\r\n",
					"    # Set a moving average that is set by the n previous days\r\n",
					"    costs_by_dates = df.withColumn(ma_col_name, F.avg(F.col(cost_column)).over(windowSpec))\r\n",
					"\r\n",
					"    # Set a moving standard deviation of the same period\r\n",
					"    costs_by_dates = costs_by_dates.withColumn(std_col_name, F.stddev(F.col(cost_column)).over(windowSpec))\r\n",
					"\r\n",
					"    # Define column-names\r\n",
					"    std3 = f'3StdDev_{filter_tag}'\r\n",
					"    std4 = f'4StdDev_{filter_tag}'\r\n",
					"\r\n",
					"    # Set upper thresholds with a standard deviation multiplied by 'n' higher than the moving average\r\n",
					"    costs_by_dates = costs_by_dates.withColumn(std3, F.col(ma_col_name) + (F.col(std_col_name) * 3))\r\n",
					"    costs_by_dates = costs_by_dates.withColumn(std4, F.col(ma_col_name) + (F.col(std_col_name) * 4))\r\n",
					"\r\n",
					"\r\n",
					"    # If the cost is more than the threshold set, then set the datapoint to be 1, otherwise 0\r\n",
					"    costs_by_dates = costs_by_dates.withColumn(f'Above_3std_{filter_tag}', F.when(F.col(cost_column) > F.col(std3), F.lit(1))\\\r\n",
					"                                                                            .otherwise(F.lit(0)))\r\n",
					"\r\n",
					"    # If the cost is more than the threshold set, then set the datapoint to be 1, otherwise 0\r\n",
					"    costs_by_dates = costs_by_dates.withColumn(f'Above_4std_{filter_tag}', F.when(F.col(cost_column) > F.col(std4), F.lit(1))\\\r\n",
					"                                                                            .otherwise(F.lit(0)))\r\n",
					"\r\n",
					"    return costs_by_dates"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/aggregate/parquet/Extended_ACMMonthlyAmortizedCost_overview_OneYear.parquet\"\r\n",
					"\r\n",
					"print(f\"Reading data from: {source_path}\")\r\n",
					"df = spark.read.format('parquet').load(source_path)\r\n",
					"\r\n",
					"preproc_data = preprocessing_anomaly_detection(df)\r\n",
					"\r\n",
					"print(\"Running the Anomaly Detection Classifier for Subscription-partitioned data\")\r\n",
					"costs_by_dates =  anomaly_detection_classifier(df=preproc_data,\r\n",
					"                                               filter_column_1='SubscriptionName',\r\n",
					"                                               filter_column_2='MeterCategory',\r\n",
					"                                               cost_column='TotalCost',\r\n",
					"                                               filter_tag='Subscription',\r\n",
					"                                               window_size=30)\r\n",
					"\r\n",
					"print(\"Running the Anomaly Detection Classifier for WBS-partitioned data\")\r\n",
					"costs_by_dates =  anomaly_detection_classifier(df=costs_by_dates,\r\n",
					"                                               filter_column_1='ActiveWBS',\r\n",
					"                                               filter_column_2='MeterCategory',\r\n",
					"                                               cost_column='TotalCost',\r\n",
					"                                               filter_tag='WBS',\r\n",
					"                                               window_size=30)\r\n",
					"\r\n",
					"\r\n",
					"destination_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/aggregate/parquet/Extended_ACMMonthlyAmortizedCost_AnomalyDetection_6mths.parquet\"\r\n",
					"\r\n",
					"# print(f\"Writing classification data to this path: {destination_path}\")\r\n",
					"# costs_by_dates.write.format('parquet').mode('overwrite').save(destination_path)\r\n",
					"# print('Write Complete!')"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(costs_by_dates.filter(F.col('SubscriptionName') == 'S383-Observability'))"
				],
				"execution_count": 28
			}
		]
	}
}