{
	"name": "compute-cumulative-cost",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/Cost Prediction"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "4752a462-ba79-45d6-8b32-e1c4806eeed5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.window as W\r\n",
					"import statsmodels.api as sm\r\n",
					"import pandas as pd\r\n",
					"import numpy as np"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define rolling window for accumulation\r\n",
					"window = W.Window.orderBy(\"Date\").rowsBetween(W.Window.unboundedPreceding, 0)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Prepare Usage data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # Load usage source\r\n",
					"# cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/*/Extended_v3_ACMMonthlyActualCost_*.parquet'\r\n",
					"# cost_df = spark.read.format('parquet').load(cost_path)\r\n",
					"\r\n",
					"# # Select appropriate columns\r\n",
					"# cost_df = cost_df.select('Date', 'CostInBillingCurrency')\r\n",
					"# cost_df = cost_df.withColumn('Date', F.date_trunc('month', 'Date'))\r\n",
					"# cost_df = cost_df.groupBy('Date').agg(F.sum('CostInBillingCurrency').alias('Cost')).orderBy('Date')\r\n",
					"\r\n",
					"# # Filter away latest month - as we predict cost per month, it will mess up future predictions\r\n",
					"# cost_df = cost_df.filter(F.col('Date') < F.concat(F.date_format(F.current_date(), 'yyyy'), F.lit('-'), F.date_format(F.current_date(), 'MM'), F.lit('-'), F.lit('01')))\r\n",
					"\r\n",
					"# # Compute cumulative cost\r\n",
					"# cost_df = cost_df.withColumn(\"CumulativeCost\", F.sum(\"Cost\").over(window))\r\n",
					"\r\n",
					"# # Convert pyspark df to pandas for OLS model\r\n",
					"# cost_pdf = cost_df.toPandas()\r\n",
					"# cost_pdf.set_index(\"Date\", inplace=True)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Prepare Billing data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Load billing source\r\n",
					"billing_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/billing/BillingPeriods.parquet'\r\n",
					"billing_df = spark.read.format('parquet').load(billing_path)\r\n",
					"\r\n",
					"# Compute invoiced amount\r\n",
					"billing_df = billing_df \\\r\n",
					"    .withColumn('Cost', F.col('TotalUsage') - F.col('Adjustments') + F.col('AzureMarketplaceServiceCharges')) \\\r\n",
					"    .withColumn('Date', F.to_date(F.col('BillingPeriod'), 'yyyyMM'))\\\r\n",
					"    .select('Cost', 'Date') \\\r\n",
					"    .where(F.col('Date') < '2024-01-01') \\\r\n",
					"    .orderBy('Date')\r\n",
					"\r\n",
					"# Compute cumulative cost\r\n",
					"billing_df = billing_df.withColumn(\"CumulativeCost\", F.sum(\"Cost\").over(window))\r\n",
					"\r\n",
					"# Convert pyspark df to pandas for OLS model\r\n",
					"billing_pdf = billing_df.toPandas()\r\n",
					"billing_pdf.set_index(\"Date\", inplace=True)"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def compute_ols_prediction(input_df, lookback, prediction_interval):\r\n",
					"    input_df['x'] = range(len(input_df))\r\n",
					"\r\n",
					"    # Estimate OLS model\r\n",
					"    y = input_df['Cost'].values if lookback == -1 else input_df['Cost'].tail(lookback)\r\n",
					"    x = input_df['x'].values if lookback == -1 else input_df['x'].tail(lookback)\r\n",
					"    model = sm.OLS(y, sm.add_constant(x))\r\n",
					"    result = model.fit()\r\n",
					"\r\n",
					"    # Configure prediction period\r\n",
					"    future_months = pd.date_range(start=input_df.index[-1], periods=prediction_interval, freq=\"MS\")\r\n",
					"    # future_months = future_months[1:]\r\n",
					"    future_x = np.arange(input_df['x'][-1] + 1, input_df['x'][-1] + prediction_interval + 1)\r\n",
					"\r\n",
					"    # Predict future cost\r\n",
					"    x = sm.add_constant(future_x)\r\n",
					"    predicted_cost = result.predict(x)\r\n",
					"\r\n",
					"    # Create the predicted cost column label\r\n",
					"    column_label = \"FullLookback\" if lookback == -1 else f'{lookback}MonthLookback'\r\n",
					"\r\n",
					"    predicted_df = pd.DataFrame({\"Date\": future_months, f\"PredictedCost{column_label}\": predicted_cost})\r\n",
					"    predicted_df = spark.createDataFrame(predicted_df)\r\n",
					"    predicted_df = predicted_df.withColumn(f'PredictedCumulativeCost{column_label}',  F.sum(f\"PredictedCost{column_label}\").over(window) + input_df['CumulativeCost'][-1])\r\n",
					"    return predicted_df"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"four_month_lookback_df = compute_ols_prediction(billing_pdf, lookback=6, prediction_interval=72)\r\n",
					"eight_month_lookback_df = compute_ols_prediction(billing_pdf, lookback=12, prediction_interval=72)\r\n",
					"twelve_month_lookback_df = compute_ols_prediction(billing_pdf, lookback=24, prediction_interval=72)\r\n",
					"sixteen_month_lookback_df = compute_ols_prediction(billing_pdf, lookback=-1, prediction_interval=72)\r\n",
					"\r\n",
					"billing_df = billing_df.join(four_month_lookback_df, on='Date', how='outer')\r\n",
					"billing_df = billing_df.join(eight_month_lookback_df, on='Date', how='outer')\r\n",
					"billing_df = billing_df.join(twelve_month_lookback_df, on='Date', how='outer')\r\n",
					"billing_df = billing_df.join(sixteen_month_lookback_df, on='Date', how='outer')\r\n",
					"billing_df = billing_df.withColumn('Date', F.to_date('Date'))"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Estimate monthly cost of Azure Sentinel once deployed\r\n",
					"COST_OFFSET = 1600000\r\n",
					"\r\n",
					"# Get cumulative cost to date\r\n",
					"cumulative_to_date = billing_df.agg(F.max('CumulativeCost')).collect()[0][0]\r\n",
					"\r\n",
					"\r\n",
					"adjusted_df = billing_df.alias('adjusted_df')\r\n",
					"\r\n",
					"# Rename columns\r\n",
					"for col in adjusted_df.columns:\r\n",
					"    if col.startswith(\"Predicted\"):\r\n",
					"        adjusted_df = adjusted_df.withColumnRenamed(col, \"Adjusted_\" + col)\r\n",
					"\r\n",
					"# Iterate over predicted cost columns\r\n",
					"for col in adjusted_df.columns:\r\n",
					"    if col.startswith(\"Adjusted_PredictedCost\"):\r\n",
					"        adjusted_df = adjusted_df.withColumn(col, \r\n",
					"            F.when(F.col(col).isNull(), None)\r\n",
					"            .when(F.col('Date') <= '2024-04-01', F.col(col))\r\n",
					"            .otherwise(F.col(col) + COST_OFFSET)\r\n",
					"        )\r\n",
					"\r\n",
					"# Iterate over predicted cumulative cost columns\r\n",
					"for col in adjusted_df.columns:\r\n",
					"    if col.startswith(\"Adjusted_PredictedCumulative\"):\r\n",
					"        predicted_cost_col = col.replace('Cumulative', '')\r\n",
					"        adjusted_df = adjusted_df.withColumn(col, F.sum(predicted_cost_col).over(window) + cumulative_to_date)\r\n",
					""
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"target_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/cumulative-cost-prediction.parquet\"\r\n",
					"billing_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(target_path)"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"adjusted_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/adjusted-cumulative-cost-prediction.parquet\"\r\n",
					"adjusted_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(adjusted_path)"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### ARIMA Model"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def predict_cost(input_df, p, d, q):\r\n",
					"#     model = sm.tsa.ARIMA(input_df[\"Cost\"], order=(p, d, q)).fit()\r\n",
					"#     future_months = pd.date_range(start=input_df.index[-1], periods=72, freq=\"MS\")\r\n",
					"#     predicted_cost = model.predict(start=input_df.index[-1], end=future_months[-1], typ=\"levels\")\r\n",
					"#     predicted_df = pd.DataFrame({\"Date\": future_months, \"PredictedCost\": predicted_cost})\r\n",
					"#     predicted_df = spark.createDataFrame(predicted_df)\r\n",
					"#     return predicted_df"
				],
				"execution_count": 32
			}
		]
	}
}