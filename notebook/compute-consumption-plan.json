{
	"name": "compute-consumption-plan",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/Cost Prediction"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "7918b17f-28be-4138-b48f-644771738e2c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F\n",
					"import pyspark.sql.types as T\n",
					"from pyspark.sql import Window\n",
					"from enum import Enum"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class UsageOption(Enum):\n",
					"    EQNRateWFX = \"Equinor Rate with Forex Increases\"\n",
					"    EQNRateWOFX = \"Equinor Rate without Forex Increases\"\n",
					"    Retail = \"Retail\"\n",
					"    NotApplicable = \"NotApplicable\"\n",
					"\n",
					"class Lookback(Enum):\n",
					"    SixMonth = \"6 Month Forecast\"\n",
					"    OneYear = \"1 Year Forecast\"\n",
					"    TwoYear = \"2 Year Forecast\"\n",
					"    Full = \"Entire History Forecast\"\n",
					"    NotApplicable = \"NotApplicable\"\n",
					"\n",
					"class SubsurfaceScenario(Enum):\n",
					"    ANFHighCase = \"ANF High Case\"\n",
					"    ANFLowCase = \"ANF Low Case\"\n",
					"    QumuloHighCase = \"Qumulo High Case\"\n",
					"    QumuloLowCase = \"Qumulo Low Case\"\n",
					"    ZeroInorganicCost = \"Zero Inorganic Cost\"\n",
					"    NotApplicable = \"NotApplicable\"\n",
					"\n",
					"class SAPScenario(Enum):\n",
					"    Standard = \"Standard\"\n",
					"    Migration = \"SAP Rise\"\n",
					"    NotApplicable = \"NotApplicable\"\n",
					"\n",
					"class KickoffOption(Enum):\n",
					"    Late = \"2026\"\n",
					"    Early = \"2025\"\n",
					"\n",
					"class ConsumptionType(Enum):\n",
					"    Organic = \"Organic\"\n",
					"    InOrganic = \"Inorganic\"\n",
					"\n",
					"class InorganicPricingOption(Enum):\n",
					"    Retail = \"Retail\"\n",
					"    Discounted = \"Discounted\"\n",
					"    NotApplicable = \"NotApplicable\"\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load prediction data from source"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load Equinor Rate with Forex Increases predictions\n",
					"billing_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/cumulative-cost-prediction.parquet/**\"\n",
					"billing_df = spark.read.format('parquet').load(billing_path)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load Equinor Rate without Forex Increases predictions\n",
					"adjusted_billing_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/adjusted-cumulative-cost-prediction.parquet/**\"\n",
					"adjusted_billing_df = spark.read.format('parquet').load(adjusted_billing_path)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load Retail predictions\n",
					"retail_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/retail-cost-prediction.parquet/**\"\n",
					"retail_df = spark.read.format('parquet').load(retail_path)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load contribution predictions for the in-organic consumption"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"inorganic_consumption_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/manual-uploads/inorganic-growth-consumption-forecast.csv\"\n",
					"csv_options = {'header' : True,\n",
					"                'delimiter' : ';',\n",
					"                'quote' : '\"',\n",
					"                'escape' : '\"'}\n",
					"\n",
					"inorganic_consumption_df = spark.read.options(**csv_options).csv(inorganic_consumption_path)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Cast inorganic consumption columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"inorganic_period_mapper = {\n",
					"    '2025': '25/26',\n",
					"    '2026': '26/27',\n",
					"    '2027': '27/28',\n",
					"    '2028': '28/29',\n",
					"    '2029': '29/30',\n",
					"    '2030': '30/31',\n",
					"}"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"inorganic_consumption_df = inorganic_consumption_df.withColumn('ConsumptionForecast', F.col('ConsumptionForecast').cast(T.DoubleType()))\n",
					"inorganic_consumption_df = inorganic_consumption_df.withColumn('PeriodIndex', F.col('PeriodIndex').cast(T.IntegerType()))\n",
					"inorganic_consumption_df = inorganic_consumption_df.withColumn('ConsumptionType', F.lit(ConsumptionType.InOrganic.value))\n",
					"inorganic_consumption_df = inorganic_consumption_df.replace(to_replace=inorganic_period_mapper, subset=['Period'])\n",
					"inorganic_consumption_df = inorganic_consumption_df.withColumnRenamed('Period', 'PeriodLabel')"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"inorganic_discounted_df = inorganic_consumption_df.alias('inorganic_discounted_df')\n",
					"inorganic_discounted_df = inorganic_discounted_df.withColumn('InorganicPricingOption', F.lit(InorganicPricingOption.Discounted.value))\n",
					"\n",
					"inorganic_retail_df = inorganic_consumption_df.alias('inorganic_retail_df')\n",
					"inorganic_retail_df = inorganic_retail_df.withColumn('ConsumptionForecast', F.col('ConsumptionForecast') / 0.7)\n",
					"inorganic_retail_df = inorganic_retail_df.withColumn('InorganicPricingOption', F.lit(InorganicPricingOption.Retail.value))\n",
					"\n",
					"inorganic_consumption_df = inorganic_discounted_df.union(inorganic_retail_df)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Split prediction/forecast table into flat tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"prediction_columns = [\n",
					"    'PredictedCost6MonthLookback',\n",
					"    'PredictedCost12MonthLookback',\n",
					"    'PredictedCost24MonthLookback',\n",
					"    'PredictedCostFullLookback'\n",
					"]\n",
					"\n",
					"prediction_column_mapping = {\n",
					"    'PredictedCost6MonthLookback': Lookback.SixMonth.value,\n",
					"    'PredictedCost12MonthLookback': Lookback.OneYear.value,\n",
					"    'PredictedCost24MonthLookback': Lookback.TwoYear.value,\n",
					"    'PredictedCostFullLookback': Lookback.Full.value\n",
					"}"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def compute_aggregated_forecasts(df, usage_option):\n",
					"    schema = T.StructType([\n",
					"        T.StructField(\"PeriodLabel\", T.IntegerType(), False),\n",
					"        T.StructField(\"ConsumptionForecast\", T.DoubleType(), False),\n",
					"        T.StructField(\"Lookback\", T.StringType(), True)\n",
					"    ])\n",
					"\n",
					"    total_df = spark.createDataFrame([], schema)\n",
					"\n",
					"    df = df \\\n",
					"        .select('Date', *prediction_columns) \\\n",
					"        .where((F.col('Date') >= '2025-05-01') & (F.col('Date') <= '2031-04-01'))\n",
					"\n",
					"    df = df.withColumn('PeriodLabel',\n",
					"        F.when((F.col('Date') >= '2025-05-01') & (F.col('Date') <= '2026-04-01'), '25/26')\n",
					"        .when((F.col('Date') >= '2026-05-01') & (F.col('Date') <= '2027-04-01'), '26/27')\n",
					"        .when((F.col('Date') >= '2027-05-01') & (F.col('Date') <= '2028-04-01'), '27/28')\n",
					"        .when((F.col('Date') >= '2028-05-01') & (F.col('Date') <= '2029-04-01'), '28/29')\n",
					"        .when((F.col('Date') >= '2029-05-01') & (F.col('Date') <= '2030-04-01'), '29/30')\n",
					"        .when((F.col('Date') >= '2030-05-01') & (F.col('Date') <= '2031-04-01'), '30/31')\n",
					"    )\n",
					"    \n",
					"    for column in prediction_columns:\n",
					"        current_df = df.alias(f'{column}_df')\n",
					"        current_df = current_df.select('PeriodLabel', column)\n",
					"        current_df = current_df.withColumnRenamed(column, 'ConsumptionForecast')\n",
					"        current_df = current_df.groupBy('PeriodLabel').agg(F.sum('ConsumptionForecast').alias('ConsumptionForecast'))\n",
					"        current_df = current_df.withColumn('Lookback', F.lit(prediction_column_mapping[column]))\n",
					"\n",
					"        total_df = total_df.union(current_df)\n",
					"\n",
					"    total_df = total_df.withColumn('UsageOption', F.lit(usage_option))\n",
					"    \n",
					"    return total_df"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"agg_billing_df = compute_aggregated_forecasts(billing_df, usage_option=UsageOption.EQNRateWFX.value)\n",
					"agg_adjusted_billing_df = compute_aggregated_forecasts(adjusted_billing_df, usage_option=UsageOption.EQNRateWOFX.value)\n",
					"agg_retail_df = compute_aggregated_forecasts(retail_df, usage_option=UsageOption.Retail.value)\n",
					"\n",
					"consumption_forecast_df = agg_billing_df.union(agg_adjusted_billing_df).union(agg_retail_df)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"consumption_forecast_df = consumption_forecast_df.withColumn('Project',\n",
					"    F.when(F.col('Lookback') == Lookback.SixMonth.value, F.lit('Organic Growth - Forecast based on last 6 months usage'))\n",
					"    .when(F.col('Lookback') == Lookback.OneYear.value, F.lit('Organic Growth - Forecast based on last 1 years usage'))\n",
					"    .when(F.col('Lookback') == Lookback.TwoYear.value, F.lit('Organic Growth - Forecast based on last 2 years usage'))\n",
					"    .when(F.col('Lookback') == Lookback.Full.value, F.lit('Organic Growth - Forecast based on usage from entire history'))\n",
					")\n",
					"\n",
					"consumption_forecast_df = consumption_forecast_df.withColumn('SubScenario', F.lit(SubsurfaceScenario.NotApplicable.value))\n",
					"consumption_forecast_df = consumption_forecast_df.withColumn('SapScenario', F.lit(SAPScenario.NotApplicable.value))\n",
					"consumption_forecast_df = consumption_forecast_df.withColumn('Key', F.concat(F.col('Project'), F.lit('-'), F.col('UsageOption'), F.lit('-'), F.col('SubScenario'), F.lit('-'), F.col('SapScenario')))"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"window = Window.partitionBy(\"Key\").orderBy(F.asc(\"PeriodLabel\"))\n",
					"\n",
					"early_forecast_df = consumption_forecast_df.alias('early_forecast_df')\n",
					"early_forecast_df = early_forecast_df.where(F.col('PeriodLabel') < '30/31')\n",
					"early_forecast_df = early_forecast_df.withColumn('Kickoff', F.lit(KickoffOption.Early.value))\n",
					"early_forecast_df = early_forecast_df.withColumn('PeriodIndex', F.row_number().over(window))\n",
					"\n",
					"late_forecast_df = consumption_forecast_df.alias('late_forecast_df')\n",
					"late_forecast_df = late_forecast_df.where(F.col('PeriodLabel') > '25/26')\n",
					"late_forecast_df = late_forecast_df.withColumn('Kickoff', F.lit(KickoffOption.Late.value))\n",
					"late_forecast_df = late_forecast_df.withColumn('PeriodIndex', F.row_number().over(window))\n",
					"\n",
					"expanded_forecast_df = early_forecast_df.union(late_forecast_df)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"expanded_forecast_df = expanded_forecast_df.withColumn('ConsumptionType', F.lit(ConsumptionType.Organic.value))\n",
					"expanded_forecast_df = expanded_forecast_df.withColumn('InorganicPricingOption', F.lit(InorganicPricingOption.NotApplicable.value))\n",
					"expanded_forecast_df = expanded_forecast_df.drop('Key')"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Combine organic and in-organic contributions into single dataframe"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"expanded_forecast_df = expanded_forecast_df.union(inorganic_consumption_df)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write to ADLS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"expanded_forecast_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/consumption-forecast\"\n",
					"expanded_forecast_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(expanded_forecast_path)"
				],
				"execution_count": 23
			}
		]
	}
}