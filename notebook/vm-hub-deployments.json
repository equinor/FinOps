{
	"name": "vm-hub-deployments",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB and RI Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "9e7e9f3b-d675-43b4-abb9-d0a67960fb94"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from datetime import timedelta, datetime\r\n",
					"from dateutil.relativedelta import relativedelta\r\n",
					"import calendar\r\n",
					"import json\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from azure.storage.blob import BlobServiceClient\r\n",
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.window as W\r\n",
					"from pyspark.sql import Row"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"HOURS_PER_YEAR = 8760\r\n",
					"VCPUS_PER_LICENSE = 16"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"KEY_VAULT_NAME = 'acm-toolkit-kv'\r\n",
					"LINKED_SERVICE_NAME = 'ACM_Toolkit_kv'\r\n",
					"hubAutomationConnectionString = mssparkutils.credentials.getSecret(KEY_VAULT_NAME , 'hubautomation-sa-connectionstring', LINKED_SERVICE_NAME)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns_to_keep = [\r\n",
					"    'SubscriptionId',\r\n",
					"    'SubscriptionName',\r\n",
					"    'Date',\r\n",
					"    'ResourceGroup', \r\n",
					"    'ResourceName', \r\n",
					"    'ResourceId', \r\n",
					"    'MeterCategory', \r\n",
					"    'MeterSubCategory', \r\n",
					"    'MeterName',\r\n",
					"    'UnitOfMeasure',\r\n",
					"    'Quantity',\r\n",
					"    'UnitPrice',\r\n",
					"    'EffectivePrice',\r\n",
					"    'CostInBillingCurrency', \r\n",
					"    'ServiceInfo2',\r\n",
					"    'PartNumber',\r\n",
					"    'ProductName', \r\n",
					"    'ai_VCPUs',\r\n",
					"    'ai_AHB'\r\n",
					"]\r\n",
					"\r\n",
					"vm_columns = columns_to_keep + [\r\n",
					"    'WindowsAHB',\r\n",
					"    'WindowsAHB_VCPUs',\r\n",
					"    'ai_VMName'\r\n",
					"]"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"blob_service_client = BlobServiceClient.from_connection_string(hubAutomationConnectionString)\r\n",
					"\r\n",
					"# get a reference to the blob container and file\r\n",
					"container_name = 'win-config'\r\n",
					"blob_name = 'config.json'\r\n",
					"container_client = blob_service_client.get_container_client(container_name)\r\n",
					"blob_client = container_client.get_blob_client(blob_name)\r\n",
					"\r\n",
					"# download the blob content as a string\r\n",
					"blob_content = blob_client.download_blob().content_as_text()\r\n",
					"\r\n",
					"# parse the JSON string into a Python dictionary\r\n",
					"vm_config = json.loads(blob_content)\r\n",
					"\r\n",
					"license_count = vm_config['lic_count']\r\n",
					"ts_vms = vm_config['ts_vms']\r\n",
					"timespan = vm_config['timespan']\r\n",
					"yearly_license_cost = vm_config['lic_cost_yearly']\r\n",
					"hourly_vcpu_cost = yearly_license_cost / (license_count * HOURS_PER_YEAR * VCPUS_PER_LICENSE)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"end_date = (datetime.now().strftime('%Y-%m-%d'))"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_path = monthly_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/20240301-20240331/Extended_v3_ACMMonthlyActualCost_20240301-20240331.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_start_date = (datetime.now() - timedelta(days=timespan)).strftime('%Y-%m-%d')\r\n",
					"vm_cost_df = cost_df.where(F.col('Date') >= vm_start_date)\r\n",
					"\r\n",
					"is_vm_cost = ((F.col('ResourceId').contains('/virtualMachines/')) | (F.col('ResourceId').contains('/virtualMachineScaleSets/'))) \\\r\n",
					"    & ((F.col('MeterSubCategory').contains('Windows')) | (F.col('ServiceInfo2').contains('Windows Server BYOL')))\r\n",
					"\r\n",
					"vm_cost_df = vm_cost_df.where(is_vm_cost)\r\n",
					"\r\n",
					"vm_cost_df = vm_cost_df.select(*vm_columns)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pricesheet_source_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/portal-export/pricesheet-latest'\r\n",
					"pricesheet_df = spark.read.format('parquet').load(pricesheet_source_path)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"vm_cost_df = vm_cost_df.where(F.col('MeterCategory') == 'Virtual Machines')\r\n",
					"vm_cost_df = vm_cost_df.where(F.col('ai_VCPUs').isNotNull())"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(vm_cost_df.where(F.col('ai_VCPUs') == ''))"
				],
				"execution_count": 28
			}
		]
	}
}