{
	"name": "HUB_Daily_File",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "d560377f-8e16-4187-a0ac-e6ad8f40d3cb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import timedelta, datetime\n",
					"from dateutil.relativedelta import relativedelta\n",
					"import pandas as pd\n",
					"import calendar"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_start_and_end_date():\r\n",
					"    start_date = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')\r\n",
					"    print(start_date)\r\n",
					"\r\n",
					"    end_date = (datetime.now().strftime('%Y-%m-%d'))\r\n",
					"    print(end_date)\r\n",
					"    return start_date, end_date"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_dates_last_month():\r\n",
					"    last_month_start = (datetime.now() - relativedelta(months=1)).strftime('%Y%m01')\r\n",
					"    print(last_month_start)\r\n",
					"\r\n",
					"    input_dt = datetime.now()\r\n",
					"    first = input_dt.replace(day=1)\r\n",
					"    res = first - timedelta(days=1)\r\n",
					"    last_month_end = res.date().strftime('%Y%m%d')\r\n",
					"    print(last_month_end)\r\n",
					"\r\n",
					"    return last_month_start, last_month_end"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def load_cost_data(start_date):\r\n",
					"    daily_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/daily/ACMDailyActualCost/ACMDailyActualCost.parquet'\r\n",
					"    cost_df = pd.read_parquet(daily_path)\r\n",
					"\r\n",
					"    current_day = datetime.now().strftime('%d')\r\n",
					"    if current_day == '01' or current_day == '02':\r\n",
					"        last_month_start, last_month_end = get_dates_last_month()\r\n",
					"        monthly_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/{last_month_start}-{last_month_end}/ACMMonthlyActualCost_{last_month_start}-{last_month_end}.parquet'\r\n",
					"        monthly_df = pd.read_parquet(monthly_path)\r\n",
					"\r\n",
					"        cost_df = pd.concat([cost_df, monthly_df])\r\n",
					"\r\n",
					"    cost_df = df.loc[(cost_df['Date'] >= start_date)]\r\n",
					"    return cost_df"
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write pricesheet to HUBAutomation"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/New/ArmPriceSheet_Enrollment_LATEST.csv'\r\n",
					"output_path = 'abfss://win-activity@hubautomation.dfs.core.windows.net/usage_details/'\r\n",
					"\r\n",
					"print('Loading the latest pricesheet from source parquet')\r\n",
					"pricesheet = pd.read_csv(pricesheet_path)\r\n",
					"print('Writing pricesheet to destination csv file')\r\n",
					"pricesheet.to_csv(output_path + 'pricesheet.csv')"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"start_date, end_date = get_start_and_end_date()\r\n",
					"vm_cost_df = load_cost_data(start_date)\r\n",
					"sql_cost_df = vm_cost_df.copy()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns_to_keep = ['SubscriptionId', 'SubscriptionName','Date','ResourceGroup', 'ResourceName', 'ResourceId', \n",
					"    'MeterCategory', 'MeterSubCategory', 'MeterName','UnitOfMeasure','Quantity','UnitPrice','EffectivePrice',\n",
					"    'CostInBillingCurrency', 'ServiceInfo2', 'PartNumber', 'AdditionalInfo']\n",
					"vm_cost_df.drop(columns=vm_cost_df.columns.difference(columns_to_keep), inplace=True)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(len(df))\n",
					"vm_cost_df = vm_cost_df.loc[vm_cost_df.index[((vm_cost_df['ResourceId'].astype(str).str.contains('/virtualMachines/')) |\n",
					"        (vm_cost_df['ResourceId'].astype(str).str.contains('/virtualMachineScaleSets/'))) &\n",
					"        ((vm_cost_df['MeterSubCategory'].astype(str).str.contains('Windows')) |\n",
					"        (vm_cost_df['ServiceInfo2'].astype(str).str.contains('Windows Server BYOL')))]]\n",
					"\n",
					"df.reset_index(inplace=True, drop=True)\n",
					"print(len(df))\n",
					"print(df)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#print('Writing DataFrame to parquet file: ', output_file + 'vm_' + end_date + '.parquet')\n",
					"#df.to_parquet(output_file + 'vm_' + end_date + '.parquet')\n",
					"print('Writing DataFrame to parquet file: ', output_file + 'vm_' + end_date + '.csv')\n",
					"df.to_csv(output_file + 'vm_' + end_date + '.csv')\n",
					"print('Writing DataFrame to parquet file: ', output_file + 'vm_today.csv')\n",
					"#df.to_parquet(output_file + 'vm_today.parquet')\n",
					"df.to_csv(output_file + 'vm_today.csv')\n",
					"print('File write complete.')"
				],
				"execution_count": 7
			}
		]
	}
}