{
	"name": "test-core-assignment",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB and RI Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "7db7e3c3-5692-48e7-871b-a51d01ec7492"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pre_date = '2024-03-12'\r\n",
					"post_date = '2024-03-14'\r\n",
					"deploy_date = '2024-03-13'\r\n",
					"start_of_month = '2024-03-01'\r\n",
					"end_of_month = '2024-03-31'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"test_path = f'abfss://sql-hub-logs@hubautomation.dfs.core.windows.net/{deploy_date}-AHUB-Deployment.csv'\r\n",
					"csv_options = {'header' : True,\r\n",
					"                'delimiter' : ',',\r\n",
					"                'quote' : '\"',\r\n",
					"                'escape' : '\"'}\r\n",
					"add_df = spark.read.options(**csv_options).csv(test_path)\r\n",
					"\r\n",
					"add_ids = [row[0] for row in add_df.select(\"ResourceId\").collect()]\r\n",
					"\r\n",
					"test_path = f'abfss://sql-hub-logs@hubautomation.dfs.core.windows.net/{deploy_date}-AHUB-Removal.csv'\r\n",
					"csv_options = {'header' : True,\r\n",
					"                'delimiter' : ',',\r\n",
					"                'quote' : '\"',\r\n",
					"                'escape' : '\"'}\r\n",
					"rm_df = spark.read.options(**csv_options).csv(test_path)\r\n",
					"\r\n",
					"rm_ids = [row[0] for row in rm_df.select(\"ResourceId\").collect()]\r\n",
					"\r\n",
					"cost_path = monthly_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/{start_of_month.replace(\"-\", \"\")}-{end_of_month.replace(\"-\", \"\")}/Extended_v3_ACMMonthlyActualCost_{start_of_month.replace(\"-\", \"\")}-{end_of_month.replace(\"-\", \"\")}.parquet'\r\n",
					"test_cost = spark.read.format('parquet').load(cost_path)\r\n",
					"\r\n",
					"cost_pre = test_cost.where(F.col('Date') == pre_date)\r\n",
					"cost_pre_ne = cost_pre.where(F.col('SQLAHB') == 'Not Enabled').dropDuplicates(['ResourceId'])\r\n",
					"cost_pre = cost_pre.where(F.col('SQLAHB') == 'Enabled').dropDuplicates(['ResourceId'])\r\n",
					"\r\n",
					"cost_today = test_cost.where(F.col('Date') >= start_of_month)\r\n",
					"cost_today_ne = cost_today.where(F.col('SQLAHB') == 'Not Enabled').dropDuplicates(['ResourceId'])\r\n",
					"cost_today = cost_today.where(F.col('SQLAHB') == 'Enabled').dropDuplicates(['ResourceId'])\r\n",
					"\r\n",
					"cost_post = test_cost.where(F.col('Date') == post_date)\r\n",
					"cost_post_ne = cost_post.where(F.col('SQLAHB') == 'Not Enabled').dropDuplicates(['ResourceId'])\r\n",
					"cost_post = cost_post.where(F.col('SQLAHB') == 'Enabled').dropDuplicates(['ResourceId'])\r\n",
					"\r\n",
					"pre_ids = [row[0] for row in cost_pre.select(\"ResourceId\").collect()]\r\n",
					"post_ids = [row[0] for row in cost_post.select(\"ResourceId\").collect()]\r\n",
					"\r\n",
					"pre = set(pre_ids)\r\n",
					"post = set(post_ids)\r\n",
					"added = set(add_ids)\r\n",
					"removed = set(rm_ids)\r\n",
					"\r\n",
					"kept = pre.intersection(post)\r\n",
					"diff = added.intersection(pre)\r\n",
					"\r\n",
					"add_w_vcpu = add_df.join(cost_today, 'ResourceId', 'left')\r\n",
					"rm_w_vcpu = rm_df.join(cost_today, 'ResourceId', 'left')"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Calculate over/under assignment of HUB\r\n",
					"1. Compute # of resources with HUB and # of VCPUs on 12th of March (pre) **318** (2025)\r\n",
					"2. Compute # of resources with HUB and # of VCPUs on 14th of March (post) **294** (2689)\r\n",
					"3. Compute # of resources with HUB enabled and # of VCPUs on 13th of March (added) **313** (1341)\r\n",
					"\r\n",
					"- **11** of these resources does not exist any longer, and deployment fails for these. These account for **80** normalized cores\r\n",
					"\r\n",
					"4. Compute # of resources with HUB disabled and # of VCPUs on 13th of March (removed) **50** (528)\r\n",
					"5. How many resources/vCPUs was included kept from 12th to 14th (kept)? **243** (1289)\r\n",
					"\r\n",
					"- **9** of the resources marked as _HUB Enabled_ is not reflected in the normalized core column. These are **Azure Arc-Enabled SQL Server** instances and amount to **184** normalized cores (but are not reflected in the extend files)\r\n",
					" \r\n",
					"6. How many resources/vCPUs was similar on the 12th and the enabled list? (1199)\r\n",
					"7. How many resources/vCPUs was similar on the 14th and the enabled list?\r\n",
					"8. How many resources in the disabled list was enabled on the 12th? (should be all)\r\n",
					"9. How many resources in the disabled list was enabled on the 14th? (should be none)\r\n",
					"10. How many resources on the enable list was not enabled on the 14th?\r\n",
					"11. How many enabled resources on the 14th was not in the enable list?\r\n",
					"12. How many resources was failed to enabled/diabled on the 13th?\r\n",
					"\r\n",
					"\r\n",
					"- Are more/less normalized cores being enabled than available licenses?\r\n",
					"- Get list of resources not being enabled that should be enabled\r\n",
					"- Get list of resources that are enabled but are not in the enabled list\r\n",
					"- Do the same for Windows HUB\r\n",
					"\r\n",
					"### SUMMARY\r\n",
					"\r\n",
					"HOW MANY RESOURCES ON 12th\r\n",
					"\r\n",
					"HOW MANY ENABLED ON 13th\r\n",
					"\r\n",
					"HOW MANY RESOURCE ON 14th\r\n",
					"\r\n",
					"HOW MANY RESOURCES ON 12th NOT IN ENABLED LIST\r\n",
					"\r\n",
					"HOW MANY RESOURCES ON 14th NOT IN ENABLED LIST"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(cost_pre.where(F.col('ResourceId').isin(pre.difference(added))).agg(F.sum('SQLAHB_VCPUS')))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pre_count = cost_pre.count()\r\n",
					"pre_cores = cost_pre.agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]\r\n",
					"post_count = cost_post.count()\r\n",
					"post_cores = cost_post.agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"added_count = add_w_vcpu.count()\r\n",
					"added_cores = add_w_vcpu.agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]\r\n",
					"added_not_exists_count = add_w_vcpu.where(F.col('SQLAHB').isNull()).count()\r\n",
					"added_not_exists_cores = add_w_vcpu.where(F.col('SQLAHB').isNull()).agg(F.sum('vCores')).collect()[0][0] # Not normalized"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rm_count = rm_w_vcpu.count()\r\n",
					"rm_cores = rm_w_vcpu.agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"kept_count = cost_today.where(F.col('ResourceId').isin(kept)).count()\r\n",
					"kept_cores = cost_today.where(F.col('ResourceId').isin(kept)).agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pre_added_count = cost_today.where(F.col('ResourceId').isin(pre.intersection(added))).count()\r\n",
					"pre_added_cores = cost_today.where(F.col('ResourceId').isin(pre.intersection(added))).agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"post_added_count = cost_today.where(F.col('ResourceId').isin(post.intersection(added))).count()\r\n",
					"post_added_cores = cost_today.where(F.col('ResourceId').isin(post.intersection(added))).agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(pre_removed_count)\r\n",
					"print(pre_removed_cores)\r\n",
					"print(post_removed_count)\r\n",
					"print(post_removed_cores)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pre_removed_count = cost_today.where(F.col('ResourceId').isin(pre.intersection(removed))).count()\r\n",
					"pre_removed_cores = cost_today.where(F.col('ResourceId').isin(pre.intersection(removed))).agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]\r\n",
					"\r\n",
					"post_removed_count = cost_today.where(F.col('ResourceId').isin(post.intersection(removed))).count()\r\n",
					"post_removed_cores = cost_today.where(F.col('ResourceId').isin(post.intersection(removed))).agg(F.sum('SQLAHB_VCPUS')).collect()[0][0] or 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"post_added_ne_count = cost_post_ne.where(F.col('ResourceId').isin(added)).count()\r\n",
					"post_added_ne_cores = cost_post_ne.where(F.col('ResourceId').isin(added)).agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"post_not_in_added_count = cost_post.where(F.col('ResourceId').isin(post.difference(added))).count()\r\n",
					"post_not_in_added_cores = cost_post.where(F.col('ResourceId').isin(post.difference(added))).agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pre_not_in_added_count = cost_pre.where(F.col('ResourceId').isin(pre.difference(added))).count()\r\n",
					"pre_not_in_added_cores = cost_pre.where(F.col('ResourceId').isin(pre.difference(added))).agg(F.sum('SQLAHB_VCPUS')).collect()[0][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Number of resources with HUB on date before deployment {pre_date}: {pre_count} ({pre_cores} normalized cores)\")\r\n",
					"print(f\"Number of resources in HUB deployment on {deploy_date}: {added_count} ({added_cores} normalized cores)\")\r\n",
					"print(f\"Number of resource with HUB on date after deployment {post_date}: {post_count} ({post_cores} normalized cores)\")\r\n",
					"print(' ')\r\n",
					"print(f\"Expected number of HUB resources on {post_date}: {added_count} ({added_cores} normalized cores)\")\r\n",
					"print(f\"Actual number of HUB resources on {post_date}: {post_count} ({post_cores} normalized cores)\")\r\n",
					"print(' ')\r\n",
					"print(f\"Number of resources scheduled for HUB deployment that doesn't exist per {deploy_date}: {added_not_exists_count} ({added_not_exists_cores} NOT normalized cores)\")\r\n",
					"print(f\"The new expected number of HUB resources on {post_date}: {added_count - added_not_exists_count}\")\r\n",
					"print(' ')\r\n",
					"print(f\"Out of the {pre_count} HUB resources day before deployment, {rm_count} were scheduled for removal ({rm_cores} normalized cores)\")\r\n",
					"print(f\"Out of the {rm_count} HUB resources scheduled for removal on {deploy_date}, {pre_removed_count} ({pre_removed_cores} normalized cores) resources had HUB deployed on {pre_date}\")\r\n",
					"print('')\r\n",
					"print(f\"Out of the {pre_count} HUB resources from {pre_date}, {kept_count} ({kept_cores} normalized cores) of the same resources still had HUB applied {post_date}\")\r\n",
					"print(f\"Out of the {pre_count} HUB resources from {pre_date}, {pre_added_count} ({pre_added_cores} normalized cores) of the same resources were in the deploy list on {deploy_date}\")\r\n",
					"print(f\"Out of the {post_count} HUB resources from {post_date}, {post_added_count} ({post_added_cores} normalized cores) of the same resources were in the deploy list on {deploy_date}\")\r\n",
					"print(' ')\r\n",
					"print(f\"{post_added_ne_count} ({post_added_ne_cores} normalized cores) resources that were scheduled for deployment on {deploy_date}, did not have HUB enabled on {post_date}\")\r\n",
					"print(' ')\r\n",
					"print(f\"Out of the {post_count} HUB resources on {post_date}, there are {post_not_in_added_count} ({post_not_in_added_cores} normalized cores) that are not referenced on the deployment list on {deploy_date}\")\r\n",
					"print(f\"Out of the {pre_count} HUB resources on {pre_date}, there are {pre_not_in_added_count} ({pre_not_in_added_cores} normalized cores) that are not referenced on the deployment list on {deploy_date}\")\r\n",
					"print(\" \")\r\n",
					"\r\n",
					"expected_count = added_count\r\n",
					"expected_cores = added_cores\r\n",
					"print(f\"Having {expected_count} ({expected_cores} normalized cores) resources scheduled for deployment, but there are {post_count} ({post_cores} normalized cores) HUB resources day after deployment\")\r\n",
					"\r\n",
					"expected_count -= added_not_exists_count\r\n",
					"expected_cores -= added_not_exists_cores\r\n",
					"print(f\"Subtracting the scheduled resources that doesent exist {added_not_exists_count} ({added_not_exists_cores} NOT normalized cores), we can expect {expected_count} ({expected_cores} normalized cores) resources for deployment\")\r\n",
					"\r\n",
					"expected_post_count = post_not_in_added_count + expected_count\r\n",
					"expected_post_cores = post_not_in_added_cores + expected_cores\r\n",
					"print(f\"Taking into account the resources with HUB post deployment that weren't referenced in HUB schedule {post_not_in_added_count} ({post_not_in_added_cores} normalized cores), the expected number of HUB resources day after deployment should be {expected_post_count} ({expected_post_cores} normalized cores)\")\r\n",
					"\r\n",
					"expected_diff_count = expected_post_count - post_count \r\n",
					"expected_diff_cores = expected_post_cores - post_cores\r\n",
					"print(f\"Conclusion: there are being deployed {expected_diff_count} ({expected_diff_cores} normalized cores) less HUB resources than expected\")"
				],
				"execution_count": null
			}
		]
	}
}