{
	"name": "sql-hub-deployments",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB and RI Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "daeba297-c234-4267-9522-0426d3682f51"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from datetime import timedelta, datetime\r\n",
					"from dateutil.relativedelta import relativedelta\r\n",
					"import calendar\r\n",
					"import json\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from azure.storage.blob import BlobServiceClient\r\n",
					"import pyspark.sql.functions as F"
				],
				"execution_count": 256
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 257
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"KEY_VAULT_NAME = 'acm-toolkit-kv'\r\n",
					"LINKED_SERVICE_NAME = 'ACM_Toolkit_kv'\r\n",
					"hubAutomationConnectionString = mssparkutils.credentials.getSecret(KEY_VAULT_NAME , 'hubautomation-sa-connectionstring', LINKED_SERVICE_NAME)"
				],
				"execution_count": 258
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"blob_service_client = BlobServiceClient.from_connection_string(hubAutomationConnectionString)\r\n",
					"\r\n",
					"# get a reference to the blob container and file\r\n",
					"container_name = 'sql-config'\r\n",
					"blob_name = 'config.json'\r\n",
					"container_client = blob_service_client.get_container_client(container_name)\r\n",
					"blob_client = container_client.get_blob_client(blob_name)\r\n",
					"\r\n",
					"# download the blob content as a string\r\n",
					"blob_content = blob_client.download_blob().content_as_text()\r\n",
					"\r\n",
					"# parse the JSON string into a Python dictionary\r\n",
					"sql_config = json.loads(blob_content)\r\n",
					"\r\n",
					"sql_metersubcategory_array = sql_config['MeterSubCategory']\r\n",
					"sql_days_back_from = sql_config['daysBackFrom']\r\n",
					"sql_days_back_to = sql_config['daysBackTo']\r\n",
					"sql_enterprise_licence_cores = sql_config['enterprise_licence_cores']\r\n",
					"sql_standard_licence_cores = sql_config['enterprise_licence_cores']\r\n",
					"\r\n",
					"sql_normalized_licence_cores = (4 * sql_enterprise_licence_cores) + sql_standard_licence_cores"
				],
				"execution_count": 259
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# last_month_start = (datetime.now() - relativedelta(months=1)).strftime('%Y%m01')\r\n",
					"# last_month_end = ((datetime.now().replace(day=1)) - timedelta(days=1)).date().strftime('%Y%m%d')\r\n",
					"\r\n",
					"end_date = (datetime.now().strftime('%Y-%m-%d'))\r\n",
					"vm_start_date = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')\r\n",
					"sql_start_date = (datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d')\r\n",
					"\r\n",
					"# daily_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/daily/ACMDailyActualCost/ACMDailyActualCost.parquet'\r\n",
					"# daily_df = spark.read.format('parquet').load(daily_path)\r\n",
					"\r\n",
					"# monthly_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/{last_month_start}-{last_month_end}/ACMMonthlyActualCost_{last_month_start}-{last_month_end}.parquet'\r\n",
					"# monthly_df = spark.read.format('parquet').load(monthly_path)\r\n",
					"\r\n",
					"# cost_df = daily_df.union(monthly_df)\r\n",
					"\r\n",
					"cost_path = monthly_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/20240301-20240331/Extended_v3_ACMMonthlyActualCost_20240301-20240331.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)"
				],
				"execution_count": 261
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_cost_df = cost_df.where(F.col('Date') >= vm_start_date)\r\n",
					"sql_cost_df = cost_df.where(F.col('Date') == sql_start_date)"
				],
				"execution_count": 262
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_max_date = sql_cost_df.agg(F.max('Date')).collect()[0][0]\r\n",
					"sql_min_date = sql_cost_df.agg(F.min('Date')).collect()[0][0]\r\n",
					"sql_interval_days = (sql_max_date - sql_min_date).days + 1\r\n",
					"sql_interval_hours = sql_interval_days * 24"
				],
				"execution_count": 263
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(sql_date_diff)"
				],
				"execution_count": 264
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns_to_keep = [\r\n",
					"    'SubscriptionId',\r\n",
					"    'SubscriptionName',\r\n",
					"    'Date',\r\n",
					"    'ResourceGroup', \r\n",
					"    'ResourceName', \r\n",
					"    'ResourceId', \r\n",
					"    'MeterCategory', \r\n",
					"    'MeterSubCategory', \r\n",
					"    'MeterName',\r\n",
					"    'UnitOfMeasure',\r\n",
					"    'Quantity',\r\n",
					"    'UnitPrice',\r\n",
					"    'EffectivePrice',\r\n",
					"    'CostInBillingCurrency', \r\n",
					"    'ServiceInfo2',\r\n",
					"    'PartNumber', \r\n",
					"    'ai_VCPUs',\r\n",
					"    'ai_AHB'\r\n",
					"]\r\n",
					"\r\n",
					"sql_columns = columns_to_keep + [\r\n",
					"    'SQLAHB',\r\n",
					"    'SQLAHB_VCPUs',\r\n",
					"    'ai_vCores'\r\n",
					"]\r\n",
					"\r\n",
					"vm_columns = columns_to_keep + [\r\n",
					"    'WindowsAHB',\r\n",
					"    'WindowsAHB_VCPUs'\r\n",
					"]"
				],
				"execution_count": 265
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"is_vm_cost = ((F.col('ResourceId').contains('/virtualMachines/')) | (F.col('ResourceId').contains('/virtualMachineScaleSets/'))) \\\r\n",
					"    & ((F.col('MeterSubCategory').contains('Windows')) | (F.col('ServiceInfo2').contains('Windows Server BYOL')))\r\n",
					"\r\n",
					"vm_cost_df = vm_cost_df.where(is_vm_cost)\r\n",
					"\r\n",
					"vm_cost_df = vm_cost_df.select(*vm_columns)"
				],
				"execution_count": 266
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_cost_df = sql_cost_df.select(*sql_columns)\r\n",
					"sql_cost_df = sql_cost_df.where(F.col('MeterSubCategory').isin(sql_metersubcategory_array))\r\n",
					"sql_cost_df = sql_cost_df.where(~F.upper(F.col('ResourceName')).startswith('CVD-'))"
				],
				"execution_count": 267
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"is_sql_vm = (F.col('MeterCategory') == 'Virtual Machines Licenses') & (F.col('MeterSubCategory').like('SQL Server%'))\r\n",
					"is_sql_db = (F.col('ResourceId').like('%Microsoft.Sql/servers%')) & (F.col('MeterCategory').like('SQL%'))\r\n",
					"is_sql_mi = (F.col('ResourceId').like('%Microsoft.Sql/managedInstances%')) & (F.col('MeterCategory').like('SQL%'))"
				],
				"execution_count": 268
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_cost_df = sql_cost_df.withColumn('Priority',\r\n",
					"    F.when(is_sql_mi & (F.col('ProductName').contains('General Purpose')), 1)\r\n",
					"    .when(is_sql_mi & (F.col('ProductName').contains('Business Critical')), 2)\r\n",
					"    .when(is_sql_db & (F.col('ProductName').contains('General Purpose')), 3)\r\n",
					"    .when(is_sql_vm & (F.col('ProductName').startswith('SQL Server Enterprise') | (F.col('ProductName') == 'SQL Server Azure Hybrid Benefit - Enterprise Edition')), 4)\r\n",
					"    .when(is_sql_db & (F.col('ProductName').contains('Business Critical')), 5)\r\n",
					"    .when(is_sql_vm & (F.col('ProductName').startswith('SQL Server Standard') | (F.col('ProductName') == 'SQL Server Azure Hybrid Benefit - Standard Edition')), 6)\r\n",
					"    .otherwise(0)\r\n",
					")"
				],
				"execution_count": 269
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_cost_df = sql_cost_df.where(is_sql_vm | is_sql_mi | is_sql_db)\r\n",
					"\r\n",
					"sql_cost_df = sql_vm_df \\\r\n",
					"    .select('ResourceId', 'Quantity', 'ai_VCPUs', 'ai_vCores', 'SQLAHB_VCPUs') \\\r\n",
					"    .groupBy('ResourceId', 'ai_VCPUs', 'ai_vCores', 'SQLAHB_VCPUs') \\\r\n",
					"    .agg(F.sum('Quantity').alias('ResourceHours'))\r\n",
					"\r\n",
					"# SQL VM instances will have a quantity per resource per day at 0-24 hours\r\n",
					"vm_utilization = F.col('ResourceHours') / sql_interval_hours\r\n",
					"\r\n",
					"# SQL MI and DB instances will have a quantity per resource per day at 0-24 hours * vCores\r\n",
					"resource_hours_per_core = F.col('ResourceHours') / F.col('ai_vCores')\r\n",
					"\r\n",
					"mi_utilization = resource_hours_per_core / sql_interval_hours\r\n",
					"db_utilization = resource_hours_per_core / sql_interval_hours\r\n",
					"\r\n",
					"sql_cost_df = sql_cost_df.withColumn('Utilization',\r\n",
					"    F.when(is_sql_vm, vm_utilization)\r\n",
					"    .when(is_sql_db, db_utilization)\r\n",
					"    .when(is_sql_mi, mi_utilization)\r\n",
					"    .otherwise(0)\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_vm_df = sql_cost_df.where(is_sql_vm)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_utilization_df = sql_vm_df \\\r\n",
					"    .select('ResourceId', 'Quantity', 'ai_VCPUs', 'SQLAHB_VCPUs') \\\r\n",
					"    .groupBy('ResourceId', 'ai_VCPUs', 'SQLAHB_VCPUs') \\\r\n",
					"    .agg(F.sum('Quantity').alias('ResourceHours'))\r\n",
					"\r\n",
					"vm_utilization_df = vm_utilization_df.withColumn('Utilization', F.col('ResourceHours') / sql_interval_hours)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_mi_df = sql_cost_df.where(is_sql_mi)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mi_utilization_df = sql_mi_df \\\r\n",
					"    .select('ResourceId', 'Quantity', 'ai_vCores', 'SQLAHB_VCPUs') \\\r\n",
					"    .groupBy('ResourceId', 'ai_vCores', 'SQLAHB_VCPUs') \\\r\n",
					"    .agg(F.sum('Quantity').alias('CoreHours'))\r\n",
					"\r\n",
					"mi_utilization_df = mi_utilization_df.withColumn('HoursPerCore', F.col('CoreHours') / F.col('ai_vCores'))\r\n",
					"mi_utilization_df = mi_utilization_df.withColumn('Utilization', F.col('HoursPerCore') / sql_interval_hours)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_db_df = sql_cost_df.where(is_sql_db)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_utilization_df = sql_db_df \\\r\n",
					"    .select('ResourceId', 'Quantity', 'ai_vCores', 'SQLAHB_VCPUs') \\\r\n",
					"    .groupBy('ResourceId', 'ai_vCores', 'SQLAHB_VCPUs') \\\r\n",
					"    .agg(F.sum('Quantity').alias('CoreHours'))\r\n",
					"\r\n",
					"db_utilization_df = db_utilization_df.withColumn('HoursPerCore', F.col('CoreHours') / F.col('ai_vCores'))\r\n",
					"db_utilization_df = db_utilization_df.withColumn('Utilization', F.col('HoursPerCore') / sql_interval_hours)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(db_utilization_df)"
				],
				"execution_count": null
			}
		]
	}
}