{
	"name": "Run Notebook on Previous Dates_v1",
	"properties": {
		"description": "Double check with Joakim",
		"folder": {
			"name": "NotebookInProduction/Cost Extension"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "c699190d-d064-45bb-88dd-18cec091d1fa"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import time"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Setting a root directory to get all the dates. Whether it is Actual or Amortized isn't important seeing as we only want the dates\r\n",
					"container = 'usage'\r\n",
					"root_dir = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/exports/monthly/ACMMonthlyAmortizedCost/'\r\n",
					"\r\n",
					"\r\n",
					"# Getting the dates from the directory folder\r\n",
					"date_paths = mssparkutils.fs.ls(root_dir)\r\n",
					"dates = [files.name for files in date_paths]\r\n",
					"dates = [date_string.split('-') for date_string in dates]"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # For Testing Purposes\r\n",
					"#dates = [[toDate, fromDate] for (toDate, fromDate) in dates if toDate >= '20230101']"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# n = 0\r\n",
					"# For each date, we run the notebook for the specific period\r\n",
					"for (fromDate, toDate) in dates:\r\n",
					"    notebook_reference = 'monthly-cost-extend-v3' if fromDate != dates[-1][0] else 'daily-cost-extend-v3'\r\n",
					"    print(f'Running {notebook_reference} notebook with date range {fromDate}-{toDate}')\r\n",
					"    # Checking the run-time of the notebook for timeout-purposes\r\n",
					"    start_time = time.time()\r\n",
					"    # Running Monthly Extend-notebook with the variable arguments as inputs to the notebook.\r\n",
					"    mssparkutils.notebook.run(path=notebook_reference, \r\n",
					"                              timeout_seconds=600,\r\n",
					"                              arguments={'fromDate' : fromDate, \r\n",
					"                                         'toDate' : toDate, \r\n",
					"                                         'container' : container,\r\n",
					"                                         'reportType': 'ActualCost'})\r\n",
					"    end_time = time.time()\r\n",
					"    print(f\"The runtime of the actual cost notebook was: {round(end_time - start_time, 2)} seconds.\")\r\n",
					"\r\n",
					"    start_time = time.time()\r\n",
					"    mssparkutils.notebook.run(path=notebook_reference, \r\n",
					"                              timeout_seconds=600,\r\n",
					"                              arguments={'fromDate' : fromDate, \r\n",
					"                                         'toDate' : toDate, \r\n",
					"                                         'container' : container,\r\n",
					"                                         'reportType': 'AmortizedCost'})\r\n",
					"    end_time = time.time()\r\n",
					"    print(f\"The runtime of the amortized cost notebook was: {round(end_time - start_time, 2)} seconds.\")\r\n",
					"    \r\n",
					"    # # For testing purposes\r\n",
					"    # n += 1\r\n",
					"    # if n == 2:\r\n",
					"    #     break"
				],
				"execution_count": 5
			}
		]
	}
}