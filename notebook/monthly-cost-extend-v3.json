{
	"name": "monthly-cost-extend-v3",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/Cost Extension"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "118aff83-24f6-425d-bb15-6afa9ad1b80f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# Input data\n",
					"toDate = '20230531'\n",
					"fromDate = '20230501'\n",
					"container = 'usage'\n",
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\n",
					"import pyspark.pandas as ps\n",
					"import json\n",
					"import numpy as np\n",
					"from datetime import datetime\n",
					"import calendar\n",
					"import warnings\n",
					"\n",
					"import pyspark.sql.functions as F\n",
					"import pyspark.sql.types as T"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def load_csv(csv_path):\r\n",
					"    csv_options = {'header' : True,\r\n",
					"                   'delimiter' : ',',\r\n",
					"                   'quote' : '\"',\r\n",
					"                   'escape' : '\"'}\r\n",
					"\r\n",
					"    df = spark.read.options(**csv_options).csv(csv_path)\r\n",
					"    return df\r\n",
					"\r\n",
					"def load_json(json_path):\r\n",
					"    df = spark.read.json(json_path)\r\n",
					"    return df\r\n",
					"\r\n",
					"def load_parquet(parquet_path):\r\n",
					"    df = spark.read.format('parquet').load(parquet_path)\r\n",
					"    return df"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def load_and_process_solum_subscriptions(subscription_path):\r\n",
					"\r\n",
					"    subscription_df = load_json(subscription_path)\r\n",
					"    subscription_df = subscription_df.withColumnRenamed('id', 'SubscriptionId')\r\n",
					"    subscription_df = subscription_df.withColumn('id', F.monotonically_increasing_id())\r\n",
					"\r\n",
					"    try:\r\n",
					"        subscription_df = subscription_df.withColumn('tags', F.from_json(F.col('tags')))\r\n",
					"    except:\r\n",
					"        print('Already a json file')\r\n",
					"\r\n",
					"    # Expanding the tags list into separate columns\r\n",
					"    subscription_df = subscription_df.withColumn('SubscriptionWBS', F.col('tags.WBS'))\r\n",
					"    subscription_df = subscription_df.withColumn('SubscriptionServiceNow-App', F.col('tags.ServiceNow-App'))\r\n",
					"    subscription_df = subscription_df.drop('tags')\r\n",
					"\r\n",
					"    # Dropping unnecessary columns and setting the schema\r\n",
					"    columns_to_keep = ['SubscriptionId', 'SubscriptionWBS', 'SubscriptionServiceNow-App']\r\n",
					"    subscription_df = subscription_df.select(columns_to_keep)\r\n",
					"\r\n",
					"    return subscription_df\r\n",
					"\r\n",
					"def load_and_process_servicenow_subscriptions(subscription_path):\r\n",
					"    subscription_df = load_parquet(subscription_path)\r\n",
					"\r\n",
					"    subscriptions_df = subscriptions_df.select('SubscriptionId', 'OperationalWBS', 'ApplicationName')\r\n",
					"    subscriptions_df = subscriptions_df.where(subscriptions_df.SubscriptionId != '')\r\n",
					"    subscriptions_df = subscriptions_df.withColumnRenamed('OperationalWBS', 'SubscriptionWBS')\r\n",
					"    subscriptions_df = subscriptions_df.withColumnRenamed('ApplicationName', 'SubscriptionServiceNow-App')\r\n",
					"    return subscriptions_df\r\n",
					"\r\n",
					"def load_and_process_applications(application_path):\r\n",
					"    application_df = load_parquet(application_path)\r\n",
					"    application_df = application_df.withColumn('AppID', F.col('AppID').cast(\"int\"))\r\n",
					"    return application_df"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def populate_columns(cost_df):\r\n",
					"\r\n",
					"    # Populating the Azure Hybrid Benefit Column\r\n",
					"    cost_df = cost_df.withColumn('Azure_Hybrid_Benefit', F.when(F.col('MeterSubCategory').contains('Windows'), \"Not Enabled\")\\\r\n",
					"                                                         .when(F.col('ServiceInfo2') == 'Windows Server BYOL', \"Enabled\")\\\r\n",
					"                                                         .otherwise('Not Supported'))\r\n",
					"\r\n",
					"    # Populating the isRIUsage Column\r\n",
					"    cost_df = cost_df.withColumn('IsRIUsage',\r\n",
					"                                 F.when(F.col('ReservationId').isNull(), 'On Demand Usage')\\\r\n",
					"                                  .otherwise('RI Usage'))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def extend_additional_info(cost_df):\r\n",
					"    # Extend AdditionalInfo Column\r\n",
					"    cost_df = cost_df.withColumn('AdditionalInfo', F.from_json('AdditionalInfo', 'map<string,string>', options={'inferSchema': 'true'}))\r\n",
					"\r\n",
					"    # Creating an ID column\r\n",
					"    cost_df = cost_df.withColumn('id', F.monotonically_increasing_id())\r\n",
					"\r\n",
					"    # Creating a list of columns we want to keep\r\n",
					"    cols_to_keep = [\"UsageType\", \r\n",
					"                    \"ImageType\",\r\n",
					"                    \"ServiceType\",\r\n",
					"                    \"VMName\",\r\n",
					"                    \"VMApplicationName\",\r\n",
					"                    \"VMProperties\",\r\n",
					"                    \"VCPUs\",\r\n",
					"                    \"AHB\",\r\n",
					"                    \"vCores\",\r\n",
					"                    \"RINormalizationRatio\",\r\n",
					"                    \"ConsumedQuantity\",\r\n",
					"                    \"DatabaseName\"]\r\n",
					"\r\n",
					"    for col in cols_to_keep:\r\n",
					"        cost_df = cost_df.withColumn('ai_' + col, F.coalesce(F.col(f'AdditionalInfo.{col}'), F.lit(None)))\r\n",
					"    return cost_df"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def AHB_column(cost_df):\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ai_VCPUs', F.col('ai_VCPUs').cast('int'))\r\n",
					"    cost_df = cost_df.na.fill({'ai_VCPUs' : 0})\r\n",
					"    cost_df = cost_df.withColumn('AHB_CPUs', F.when(F.col('ai_VCPUs') == 0, 0)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') < 8, 8)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') < 16, 16)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') == 20, 24)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') > 20, F.col('ai_VCPUs'))\\\r\n",
					"                                              .otherwise(0))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def instance_name(cost_df):\r\n",
					"\r\n",
					"    # cost_df = cost_df.withColumnRenamed('ai_VMName', 'ai_Container_VMName')\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('Instance_Name', F.when(F.col('ai_VMName').isNull(), F.col('ResourceName'))\\\r\n",
					"                                                   .when(F.col('ai_VMName').isNotNull(), F.col('ai_VMName'))\\\r\n",
					"                                                   .otherwise(0))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('UnitPrice', F.col('UnitPrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('PayGPrice', F.col('PayGPrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('Quantity', F.col('Quantity').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('EffectivePrice', F.col('EffectivePrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('CostInBillingCurrency', F.col('CostInBillingCurrency').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('Date', F.to_date(F.col('Date'), 'MM/dd/yyyy'))\\\r\n",
					"                     .withColumn('BillingPeriodStartDate', F.to_date(F.col('BillingPeriodStartDate'), 'MM/dd/yyyy'))\\\r\n",
					"                     .withColumn('BillingPeriodEndDate', F.to_date(F.col('BillingPeriodEndDate'), 'MM/dd/yyyy'))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_cost_tags(cost_df):\r\n",
					"    \r\n",
					"    # Storing the Tags column in a new column, and cleaning it up to fit with CostAllocationType\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.regexp_extract(F.col('Tags'), 'CostAllocationType\": \"(.*)\"', 0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.regexp_replace(F.col('CostAllocationType'), 'CostAllocationType\": \"', \"\"))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.split(F.col('CostAllocationType'),'\"', 0).getItem(0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('CostAllocationType') == \"\", None).otherwise(F.col('CostAllocationType')))\r\n",
					"\r\n",
					"    # Storing the Tags column in a new column, and cleaning it up to fit with CostAllocationCode\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.regexp_extract(F.col('Tags'), 'CostAllocationCode\": \"(.*)\"', 0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.regexp_replace(F.col('CostAllocationCode'), 'CostAllocationCode\": \"', \"\"))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.split(F.col('CostAllocationCode'),'\"', 0).getItem(0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.when(F.col('CostAllocationCode') == \"\", None).otherwise(F.col('CostAllocationCode')))\r\n",
					"    \r\n",
					"    print(\"Cost Tags expansion complete\")\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def replace_empty_cost_fields_with_subscription_details(cost_df, application_df):\r\n",
					"    print(\"Creating ActiveWBS column, copying over CostAllocationCode, replacing 'TOBESPECIFIED' and empty values then filling gaps with SubscriptionWBS...\")\r\n",
					"\r\n",
					"    # Apply Upper-case for all CostAllocationTypes and Codes\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.upper(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.upper(F.col('CostAllocationCode')))\r\n",
					"\r\n",
					"    # When the tag does not contain CostAllocationCode or CostAllocationType, then we fill/replace the value in ActiveWBSReason\r\n",
					"    invalidCostAllocationMask = F.col('CostAllocationCode').isNull() | F.col('CostAllocationType').isNull()\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(invalidCostAllocationMask, F.lit('CostAllocationType or CostAllocationCode not present in Tags')))\r\n",
					"\r\n",
					"    # When either value in mask appears in AcitveWBS, add invalid reason in new column\r\n",
					"    validCostAllocationType = ['WBS', 'APPID', 'CI']\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(~F.col('CostAllocationType').isin(validCostAllocationType), F.lit('Invalid CostAllocationType: not APPID, CI or WBS')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    # When the values in the columns below match the mask and the cost type is WBS, then:\r\n",
					"    # regex pattern states that the string should start with a case insensitive letter, followed by a dot, followed by either letters, numbers or dots\r\n",
					"    pattern = r'^[a-zA-Z]\\.[a-zA-Z0-9.]+$'\r\n",
					"    rmask = F.col('CostAllocationCode').rlike(pattern)\r\n",
					"    cost_wbs = (F.col('CostAllocationType') == 'WBS')\r\n",
					"\r\n",
					"    # Applying valid WBS' as Active WBS'\r\n",
					"    # 1. Where the CostAllocationCode follows the regex and the CostAllocationType is WBS, we apply the CostAllocationCode\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(cost_wbs & rmask, F.col('CostAllocationCode')))\r\n",
					"    # 2. Where the CostAllocationCode doesn't follow the regex and the CostAllocationType is WBS, we set the ActiveWBSReason to be \"Invalid CostAllocationCode WBS\"\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(cost_wbs & ~rmask, F.lit('Invalid CostAllocationCode WBS')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    # 3. Where the CostAllocationCode doesn't follow the regex and the CostAllocationType is WBS, the CostAllocationType is changed to \"SubscriptionWBS\"\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(cost_wbs & ~rmask, F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"\r\n",
					"    # Applying valid AppIDs as Active WBS'\r\n",
					"    # If the CostAllocationCode is empty, we fill/replace the column ActiveWBS with Operational WBS in the application_df\r\n",
					"    map_app = application_df.withColumn('AppID', F.col('AppID').cast(T.StringType())).select('AppID', 'OperationalWBS')\r\n",
					"    joined_df = cost_df.join(map_app, (cost_df.CostAllocationType == 'APPID') & (cost_df.CostAllocationCode == map_app.AppID), how='left')\r\n",
					"    cost_df = joined_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('OperationalWBS')).otherwise(F.col('ActiveWBS')))\r\n",
					"    cost_df = cost_df.drop('OperationalWBS')\r\n",
					"\r\n",
					"    # Applying valid CIs as Active WBS'\r\n",
					"    # Same here as above, but we merge the dataframes on ApplicationNames rather than AppID\r\n",
					"    map_app = application_df.select('ApplicationName', 'OperationalWBS')\r\n",
					"    # Apply join with case insensitivity\r\n",
					"    map_app = map_app.withColumn('ApplicationName_upper',F.upper(F.col('ApplicationName')))\r\n",
					"    joined_df = cost_df.join(map_app, (cost_df.CostAllocationType == 'CI') & (cost_df.CostAllocationCode == map_app.ApplicationName_upper), how='left').drop('ApplicationName_upper')\r\n",
					"    cost_df = joined_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('OperationalWBS')).otherwise(F.col('ActiveWBS')))\r\n",
					"    \r\n",
					"    # Alternative 1 remove \"AppID\" \r\n",
					"    cost_df = cost_df.drop('ApplicationName', 'OperationalWBS')\r\n",
					"\r\n",
					"    # When ActiveWBS value is string 'TOBESPECIFIED', we replace the value with None. # Why this ActiveWBS have TOBSPECIFIED value? \r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.upper(F.col('ActiveWBS')) == 'TOBESPECIFIED', F.lit(None)).otherwise(F.col('ActiveWBS')))\r\n",
					"\r\n",
					"    # When Subscriptions are not attached to the costs (unassigned), we fill the values with Unassigned and state the ActiveWBSReason.\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned')).otherwise(F.col('ActiveWBS')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned Subscription, possibly unused RI/SP')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    # Now that we have filled in most places in ActiveWBS, if the rest of ActiveWBS is Null, then we apply the CostCenter WBS\r\n",
					"    # When CostAllocationType is null, we fill it with the value from SubscriptionWBS\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBS').isNull() & (F.col('CostAllocationType') == 'APPID'), F.lit('AppID CostAllocationCode Invalid or Missing')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBS').isNull() & (F.col('CostAllocationType') == 'CI'), F.lit('CI CostAllocationCode Invalid or Missing')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('ActiveWBS').isNull(), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('CostCenter')).otherwise(F.col('ActiveWBS'))) # Cost Center is identical to SubscriptionWBS. So we can remove subscription.json.\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(~F.col('CostAllocationType').isin(validCostAllocationType), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('CostAllocationType').isNull(), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType'))) #  Can be removed.\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBSReason').isNull() & (F.col('CostAllocationType') == 'SubscriptionWBS'), F.lit('No valid AppID, WBS or CI')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    \r\n",
					"\r\n",
					"    # When CostAllocationType is a specific string, we fill/replace the value in ActiveWBSReason \r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'CI', F.lit('CI WBS Lookup from SNOW')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'APPID', F.lit('AppID WBS Lookup from SNOW')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'WBS', F.lit('WBS Cost Tag used')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.upper(F.col('ActiveWBS')))\r\n",
					"\r\n",
					"    # For cases that where CostAllocationCode is empty, we will use AppID from SerivceNow and Application from Subscription.json to replace.\r\n",
					"    mask3 = (F.col('CostAllocationType').isin(['APPID']) & F.col('CostAllocationCode').isNull())\r\n",
					"    mask4 = (F.col('CostAllocationType').isin(['CI']) & F.col('CostAllocationCode').isNull())\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.when(mask3, F.col('AppID')) \\\r\n",
					"                                                       .when(mask4, F.col('SubscriptionServiceNow-App')) \\\r\n",
					"                                                       .otherwise(F.col('CostAllocationCode'))).drop('AppID')\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_application_names(cost_df, application_df):\r\n",
					"\r\n",
					"    # Masks for CI and AppID\r\n",
					"    ci_mask = F.col('CostAllocationType') == 'CI'\r\n",
					"    appid_mask = F.col('CostAllocationType') == 'APPID'\r\n",
					"\r\n",
					"    # When AppID is present, we use the application name from the Service-Now Application list\r\n",
					"    # First convert AppID to a string, then select the desired columns\r\n",
					"    map_app = application_df.withColumn('AppID', F.col('AppID').cast(T.StringType())).select('AppID', 'ApplicationName')\r\n",
					"\r\n",
					"    # Apply case insensitivity merge by creating upper case columns\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode_upper',F.upper(F.col('CostAllocationCode')))\r\n",
					"    map_app = map_app.withColumn('ApplicationName_upper',F.upper(F.col('ApplicationName')))\r\n",
					"\r\n",
					"    # Merge CostAllocationCode on APPID\r\n",
					"    cost_df = cost_df.join(map_app, cost_df.CostAllocationCode_upper == map_app.AppID, how='left')\r\n",
					"\r\n",
					"    # Make copy of service now app list for second merge\r\n",
					"    map_app_copy = map_app.alias('map_app_copy').withColumnRenamed('AppID', 'NewAppID').withColumnRenamed('ApplicationName_upper', 'NewApplicationName_upper').withColumnRenamed('ApplicationName', 'NewApplicationName')\r\n",
					"\r\n",
					"    # Merge CostAllicationCode on ApplicationName copy\r\n",
					"    cost_df = cost_df.join(map_app_copy, cost_df.CostAllocationCode_upper == map_app_copy.NewApplicationName_upper, how='left')\r\n",
					"\r\n",
					"    # Populate original AppId and ApplicationName columns from the copied columns\r\n",
					"    cost_df = cost_df.withColumn('AppID', F.when(F.col('AppID').isNull(), F.col('NewAppID')).otherwise(F.col('AppID')))\r\n",
					"    cost_df = cost_df.withColumn('ApplicationName', F.when(F.col('ApplicationName').isNull(), F.col('NewApplicationName')).otherwise(F.col('ApplicationName')))\r\n",
					"\r\n",
					"    cost_df = cost_df.drop('CostAllocationCode_upper', 'ApplicationName_upper', 'NewAppID', 'NewApplicationName_upper', 'NewApplicationName')\r\n",
					"\r\n",
					"    # Create Application_Name column based on Application from ServiceNow to start with.\r\n",
					"    cost_df = cost_df.withColumn('Application_Name',F.col('ApplicationName'))\r\n",
					"\r\n",
					"    # Resolve CostAllocationCode and CostAllocationType typo by replacing Application_name with SubscriptionServiceNow-App value \r\n",
					"    cost_df = cost_df.withColumn('Application_Name',F.when((F.col('CostAllocationType') == 'APPID') & F.col('CostAllocationCode').cast('int').isNull(),F.col('SubscriptionServiceNow-App'))\\\r\n",
					"                                                    .when((F.col('CostAllocationType') == 'CI') & F.col('CostAllocationCode').cast('int').isNotNull(),F.col('SubscriptionServiceNow-App')).otherwise(F.col('Application_Name')))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('Application_Name',F.when(((F.col('CostAllocationType') == \"SubscriptionWBS\") | (F.col('CostAllocationType') == \"WBS\"))&(F.col('Application_Name').isNull()),F.col('SubscriptionServiceNow-App'))\\\r\n",
					"                                                     .otherwise(F.col('Application_Name')))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('Application_Name_upper',F.upper(F.col('Application_Name')))\r\n",
					"    map_app = map_app.withColumn('ServiceNowApplicationName_upper',F.upper(F.col('ApplicationName')))\r\n",
					"    map_app = map_app.withColumn('ServiceNowAppID',F.col('AppID')).drop('AppID')\r\n",
					"\r\n",
					"    # Lookup application in ServiceNow. Those applications that can be found will be merged.\r\n",
					"    cost_df = cost_df.join(map_app,cost_df.Application_Name_upper==map_app.ServiceNowApplicationName_upper,how='left')\r\n",
					"\r\n",
					"    # Fill empty AppID with AppID from ServiceNow\r\n",
					"    cost_df = cost_df.withColumn('AppID',F.when(F.col('AppID').isNull(),F.col('ServiceNowAppID'))\\\r\n",
					"                                          .otherwise(F.col('AppID'))) \r\n",
					"\r\n",
					"    # Remove unused Columns\r\n",
					"    cost_df = cost_df.drop('Application_Name_upper','ApplicationName','ServiceNowAppID','ServiceNowApplicationName_upper','ApplicationName_upper')\r\n",
					"\r\n",
					"\r\n",
					"    # Application Name will be \"Application not defined or not found\" when SubscriptionServiceNow-App is equal to Application_name as well as AppID is empty.\r\n",
					"    # This indicates that application from subscription.json file can not be found in ServiceNow. One of Application example is DATAHUB - MARKETING AND SUPPLY, not found in ServiceNow.\r\n",
					"    cost_df = cost_df.withColumn('Application_Name', F.when((F.upper(F.col('SubscriptionServiceNow-App'))==F.upper(F.col('Application_Name'))) & (F.col('AppID').isNull()),F.lit('Application not defined or not found'))\\\r\n",
					"                                                    .otherwise(F.col('Application_Name')))\r\n",
					"\r\n",
					"    # For anything that left ApplicationName will be \"Application not defined or not found\" and For anything that left AppID will be 0.\r\n",
					"    cost_df = cost_df.na.fill({'AppID': 0, 'Application_Name': 'Application not defined or not found'})\r\n",
					"\r\n",
					"    return cost_df\r\n",
					""
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_ai_column(cost_df):\r\n",
					"\r\n",
					"    warnings.simplefilter(action='ignore', category=FutureWarning)\r\n",
					"    cost_df = populate_columns(cost_df)\r\n",
					"    cost_df = extend_additional_info(cost_df)\r\n",
					"    cost_df = AHB_column(cost_df)\r\n",
					"    cost_df = instance_name(cost_df)\r\n",
					"    \r\n",
					"    return cost_df"
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def populate_wbs_columns(cost_df, subscription_df, application_df):\r\n",
					"\r\n",
					"    cost_df = expand_cost_tags(cost_df)\r\n",
					"\r\n",
					"    cost_df = cost_df.join(subscription_df, cost_df.SubscriptionId == subscription_df.SubscriptionId, how='left')\r\n",
					"    cost_df = cost_df.drop('SubscriptionId')\r\n",
					"\r\n",
					"    cost_df = replace_empty_cost_fields_with_subscription_details(cost_df, application_df)\r\n",
					"    print('WBS population complete. Populating application names')\r\n",
					"    cost_df = get_application_names(cost_df, application_df)    \r\n",
					"    print('App-name population complete')\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_output_file(cost_df, destinationFilename):\n",
					"\n",
					"    cost_df = cost_df.drop('id', 'AdditionalInfo') \n",
					"    print('start to write to container')\n",
					"    cost_df.write.format('parquet').mode('overwrite').option('path', destinationFilename).save()\n",
					"    print('File write complete!')"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"print(f'fromDate: {fromDate}')\n",
					"print(f'toDate: {toDate}')\n",
					"reportTypes = ['ActualCost', 'AmortizedCost']\n",
					"year = toDate[:4]\n",
					"month = toDate[4:6]\n",
					"day = toDate[6:]\n",
					"\n",
					"print(f\"------ From: {fromDate}, To: {toDate} -----------\")\n",
					"\n",
					"for reportType in reportTypes:\n",
					"\n",
					"    print(f\"------ {reportType} -----------\")\n",
					"\n",
					"    sourceCostPath = 'exports/monthly/ACMMonthly' + reportType + '/'\n",
					"\n",
					"    longToDate = f'{toDate[0:4]}-{toDate[4:6]}-{toDate[6:]}'\n",
					"    print(f'longToDate: {longToDate}')\n",
					"    dateRange = fromDate + '-' + toDate\n",
					"    print(f'dateRange: {dateRange}')\n",
					"\n",
					"    costSourcefilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + sourceCostPath + dateRange + '/ACMMonthly' + reportType + '_' + dateRange + '.parquet'\n",
					"    costDestinationfilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + sourceCostPath + dateRange + '/Extended_v3_ACMMonthly' + reportType + '_' + dateRange + '.parquet'\n",
					"    \n",
					"    if str(longToDate) < '2021-11-30':\n",
					"        print(f'Using default 2021-11-30 subscription json file')\n",
					"        solum_subscription_path = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/subscriptions/subscriptions_2021-11-30.json'\n",
					"    else:\n",
					"        print(f'Using {longToDate} subscription json file')\n",
					"        solum_subscription_path = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/subscriptions/subscriptions_' + longToDate + '.json'\n",
					"\n",
					"    servicenow_subscription_path = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/subscriptions/servicenow/' + longToDate + '-optimized.json'\n",
					"\n",
					"    try:\n",
					"        subscription_df = load_and_process_servicenow_subscriptions(servicenow_subscription_path)\n",
					"    except:\n",
					"        subscription_df = load_and_process_solum_subscriptions(solum_subscription_path)\n",
					"\n",
					"    application_path = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/applications/ServiceNow-Application-List-Extended.parquet'\n",
					"\n",
					"    cost_df = load_parquet(costSourcefilename)\n",
					"    application_df = load_and_process_applications(application_path)\n",
					"\n",
					"    cost_df = expand_ai_column(cost_df)\n",
					"    cost_df = populate_wbs_columns(cost_df, subscription_df, application_df)\n",
					"    # write_output_file(cost_df, costDestinationfilename)\n",
					"    print(' ')"
				],
				"execution_count": 76
			}
		]
	}
}