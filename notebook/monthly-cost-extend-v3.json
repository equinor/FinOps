{
	"name": "monthly-cost-extend-v3",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/Cost Extension"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "5dcd38ae-dc95-495f-9c27-28a376d83831"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Initialize script"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"toDate = '20240131'\n",
					"fromDate = '20240101'\n",
					"container = 'usage'\n",
					"storageAccount = 's037costmgmt'\n",
					"reportType = 'AmortizedCost'"
				],
				"execution_count": 113
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\n",
					"import pyspark.pandas as ps\n",
					"import json\n",
					"import numpy as np\n",
					"from datetime import datetime\n",
					"import calendar\n",
					"import warnings\n",
					"\n",
					"import pyspark.sql.functions as F\n",
					"import pyspark.sql.types as T"
				],
				"execution_count": 114
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load utility functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /cost-extend-utilities"
				],
				"execution_count": 115
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def load_and_process_solum_subscriptions(subscription_path):\r\n",
					"\r\n",
					"    subscription_df = spark.read.json(subscription_path)\r\n",
					"    subscription_df = subscription_df.withColumnRenamed('id', 'SubId')\r\n",
					"    subscription_df = subscription_df.withColumn('id', F.monotonically_increasing_id())\r\n",
					"\r\n",
					"    try:\r\n",
					"        subscription_df = subscription_df.withColumn('tags', F.from_json(F.col('tags')))\r\n",
					"    except:\r\n",
					"        print('Already a json file')\r\n",
					"\r\n",
					"    # Expanding the tags list into separate columns\r\n",
					"    subscription_df = subscription_df.withColumn('SubscriptionWBS', F.col('tags.WBS'))\r\n",
					"    subscription_df = subscription_df.withColumn('SubscriptionServiceNow-App', F.col('tags.ServiceNow-App'))\r\n",
					"    subscription_df = subscription_df.drop('tags')\r\n",
					"\r\n",
					"    # Dropping unnecessary columns and setting the schema\r\n",
					"    columns_to_keep = ['SubId', 'SubscriptionWBS', 'SubscriptionServiceNow-App']\r\n",
					"    subscription_df = subscription_df.select(columns_to_keep)\r\n",
					"\r\n",
					"    return subscription_df\r\n",
					"\r\n",
					"def load_and_process_servicenow_subscriptions(subscription_path):\r\n",
					"    subscription_df = spark.read.format('parquet').load(subscription_path)\r\n",
					"    subscription_df = subscription_df.select('SubscriptionId', 'OperationalWBS', 'Application')\r\n",
					"    subscription_df = subscription_df.withColumnRenamed('SubscriptionId', 'SubId')\r\n",
					"    subscription_df = subscription_df.withColumnRenamed('OperationalWBS', 'SubscriptionWBS')\r\n",
					"    subscription_df = subscription_df.withColumnRenamed('Application', 'SubscriptionServiceNow-App')\r\n",
					"    return subscription_df\r\n",
					"\r\n",
					"def load_and_process_applications(application_path):\r\n",
					"    application_df = spark.read.format('parquet').load(application_path)\r\n",
					"    application_df = application_df.withColumn('AppID', F.col('AppID').cast(\"int\"))\r\n",
					"    return application_df"
				],
				"execution_count": 116
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_output_file(cost_df, destinationFilename):\n",
					"\n",
					"    cost_df = cost_df.drop('id', 'AdditionalInfo') \n",
					"    print('start to write to container')\n",
					"    cost_df.write.format('parquet').mode('overwrite').option('path', destinationFilename).save()\n",
					"    print('File write complete!')"
				],
				"execution_count": 117
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Execute transformation on cost data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"print(f'fromDate: {fromDate}')\n",
					"print(f'toDate: {toDate}')\n",
					"\n",
					"print(f\"------ From: {fromDate}, To: {toDate} -----------\")\n",
					"\n",
					"print(f\"------ {reportType} -----------\")\n",
					"formatted_to_date = f'{toDate[0:4]}-{toDate[4:6]}-{toDate[6:]}'\n",
					"formatted_to_date = '2021-11-30' if str(formatted_to_date) < '2021-11-30' else formatted_to_date\n",
					"\n",
					"print(f'longToDate: {formatted_to_date}')\n",
					"date_range = fromDate + '-' + toDate\n",
					"print(f'dateRange: {date_range}')\n",
					"\n",
					"cost_source_path = f'abfss://{container}@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthly{reportType}/{date_range}/ACMMonthly{reportType}_{date_range}.parquet'\n",
					"cost_target_path = f'abfss://{container}@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthly{reportType}/{date_range}/Extended_v3_ACMMonthly{reportType}_{date_range}.parquet'\n",
					"\n",
					"# Load pricesheet data\n",
					"pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/portal-export/pricesheet-converted/{date_range}.parquet'\n",
					"try:\n",
					"    pricesheet_df = spark.read.format('parquet').load(pricesheet_path)\n",
					"except:\n",
					"    # Create empty df with pricesheet schema if file doesnt exist\n",
					"    dummy_pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/portal-export/pricesheet-converted/20240101-20240131.parquet'\n",
					"    dummy_df = spark.read.format('parquet').load(dummy_pricesheet_path)\n",
					"    pricesheet_df = spark.createDataFrame([], dummy_df.schema)\n",
					"\n",
					"# Load subcsription data\n",
					"solum_subscription_path = f'abfss://{container}@{storageAccount}.dfs.core.windows.net/subscriptions/subscriptions_{formatted_to_date}.json'\n",
					"servicenow_subscription_path = f'abfss://{container}@{storageAccount}.dfs.core.windows.net/subscriptions/servicenow/{formatted_to_date}-optimized.parquet'\n",
					"\n",
					"try:\n",
					"    subscription_df = load_and_process_servicenow_subscriptions(servicenow_subscription_path)\n",
					"except:\n",
					"    subscription_df = load_and_process_solum_subscriptions(solum_subscription_path)\n",
					"\n",
					"# Load service file\n",
					"service_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/services/services-raw.csv'\n",
					"service_csv_options = {'header' : True,\n",
					"                'delimiter' : ',',\n",
					"                'quote' : '\"',\n",
					"                'escape' : '\"'}\n",
					"service_df = spark.read.options(**service_csv_options).csv(service_path)\n",
					"\n",
					"# Load application data\n",
					"application_path = f'abfss://{container}@{storageAccount}.dfs.core.windows.net/applications/processed'\n",
					"application_df = load_and_process_applications(application_path)\n",
					"\n",
					"# Process cost data\n",
					"cost_df = spark.read.format('parquet').load(cost_source_path)\n",
					"cost_df = transform_cost_data(cost_df)\n",
					"cost_df = combine_subscriptions_and_applications(cost_df, subscription_df, application_df)\n",
					"cost_df = compute_hub_and_sp(cost_df, pricesheet_df)\n",
					"cost_df = add_azure_service_information(cost_df, service_df)\n",
					"write_output_file(cost_df, cost_target_path)\n",
					"print(' ')"
				],
				"execution_count": 118
			}
		]
	}
}