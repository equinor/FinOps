{
	"name": "process-plant-wbs",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/SAP"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "6abc24b4-8bf6-48f6-b294-9ed214968019"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"year = '2024'\r\n",
					"month = '10'"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load raw WBS ingested from plant db"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"wbs_df = spark.read.format('parquet').load(f'abfss://usage@s037costmgmt.dfs.core.windows.net/sap/{year}/{month}/WBS-raw.parquet')"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Select desired columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"wbs_df = wbs_df.select(\r\n",
					"    'wbsId', \r\n",
					"    'code', \r\n",
					"    'description', \r\n",
					"    'activeStatusIds', \r\n",
					"    'createdDate', \r\n",
					"    'modifiedDate', \r\n",
					"    'taskResponsibleEmployeeID',\r\n",
					"    'taskResponsibleShortName'\r\n",
					")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Determine activity status"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"wbs_df = wbs_df.withColumn('IsActive', \r\n",
					"    F.when(F.col('activeStatusIds').contains('TECO'), False)\r\n",
					"    .when(F.col('activeStatusIds').contains('CLSD'), False)\r\n",
					"    .when(F.col('activeStatusIds').contains('AALK'), False)\r\n",
					"    .when(F.col('activeStatusIds').contains('LKD'), False)\r\n",
					"    .when(F.col('activeStatusIds').contains('WBS3'), False)\r\n",
					"    .when(F.col('activeStatusIds').contains('WBS2'), False)\r\n",
					"    .otherwise(True)\r\n",
					")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Rename columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"wbs_df = wbs_df.withColumnRenamed('wbsId', 'WBSID')\r\n",
					"wbs_df = wbs_df.withColumnRenamed('code', 'WBS')\r\n",
					"wbs_df = wbs_df.withColumnRenamed('description', 'Description')\r\n",
					"wbs_df = wbs_df.withColumnRenamed('activeStatusIds', 'ActiveStatusIds')\r\n",
					"wbs_df = wbs_df.withColumnRenamed('createdDate', 'CreatedDate')\r\n",
					"wbs_df = wbs_df.withColumnRenamed('modifiedDate', 'ModifiedDate')\r\n",
					"wbs_df = wbs_df.withColumnRenamed('taskResponsibleShortName', 'WBSOwnerShortName')\r\n",
					"wbs_df = wbs_df.withColumnRenamed('taskResponsibleEmployeeID', 'WBSOwnerEmployeeID')"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Remove WBS value duplicates"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"wbs_df = wbs_df.orderBy(F.desc('CreatedDate'))\r\n",
					"wbs_df = wbs_df.dropDuplicates(subset=[\"WBS\"])"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Assign null values when WBS Owner doesn't exist"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"wbs_df = wbs_df.withColumn('WBSOwnerEmployeeID', F.when(F.col('WBSOwnerEmployeeID') == '00000000', None).otherwise(F.col('WBSOwnerEmployeeID')))\r\n",
					"wbs_df = wbs_df.withColumn('WBSOwnerShortName', F.when(F.col('WBSOwnerShortName') == '', None).otherwise(F.col('WBSOwnerShortName')))"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Save transformed file in adls storage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"target_path = f\"abfss://usage@s037costmgmt.dfs.core.windows.net/sap/{year}/{month}/WBS.parquet\"\r\n",
					"wbs_df.write.format('parquet').mode('overwrite').save(target_path)"
				],
				"execution_count": 10
			}
		]
	}
}