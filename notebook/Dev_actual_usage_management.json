{
	"name": "Dev_actual_usage_management",
	"properties": {
		"description": "\n",
		"folder": {
			"name": "tsc/dev"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "c0b190fb-2efa-437f-a7b0-c00a3a6e9156"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Install older version of pandas to avoid any mismatch issue"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# spark.conf.set(\"spark.sql.execution.arrow.pyspark.enabled\", \"false\")\r\n",
					"%pip install -U pandas==1.5.3"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd \r\n",
					"import pyspark.pandas as ps\r\n",
					"from pyspark.sql import functions as F\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import StructType\r\n",
					"import pandas as pd\r\n",
					"from pyspark.sql.functions import lit"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load the data"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Display data with different schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define path\r\n",
					"path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/20190301-20190331/ACMMonthlyActualCost_20190301-20190331.parquet\"\r\n",
					"\r\n",
					"# Load the data schema 55 cols\r\n",
					"df_schema1 = spark.read.format(\"parquet\").load(path)#.toPandas()\r\n",
					"df_schema1 = df_schema1.withColumn('Report_Date', lit(''))"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define path\r\n",
					"path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/20210101-20210131/Extended_ACMMonthlyActualCost_20210101-20210131.parquet\"\r\n",
					"# Load the data schema 75 cols\r\n",
					"#df_schema2 = spark.read.format(\"parquet\").load(path)#.toPandas()"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define path\r\n",
					"\r\n",
					"path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/20220401-20220430/Extended_ACMMonthlyActualCost_20220401-20220430.parquet\"\r\n",
					"# Load the data schema 76 cols\r\n",
					"#df_schema3 = spark.read.format(\"parquet\").load(path)#.toPandas()"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Count number of columns\r\n",
					"#len(df_schema1.columns)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load all ACMMonthlyActualCost data and append to one dataframe."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import pandas as pd\r\n",
					"from pyspark.sql.functions import lit\r\n",
					"# Create a SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Define an empty schema\r\n",
					"schema = df_schema1.schema\r\n",
					"\r\n",
					"# Create an empty DataFrame with the specified schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"root_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost\"\r\n",
					"folders = mssparkutils.fs.ls(root_path)\r\n",
					"\r\n",
					"for folder in folders:\r\n",
					"    file_paths = mssparkutils.fs.ls(root_path +'/'+ str(folder.name))\r\n",
					"\r\n",
					"    for file_path in file_paths:\r\n",
					"        if '.parquet' in file_path.name:\r\n",
					"            try:\r\n",
					"                date = pd.to_datetime(folder.path.split('/')[-1].split('-')[0],format=\"%Y/%m/%d\")\r\n",
					"                df_temp = spark.read.format(\"parquet\").load(file_path.path)\r\n",
					"                df_temp= df_temp.withColumn('Report_Date', lit(date))\r\n",
					"                #df_temp = df_temp.withColumn('Report_Date', lit(date))\r\n",
					"                df = df.union(df_temp)\r\n",
					"                \r\n",
					"            except Exception as e:\r\n",
					"                print(\"The data can not be read\",file_path.path)\r\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.count()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Research possibilities for aggregating"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as F\r\n",
					"df_agg = df.groupBy('SubscriptionId','SubscriptionName','CostCenter','ResourceGroup','ResourceLocation','ResourceName','MeterName','MeterCategory','MeterSubCategory','Report_Date','Date').agg(F.sum('Quantity').alias('Total quantity'),F.sum('CostInBillingCurrency').alias('Cost in Kroner'))"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Change columns' name\r\n",
					"df_agg = df_agg.withColumnRenamed(\"Total quantity\", \"TotalQuantity\").withColumnRenamed(\"Cost in kroner\", \"CostInKroner\")"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_agg)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_agg.count() #original is 145873147 -12591043 123 984 301 = 133282104"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Save it to optimized container"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"optimized_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/partition_aggregate/parquet/ACMMonthlyActualCost_Aggregated_overview.parquet\" \r\n",
					"#optimized_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/aggregate/parquet/ACMMonthlyActualCost_Aggregated_overview.parquet\" \r\n",
					"###df.repartition(1).write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(optimized_path)\r\n",
					"# df_agg.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(optimized_path)\r\n",
					"#Try partition by time\r\n",
					"df_agg.write.format('parquet').mode('overwrite').partitionBy('Report_Date').option('overwriteSchema', 'true').save(optimized_path)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Clear caches in Spark session"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"currentSparkSession = SparkSession.builder.getOrCreate()\r\n",
					"spark.catalog.clearCache()"
				],
				"execution_count": 2
			}
		]
	}
}