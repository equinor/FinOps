{
	"name": "Daily Extend AI column and WBS tags_v1_Copy1",
	"properties": {
		"folder": {
			"name": "jomt"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "b018f7f3-bf4f-4efb-9cb6-6d3f86194d75"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"#amortizedCostPath = 'exports/daily/ACMDailyAmortizedCost/'\n",
					"amortizedCostPath = 'exports/monthly/ACMMonthlyAmortizedCost/'\n",
					"#actualCostPath = 'exports/daily/ACMDailyActualCost/'\n",
					"toDate = '20230930'\n",
					"fromDate = '20230901'\n",
					"container = 'usage'"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\n",
					"import pyspark.pandas as ps\n",
					"import json\n",
					"import numpy as np\n",
					"from datetime import datetime\n",
					"import calendar\n",
					"import warnings\n",
					"import re\n",
					"\n",
					"import pyspark.sql.functions as F\n",
					"import pyspark.sql.types as T"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def load_source_files(path, subscription_path, appListPath):\r\n",
					"    \r\n",
					"    csv_options = {'header' : True,\r\n",
					"                   'delimiter' : ',',\r\n",
					"                   'quote' : '\"',\r\n",
					"                   'escape' : '\"'}\r\n",
					"\r\n",
					"    print(f'Loading Cost file list - {path}')\r\n",
					"    cost_df = spark.read.options(**csv_options).csv(path)\r\n",
					"    print(f\"Cost file contains: {cost_df.count()} rows\")\r\n",
					"    \r\n",
					"    \r\n",
					"    print(f'Loading Subscription list - {subscription_path}...')\r\n",
					"    subscription_list = spark.read.json(subscription_path)\r\n",
					"    print(f\"Subscription file contains: {subscription_list.count()} rows\")\r\n",
					"\r\n",
					"    print(f'Loading SNOW application list - {appListPath}...')\r\n",
					"    appList = spark.read.format('parquet').load(appListPath)\r\n",
					"    print(f'App list contains: {appList.count()}')\r\n",
					"\r\n",
					"    return cost_df, subscription_list, appList"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def populate_columns(cost_df):\r\n",
					"\r\n",
					"    # Populating the Azure Hybrid Benefit Column\r\n",
					"    cost_df = cost_df.withColumn('Azure_Hybrid_Benefit', F.when(F.col('MeterSubCategory').contains('Windows'), \"Not Enabled\")\\\r\n",
					"                                                         .when(F.col('ServiceInfo2') == 'Windows Server BYOL', \"Enabled\")\\\r\n",
					"                                                         .otherwise('Not Supported'))\r\n",
					"\r\n",
					"    # Populating the isRIUsage Column\r\n",
					"    cost_df = cost_df.withColumn('IsRIUsage',\r\n",
					"                                 F.when(F.col('ReservationId').isNull(), 'On Demand Usage')\\\r\n",
					"                                  .otherwise('RI Usage'))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def extend_additional_info(cost_df):\r\n",
					"    # Extend AdditionalInfo Column\r\n",
					"    cost_df = cost_df.withColumn('AdditionalInfo', F.from_json('AdditionalInfo', 'map<string,string>', options={'inferSchema': 'true'}))\r\n",
					"\r\n",
					"    # Creating an ID column\r\n",
					"    cost_df = cost_df.withColumn('id', F.monotonically_increasing_id())\r\n",
					"\r\n",
					"    # Creating a list of columns we want to keep\r\n",
					"    cols_to_keep = [\"UsageType\", \r\n",
					"                    \"ImageType\",\r\n",
					"                    \"ServiceType\",\r\n",
					"                    \"VMName\",\r\n",
					"                    \"VMProperties\",\r\n",
					"                    \"VCPUs\",\r\n",
					"                    \"AHB\",\r\n",
					"                    \"vCores\",\r\n",
					"                    \"RINormalizationRatio\",\r\n",
					"                    \"ConsumedQuantity\",\r\n",
					"                    \"DatabaseName\"]\r\n",
					"\r\n",
					"    for col in cols_to_keep:\r\n",
					"        cost_df = cost_df.withColumn('ai_' + col, F.coalesce(F.col(f'AdditionalInfo.{col}'), F.lit(None)))\r\n",
					"    return cost_df"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def AHB_column(cost_df):\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ai_VCPUs', F.col('ai_VCPUs').cast('int'))\r\n",
					"    cost_df = cost_df.na.fill({'ai_VCPUs' : 0})\r\n",
					"    cost_df = cost_df.withColumn('AHB_CPUs', F.when(F.col('ai_VCPUs') == 0, 0)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') < 8, 8)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') < 16, 16)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') == 20, 24)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') > 20, F.col('ai_VCPUs'))\\\r\n",
					"                                              .otherwise(0))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def instance_name(cost_df):\r\n",
					"\r\n",
					"    # cost_df = cost_df.withColumnRenamed('ai_VMName', 'ai_Container_VMName')\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('Instance_Name', F.when(F.col('ai_VMName').isNull(), F.col('ResourceName'))\\\r\n",
					"                                                   .when(F.col('ai_VMName').isNotNull(), F.col('ai_VMName'))\\\r\n",
					"                                                   .otherwise(0))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('UnitPrice', F.col('UnitPrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('PayGPrice', F.col('PayGPrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('Quantity', F.col('Quantity').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('EffectivePrice', F.col('EffectivePrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('CostInBillingCurrency', F.col('CostInBillingCurrency').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('Date', F.to_date(F.col('Date'), 'MM/dd/yyyy'))\\\r\n",
					"                     .withColumn('BillingPeriodStartDate', F.to_date(F.col('BillingPeriodStartDate'), 'MM/dd/yyyy'))\\\r\n",
					"                     .withColumn('BillingPeriodEndDate', F.to_date(F.col('BillingPeriodEndDate'), 'MM/dd/yyyy'))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_subscription_tags(subscription_list):\r\n",
					"\r\n",
					"    print('Expanding the SubscriptionWBS and SubscriptionServiceNow-App fields from the subscription list Tags field into their own fields...')\r\n",
					"        \r\n",
					"    subscription_list = subscription_list.withColumnRenamed('id', 'SubId')\r\n",
					"    subscription_list = subscription_list.withColumn('id', F.monotonically_increasing_id())\r\n",
					"\r\n",
					"    try:\r\n",
					"        subscription_list = subscription_list.withColumn('tags', F.from_json(F.col('tags')))\r\n",
					"    except:\r\n",
					"        print('Already a json file')\r\n",
					"\r\n",
					"    # Expanding the tags list into separate columns\r\n",
					"    subscription_list = subscription_list.withColumn('SubscriptionWBS', F.col('tags.WBS'))\r\n",
					"    subscription_list = subscription_list.withColumn('SubscriptionServiceNow-App', F.col('tags.ServiceNow-App'))\r\n",
					"    subscription_list = subscription_list.drop('tags')\r\n",
					"\r\n",
					"    # Dropping unnecessary columns and setting the schema\r\n",
					"    columns_to_keep = ['SubId', 'SubscriptionWBS', 'SubscriptionServiceNow-App']\r\n",
					"    subscription_list = subscription_list.select(columns_to_keep)\r\n",
					"\r\n",
					"    return subscription_list"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def merge_dataframes(cost_df, subscription_list):\r\n",
					"    \r\n",
					"    cost_df = cost_df.join(subscription_list, cost_df.SubscriptionId == subscription_list.SubId, how='left')\r\n",
					"    cost_df = cost_df.drop('SubId')\r\n",
					"\r\n",
					"    return cost_df, subscription_list"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_cost_tags(cost_df):\r\n",
					"    \r\n",
					"    # Storing the Tags column in a new column, and cleaning it up to fit with CostAllocationType\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.regexp_extract(F.col('Tags'), 'CostAllocationType\": \"(.*)\"', 0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.regexp_replace(F.col('CostAllocationType'), 'CostAllocationType\": \"', \"\"))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.split(F.col('CostAllocationType'),'\"', 0).getItem(0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('CostAllocationType') == \"\", None).otherwise(F.col('CostAllocationType')))\r\n",
					"\r\n",
					"    # Storing the Tags column in a new column, and cleaning it up to fit with CostAllocationCode\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.regexp_extract(F.col('Tags'), 'CostAllocationCode\": \"(.*)\"', 0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.regexp_replace(F.col('CostAllocationCode'), 'CostAllocationCode\": \"', \"\"))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.split(F.col('CostAllocationCode'),'\"', 0).getItem(0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.when(F.col('CostAllocationCode') == \"\", None).otherwise(F.col('CostAllocationCode')))\r\n",
					"    \r\n",
					"    print(\"Cost Tags expansion complete\")\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def replace_empty_cost_fields_with_subscription_details(cost_df, appList):\r\n",
					"    print(\"Creating ActiveWBS column, copying over CostAllocationCode, replacing 'TOBESPECIFIED' and empty values then filling gaps with SubscriptionWBS...\")\r\n",
					"\r\n",
					"    # Apply Upper-case for all CostAllocationTypes and Codes\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.upper(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.upper(F.col('CostAllocationCode')))\r\n",
					"\r\n",
					"    # When the tag does not contain CostAllocationCode or CostAllocationType, then we fill/replace the value in ActiveWBSReason\r\n",
					"    mask1 = F.col('CostAllocationCode').isNull() | F.col('CostAllocationType').isNull()\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(mask1, F.lit('CostAllocationType or CostAllocationCode not present in Tags')))\r\n",
					"\r\n",
					"    # When either value in mask appears in AcitveWBS, add invalid reason in new column\r\n",
					"    mask2 = ['WBS', 'APPID', 'CI', 'SubscriptionWBS']\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(~F.col('CostAllocationType').isin(mask2), F.lit('Invalid CostAllocationType: not APPID, CI or WBS')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    # When the values in the columns below match the mask and the cost type is WBS, then:\r\n",
					"    # regex pattern states that the string should start with a case insensitive letter, followed by a dot, followed by either letters, numbers or dots\r\n",
					"    pattern = r'^[a-zA-Z]\\.[a-zA-Z0-9.]+$'\r\n",
					"    rmask = F.col('CostAllocationCode').rlike(pattern)\r\n",
					"    cost_wbs = (F.col('CostAllocationType') == 'WBS')\r\n",
					"\r\n",
					"    # Applying valid WBS' as Active WBS'\r\n",
					"    # 1. Where the CostAllocationCode follows the regex and the CostAllocationType is WBS, we apply the CostAllocationCode\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(cost_wbs & rmask, F.col('CostAllocationCode')))\r\n",
					"    # 2. Where the CostAllocationCode doesn't follow the regex and the CostAllocationType is WBS, we set the ActiveWBSReason to be \"Invalid CostAllocationCode WBS\"\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(cost_wbs & ~rmask, F.lit('Invalid CostAllocationCode WBS')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    # 3. Where the CostAllocationCode doesn't follow the regex and the CostAllocationType is WBS, the CostAllocationType is changed to \"SubscriptionWBS\"\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(cost_wbs & ~rmask, F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"\r\n",
					"    # Applying valid AppIDs as Active WBS'\r\n",
					"    # If the CostAllocationCode is empty, we fill/replace the column ActiveWBS with Operational WBS in the AppList\r\n",
					"    map_app = appList.withColumn('u_number', F.col('u_number').cast(T.StringType())).select('u_number', 'u_operational_wbs')\r\n",
					"    joined_df = cost_df.join(map_app, cost_df.CostAllocationCode == map_app.u_number, how='left')\r\n",
					"    cost_df = joined_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('u_operational_wbs')).otherwise(F.col('ActiveWBS')))\r\n",
					"    cost_df = cost_df.drop('u_operational_wbs')\r\n",
					"\r\n",
					"    # Applying valid CIs as Active WBS'\r\n",
					"    # Same here as above, but we merge the dataframes on names rather than u_number\r\n",
					"    map_app = appList.withColumn('u_number', F.col('u_number').cast(T.StringType())).select('name', 'u_operational_wbs')\r\n",
					"    joined_df = cost_df.join(map_app, cost_df.CostAllocationCode == map_app.name, how='left')\r\n",
					"    cost_df = joined_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('u_operational_wbs')).otherwise(F.col('ActiveWBS')))\r\n",
					"    cost_df = cost_df.drop('name', 'u_operational_wbs', 'u_number')\r\n",
					"    \r\n",
					"    # When ActiveWBS value is string 'TOBESPECIFIED', we replace the value with None\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.upper(F.col('ActiveWBS')) == 'TOBESPECIFIED', F.lit(None)).otherwise(F.col('ActiveWBS')))\r\n",
					"\r\n",
					"    # When Subscriptions are not attached to the costs (unassigned), we fill the values with Unassigned and state the ActiveWBSReason\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned')).otherwise(F.col('ActiveWBS')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned Subscription, possibly unused RI/SP')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    # Now that we have filled in most places in ActiveWBS, if the rest of ActiveWBS is Null, then we apply the CostCenter WBS\r\n",
					"    # When CostAllocationType is null, we fill it with the value from SubscriptionWBS\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBS').isNull() & (F.col('CostAllocationType') == 'APPID'), F.lit('AppID CostAllocationCode Invalid or Missing')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBS').isNull() & (F.col('CostAllocationType') == 'CI'), F.lit('CI CostAllocationCode Invalid or Missing')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('ActiveWBS').isNull(), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('CostCenter')).otherwise(F.col('ActiveWBS')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(~F.col('CostAllocationType').isin(mask2), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('CostAllocationType').isNull(), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBSReason').isNull() & (F.col('CostAllocationType') == 'SubscriptionWBS'), F.lit('No valid AppID, WBS or CI')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    \r\n",
					"\r\n",
					"    # When CostAllocationType is a specific string, we fill/replace the value in ActiveWBSReason \r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'CI', F.lit('CI WBS Lookup from SNOW')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'APPID', F.lit('AppID WBS Lookup from SNOW')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'WBS', F.lit('WBS Cost Tag used')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.upper(F.col('ActiveWBS')))\r\n",
					"\r\n",
					"    # When CostAllocationType is either AppID or CI and CostAllocationCode is empty, then we use the value from ServiceNow \r\n",
					"    mask3 = (F.upper(F.col('CostAllocationType')).isin(['APPID', 'CI']) & F.col('CostAllocationCode').isNull())\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.when(mask3, F.col('SubscriptionServiceNow-App')).otherwise(F.col('CostAllocationCode')))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_application_names(cost_df, appList):\r\n",
					"\r\n",
					"    # Masks for CI and AppID\r\n",
					"    ci_mask = F.col('CostAllocationType') == 'CI'\r\n",
					"    appid_mask = F.col('CostAllocationType') == 'APPID'\r\n",
					"\r\n",
					"    # When AppID is present, we use the application name from the Service-Now Application list\r\n",
					"    # First convert u_number to a string, then select the desired columns\r\n",
					"    map_app = appList.withColumn('u_number', F.col('u_number').cast(T.StringType())).select('u_number', 'name')\r\n",
					"    # Merge the two lists together with a left-join\r\n",
					"    joined_df = cost_df.join(map_app, cost_df.CostAllocationCode == map_app.u_number, how='left')\r\n",
					"    # Select the application name from AppList when AppID is present in the CostAllocationType, then drop the columns from AppList\r\n",
					"    cost_df = joined_df.withColumn('ApplicationName', F.when(appid_mask, F.col('name'))).drop('u_number', 'name')\r\n",
					"\r\n",
					"    # When Cost AllocationType is CI, we apply the CostAllocationCode as Application Name\r\n",
					"    # When neither CI or AppID is present in CostAllocationType, we use the Application Name from the subscription list\r\n",
					"    cost_df = cost_df.withColumn('ApplicationName', F.when(ci_mask, F.col('CostAllocationCode'))\\\r\n",
					"                                                     .when(~ci_mask & ~appid_mask, F.col('SubscriptionServiceNow-App'))\\\r\n",
					"                                                     .otherwise(F.col('ApplicationName')))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ApplicationName', F.upper(F.col('ApplicationName')))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# costSourcefilename = 'abfss://usage@s037costmgmt.dfs.core.windows.net/exports/daily/ACMDailyAmortizedCost/' + fromDate + '-' + toDate + '/*.csv'\r\n",
					"# subscriptionListPath = 'abfss://usage@s037costmgmt.dfs.core.windows.net/subscriptions/subscriptions_2023-07-31.json'\r\n",
					"# appListPath = 'abfss://usage@s037costmgmt.dfs.core.windows.net/applications/applicationList.parquet'\r\n",
					"\r\n",
					"costSourcefilename = 'abfss://usage@s037costmgmt.dfs.core.windows.net/exports/daily/ACMDailyActualCost/' + fromDate + '-' + toDate + '/*.csv'\r\n",
					"subscriptionListPath = 'abfss://usage@s037costmgmt.dfs.core.windows.net/subscriptions/subscriptions_2023-07-31.json'\r\n",
					"appListPath = 'abfss://usage@s037costmgmt.dfs.core.windows.net/applications/applicationList.parquet'\r\n",
					"\r\n",
					"cost_df, subscription_list, appList = load_source_files(costSourcefilename, subscriptionListPath, appListPath)\r\n",
					"cost_df = populate_columns(cost_df)\r\n",
					"cost_df = extend_additional_info(cost_df)\r\n",
					"cost_df = AHB_column(cost_df)\r\n",
					"cost_df = instance_name(cost_df)\r\n",
					"cost_df = expand_cost_tags(cost_df)\r\n",
					"subscription_list = expand_subscription_tags(subscription_list)\r\n",
					"cost_df, subscription_list = merge_dataframes(cost_df, subscription_list)\r\n",
					"cost_df = replace_empty_cost_fields_with_subscription_details(cost_df, appList)\r\n",
					"cost_df = get_application_names(cost_df, appList)\r\n",
					"\r\n",
					"# wbs_mask = (F.col('CostAllocationType') == 'WBS')\r\n",
					"\r\n",
					"# display(cost_df.select('SubscriptionId',\r\n",
					"#                        'CostAllocationCode',\r\n",
					"#                        'CostAllocationType',\r\n",
					"#                        'SubscriptionServiceNow-App',\r\n",
					"#                        'ActiveWBS',\r\n",
					"#                        'ActiveWBSReason').filter(wbs_mask))"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(cost_df.filter((F.col('SubscriptionName') == 'S383-Observability') & (F.col('MeterCategory') == 'Azure Databricks') & (F.col('Date') == F.date_sub(F.current_date(), 2))))"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(cost_df)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# print('ActiveWBS distinct values')\r\n",
					"# display(cost_df.select('ActiveWBS').distinct())\r\n",
					"print('ActiveWBSReason distinct values')\r\n",
					"display(cost_df.select('ActiveWBSReason').distinct())\r\n",
					"print('CostAllocationType distinct values')\r\n",
					"display(cost_df.select('CostAllocationType').distinct())"
				],
				"execution_count": 116
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"mask2 = ['WBS', 'APPID', 'CI', 'SubscriptionWBS']\r\n",
					"pattern = r'^[a-zA-Z][.]\\S*[.]\\S*[.]\\d*'\r\n",
					"\r\n",
					"display(cost_df.filter(F.col('ActiveWBS').isNull())\\\r\n",
					"               .select('SubscriptionName',\r\n",
					"                       'CostAllocationCode',\r\n",
					"                       'CostAllocationType',\r\n",
					"                       'CostCenter',\r\n",
					"                       'ActiveWBS',\r\n",
					"                       'ActiveWBSReason',\r\n",
					"                       'ApplicationName'))"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(cost_df.filter(F.col('CostAllocationType') == 'CI').select('SubscriptionName',\r\n",
					"                                                                   'CostAllocationCode',\r\n",
					"                                                                   'CostAllocationType',\r\n",
					"                                                                   'CostCenter',\r\n",
					"                                                                   'ActiveWBS',\r\n",
					"                                                                   'ActiveWBSReason',\r\n",
					"                                                                   'ApplicationName'))"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_ai_column(cost_df):\r\n",
					"\r\n",
					"    warnings.simplefilter(action='ignore', category=FutureWarning)\r\n",
					"\r\n",
					"    # actualCostSourcefilename = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/' + actualCostPath + dateRange + '/ACMDailyActualCost_' + dateRange + '.parquet'\r\n",
					"    # amortizedCostSourcefilename = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/' + amortizedCostPath + '/' + dateRange + '/ACMDailyAmortizedCost_' + dateRange + '.parquet'\r\n",
					"\r\n",
					"    # actualCostDestinationfilename = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/' + actualCostPath + dateRange + '/Extended_ACMDailyActualCost_' + dateRange + '.parquet'\r\n",
					"    # amortizedCostDestinationfilename = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/' + amortizedCostPath + '/' + dateRange + '/Extended_ACMDailyAmortizedCost_' + dateRange + '.parquet'\r\n",
					"\r\n",
					"    # cost_df = load_source(actualCostSourcefilename)\r\n",
					"    cost_df = populate_columns(cost_df)\r\n",
					"    cost_df = extend_additional_info(cost_df)\r\n",
					"    cost_df = AHB_column(cost_df)\r\n",
					"    cost_df = instance_name(cost_df)\r\n",
					"    \r\n",
					"    return cost_df"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def populate_wbs_columns(cost_df, subscription_list, appList):\r\n",
					"\r\n",
					"    cost_df = expand_cost_tags(cost_df)\r\n",
					"    subscription_list = expand_subscription_tags(subscription_list)\r\n",
					"    cost_df, subscription_list = merge_dataframes(cost_df, subscription_list)\r\n",
					"    cost_df = replace_empty_cost_fields_with_subscription_details(cost_df, appList)\r\n",
					"    cost_df = expand_application_name(cost_df, appList)\r\n",
					"    print('WBS population complete')\r\n",
					"    \r\n",
					"    return cost_df\r\n",
					""
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_output_file(cost_df, destinationFilename):\n",
					"\n",
					"    # Dropping some columns before writing the output\n",
					"    cost_df = cost_df.drop('id', 'AdditionalInfo')\n",
					"    \n",
					"    print(f'Writing output file to: \"{destinationFilename}\"')\n",
					"    print(f'Dataframe length is: {cost_df.count()}')\n",
					"\n",
					"    # Writing the df to the destination path\n",
					"    cost_df.write.format('parquet').mode('overwrite').option('path', destinationFilename).save() # df.coalesce(1) if partition should be 1\n",
					"\n",
					"    print('File write complete!')"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"print(f'fromDate: {fromDate}')\n",
					"print(f'toDate: {toDate}')\n",
					"reportTypes = ['ActualCost', 'AmortizedCost']\n",
					"year = toDate[:4]\n",
					"month = toDate[4:6]\n",
					"day = toDate[6:]\n",
					"\n",
					"print(f\"------ From: {fromDate}, To: {toDate} -----------\")\n",
					"\n",
					"for reportType in reportTypes:\n",
					"\n",
					"    print(f\"------ {reportType} -----------\")\n",
					"\n",
					"    sourceCostPath = 'exports/daily/ACMDaily' + reportType + '/'\n",
					"\n",
					"\n",
					"    longToDate = f'{toDate[0:4]}-{toDate[4:6]}-{toDate[6:]}'\n",
					"    print(f'longToDate: {longToDate}')\n",
					"    dateRange = fromDate + '-' + toDate\n",
					"    print(f'dateRange: {dateRange}')\n",
					"\n",
					"    print(dateRange)\n",
					"    costSourcefilename = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/' + sourceCostPath + dateRange + '/*.csv'\n",
					"    costDestinationfilename = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/' + sourceCostPath + dateRange + '/Extended_ACMMonthly' + reportType + '_' + dateRange + '.parquet'\n",
					"    print(f\"Cost data path: {costSourcefilename}\")\n",
					"    print(f\"Cost destination path: {costDestinationfilename}\")\n",
					"    \n",
					"    if str(longToDate) < '2021-11-30':\n",
					"        print(longToDate)\n",
					"        print(f'Using default 2021-11-30 subscription json file')\n",
					"        subscriptionListPath = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/subscriptions/subscriptions_2021-11-30.json'\n",
					"        print(f\"Subscription path: {subscriptionListPath}\")\n",
					"    \n",
					"    else:\n",
					"        # Converting month string into integer\n",
					"        month_int = int(toDate[4:6])\n",
					"        year_int = int(toDate[:4])\n",
					"\n",
					"        # Getting the last month-value\n",
					"        previous_month = (month_int - 1) if month_int > 1 else 12\n",
					"        previous_year = year_int if month_int > 1 else (year_int - 1)\n",
					"\n",
					"        # Converting it back into a string\n",
					"        previous_month_str = str(previous_month).zfill(2)\n",
					"        previous_year_str = str(previous_year)\n",
					"\n",
					"        # Calculating the last day of the month\n",
					"        last_day = calendar.monthrange(previous_year, previous_month)[1]\n",
					"\n",
					"        # Converting it into a string\n",
					"        last_day_str = str(last_day).zfill(2)\n",
					"\n",
					"        # Creating a string date for last month\n",
					"        previousMonthDate = previous_year_str + '-' + previous_month_str + '-' + last_day_str\n",
					"\n",
					"        print(f'Using {longToDate} subscription json file')\n",
					"        subscriptionListPath = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/subscriptions/subscriptions_' + previousMonthDate + '.json'\n",
					"        print(f\"Subscription path: {subscriptionListPath}\")\n",
					"\n",
					"    appListPath = 'abfss://' + container + '@s037costmgmt.dfs.core.windows.net/applications/applicationList.parquet'\n",
					"    print(f\"App-list path: {appListPath}\")\n",
					"    cost_df, subscription_list, appList = load_source_files(costSourcefilename, subscriptionListPath, appListPath)\n",
					"    cost_df = expand_ai_column(cost_df)\n",
					"    cost_df = populate_wbs_columns(cost_df, subscription_list, appList)\n",
					"    write_output_file(cost_df, costDestinationfilename)\n",
					"    print(' ')"
				],
				"execution_count": 123
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"currentSparkSession = SparkSession.builder.getOrCreate()\r\n",
					"spark.catalog.clearCache()"
				],
				"execution_count": 1
			}
		]
	}
}