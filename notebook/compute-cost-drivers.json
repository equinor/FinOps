{
	"name": "compute-cost-drivers",
	"properties": {
		"folder": {
			"name": "NotebookInProduction"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "6b860c1f-ff4c-4410-bffb-a2f80a100aaa"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F"
				],
				"execution_count": 79
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_path = f'abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyAmortizedCost/*/Extended_v3_ACMMonthlyAmortizedCost_*.parquet'\r\n",
					"# cost_path = f'abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/*/Extended_v3_ACMMonthlyActualCost_*.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)"
				],
				"execution_count": 80
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"start_date = '202401'\r\n",
					"end_date = '202403'"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.withColumn('ShortDate', F.date_format(F.col('Date'), 'yyyyMM'))\r\n",
					"cost_df = cost_df.where(F.col('ShortDate').isin([start_date, end_date]))"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.where(F.col('MeterCategory') == 'Storage')"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df \\\r\n",
					"    .select('ShortDate', 'MeterCategory', 'SubscriptionName', 'CostInBillingCurrency') \\\r\n",
					"    .groupBy('ShortDate', 'MeterCategory', 'SubscriptionName') \\\r\n",
					"    .agg(F.sum('CostInBillingCurrency').alias('Cost'))"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pivot = cost_df.groupBy('MeterCategory', 'SubscriptionName').pivot('ShortDate').agg(F.first('Cost'))\r\n",
					"pivot = pivot.withColumn(start_date, F.when(F.col(start_date).isNull(), 0).otherwise(F.col(start_date)))\r\n",
					"pivot = pivot.withColumn(end_date, F.when(F.col(end_date).isNull(), 0).otherwise(F.col(end_date)))\r\n",
					"pivot = pivot.withColumn(\"IncreaseInPercentage\", ((F.col(end_date) / F.col(start_date)) - 1) * 100)\r\n",
					"pivot = pivot.withColumn(\"CostIncrease\", F.col(end_date) - F.col(start_date))"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pivot = pivot.withColumn('CostStatus', \r\n",
					"    F.when((F.col(start_date) == 0) & (F.col(end_date) == 0), 'Ignore')\r\n",
					"    .when((F.col(start_date) == 0) & (F.col(end_date) > 0), 'New Service')\r\n",
					"    .when((F.col(start_date) > 0) & (F.col(end_date) == 0), 'Removed Service')\r\n",
					"    .otherwise('Continuous Service')\r\n",
					")"
				],
				"execution_count": 86
			}
		]
	}
}