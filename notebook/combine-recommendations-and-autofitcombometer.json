{
	"name": "combine-recommendations-and-autofitcombometer",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/RI Recommendations"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "42fa1aa1-6229-474d-b46d-0e349decc5b3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.types as T"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"autofit_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/ccm/autofitcombometer.parquet'\r\n",
					"autofit_df = spark.read.format('parquet').load(autofit_path)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rec_path = f'abfss://reservations@{storageAccount}.dfs.core.windows.net/portal-export/FinOps-ReservationRecommendations-VMs-Daily/*/*.csv'\r\n",
					"csv_options = {'header' : True,\r\n",
					"                'delimiter' : ',',\r\n",
					"                'quote' : '\"',\r\n",
					"                'escape' : '\"'}\r\n",
					"rec_df = spark.read.options(**csv_options).csv(rec_path)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create join keys for each table\r\n",
					"autofit_df = autofit_df.withColumn('AutofitJoinKey', F.concat(F.col('NormalizedSKU'), F.col('HardwareMeter')))\r\n",
					"rec_df = rec_df.withColumn('RecommendationJoinKey', F.concat(F.col('NormalizedSize'), F.col('MeterId')))\r\n",
					"\r\n",
					"autofit_df = autofit_df.select('AutofitJoinKey', 'ResourceLocation', 'ArmSkuName', 'NormalizedSKU')\r\n",
					"\r\n",
					"# Join tables on composite key\r\n",
					"new_df = rec_df.join(autofit_df, rec_df.RecommendationJoinKey == autofit_df.AutofitJoinKey, how='left')\r\n",
					"new_df = new_df.drop('RecommendationJoinKey', 'AutofitJoinKey')"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_df = new_df.withColumn(\"NetSavings\", F.col(\"NetSavings\").cast(T.FloatType()))\r\n",
					"new_df = new_df.withColumn(\"RecommendedQuantity\", F.col(\"RecommendedQuantity\").cast(T.FloatType()))\r\n",
					"new_df = new_df.withColumn(\"RecommendedQuantityNormalized\", F.col(\"RecommendedQuantityNormalized\").cast(T.FloatType()))\r\n",
					"new_df = new_df.withColumn(\"TotalCostWithReservedInstances\", F.col(\"TotalCostWithReservedInstances\").cast(T.FloatType()))"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/ri/ri-recommendations-with-autofit-combometer.parquet\"\r\n",
					"new_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(new_path)"
				],
				"execution_count": 10
			}
		]
	}
}