{
	"name": "sql-hub-vs-payg",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "6d7c1ab0-33a9-4b2f-83af-22d08207cfc3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Initialize script"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"from enum import Enum\r\n",
					"from datetime import datetime, timedelta"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class HUBType(Enum):\r\n",
					"    SQL = \"SQL\"\r\n",
					"    VM = \"VM\"\r\n",
					"\r\n",
					"class HUBCategory(Enum):\r\n",
					"    RI_HUB = \"RI enabled - HUB enabled\"\r\n",
					"    RI_nHUB = \"RI enabled - HUB disabled\"\r\n",
					"    nRI_HUB = \"RI disabled - HUB enabled\"\r\n",
					"    nRI_nHUB = \"RI disabled - HUB disabled\"\r\n",
					"    Unknown = \"Unknown\"\r\n",
					"\r\n",
					"class DBTypes(Enum):\r\n",
					"    DB = \"SQL DB\"\r\n",
					"    MI = \"SQL MI\"\r\n",
					"    VM = \"SQL VM\"\r\n",
					"    Unknown = \"Unknown\"\r\n",
					"\r\n",
					"class LicenseTypes(Enum):\r\n",
					"    Standard = \"Standard License\"\r\n",
					"    Enterprise = \"Enterprise License\"\r\n",
					"    Unknown = \"Unknown\""
				],
				"execution_count": 48
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load cost data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"date_two_year_ago = datetime.now().date()-timedelta(days=730)"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/*/Extended_v3_ACMMonthlyActualCost_*.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)\r\n",
					"cost_df = cost_df.where(F.col('Date') >= date_two_year_ago)"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.select(\r\n",
					"    'Date', \r\n",
					"    'MeterCategory', \r\n",
					"    'MeterSubCategory', \r\n",
					"    'ResourceName',\r\n",
					"    'ProductName',\r\n",
					"    'CostInBillingCurrency',\r\n",
					"    'Quantity',\r\n",
					"    'UnitOfMeasure', \r\n",
					"    'ResourceId', \r\n",
					"    'ServiceInfo2', \r\n",
					"    'Azure_Hybrid_Benefit', \r\n",
					"    'IsRIUsage', \r\n",
					"    'AHB_CPUs', \r\n",
					"    'ai_DatabaseName',\r\n",
					"    'ai_AHB', \r\n",
					"    'ai_VCPUs'\r\n",
					")\r\n",
					"\r\n",
					"cost_df = cost_df.withColumnRenamed('ai_VCPUs', 'VCPUs')"
				],
				"execution_count": 51
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Compute VM related cost"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_df = cost_df.alias('vm_df')\r\n",
					"vm_df = vm_df.withColumn('IsHUB', F.when(F.col('Azure_Hybrid_Benefit') == 'Enabled', True).otherwise(False))"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_df = vm_df.where(\r\n",
					"    ((F.col('ResourceId').like('%/virtualMachines/%')) | (F.col('ResourceId').like('%/virtualMachineScaleSets/%'))) &\r\n",
					"    ((F.col('MeterSubCategory').contains('Windows')) | (F.col('ServiceInfo2') == 'Windows Server BYOL')) &\r\n",
					"    (~F.col('ResourceName').like('CVD-%'))\r\n",
					")"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_df = vm_df \\\r\n",
					"    .select('VCPUs', 'Date', 'Quantity', 'MeterCategory', 'MeterSubCategory', 'ResourceName', 'CostInBillingCurrency', 'IsHUB', 'IsRIUsage') \\\r\n",
					"    .groupBy('Date', 'ResourceName', 'IsHUB', 'MeterCategory', 'MeterSubCategory', 'VCPUs', 'IsRIUsage',) \\\r\n",
					"    .agg(F.sum('Quantity').alias('Quantity'), F.sum('CostInBillingCurrency').alias('ResourceCost')) \\\r\n",
					"    .orderBy('Date', 'Quantity', 'ResourceCost')"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_df = vm_df.withColumn('HUBCategory',\r\n",
					"    F.when((F.col('IsRIUsage') == 'RI Usage') & (F.col('IsHUB') == True), HUBCategory.RI_HUB.value)\r\n",
					"    .when((F.col('MeterCategory') == 'Virtual Machines Licenses') & (F.col('MeterSubCategory').like('Windows Server%')), HUBCategory.RI_nHUB.value)\r\n",
					"    .when((F.col('IsRIUsage') == 'On Demand Usage') == (F.col('IsHUB') == True), HUBCategory.nRI_HUB.value)\r\n",
					"    .when((F.col('IsRIUsage') == 'On Demand Usage') == (F.col('IsHUB') == False), HUBCategory.nRI_nHUB.value)\r\n",
					"    .otherwise(HUBCategory.Unknown.value)\r\n",
					")"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_df = vm_df.where(F.col('VCPUs') != 0)\r\n",
					"vm_df = vm_df.withColumn('PricesheetService', F.concat(\r\n",
					"    F.lit('Windows Server'),\r\n",
					"    F.when(F.col('MeterSubCategory') == 'Windows Server Burst', ' Burst - ').otherwise(' - '), \r\n",
					"    F.col('VCPUs'), \r\n",
					"    F.lit(' vCPU VM License')\r\n",
					"))"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_df = vm_df.withColumn('HUBType', F.lit(HUBType.VM.value))"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vm_df = vm_df.withColumn('DBType', F.lit(None))"
				],
				"execution_count": 58
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Compute SQL related cost"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_df = cost_df.alias('sql_df')\r\n",
					"sql_df = sql_df.withColumn('IsHUB', F.when((F.col('ai_AHB').isNull()) | (F.col('ai_AHB') == False), False).otherwise(True))"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_df = sql_df.where(\r\n",
					"    ((F.col('ResourceId').like('%Microsoft.Sql/servers%')) & (F.col('MeterCategory').like('SQL%'))) | # SQL DB - RI - HUB\r\n",
					"    ((F.col('ResourceId').like('%Microsoft.Sql/managedInstances%')) & (F.col('MeterCategory').like('SQL%'))) | # SQL MI - RI - HUB\r\n",
					"    ((F.col('MeterCategory') == 'Virtual Machines Licenses') & (F.col('MeterSubCategory').like('SQL Server%'))) # SQL VM ---> HUB disabled (RI?)\r\n",
					")\r\n",
					"\r\n",
					"sql_df = sql_df.where(F.col('MeterSubCategory') != 'SQL Server Express Edition')"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_df = sql_df \\\r\n",
					"    .select('VCPUs', 'Date', 'Quantity', 'MeterCategory', 'MeterSubCategory', 'ResourceName', 'CostInBillingCurrency', 'IsHUB', 'IsRIUsage', 'ProductName', 'ResourceId', 'ProductName') \\\r\n",
					"    .groupBy('Date', 'ResourceName', 'IsHUB', 'MeterCategory', 'MeterSubCategory', 'VCPUs', 'IsRIUsage', 'ProductName', 'ResourceId', 'ProductName') \\\r\n",
					"    .agg(F.sum('Quantity').alias('Quantity'), F.sum('CostInBillingCurrency').alias('ResourceCost')) \\\r\n",
					"    .orderBy('Date', 'Quantity', 'ResourceCost')"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_df = sql_df.withColumn('DBType', \r\n",
					"    F.when(F.col('ResourceId').like('%Microsoft.Sql/servers%'), DBTypes.DB.value)\r\n",
					"    .when(F.col('ResourceId').like('%Microsoft.Sql/managedInstances%'), DBTypes.MI.value)\r\n",
					"    .when(F.col('ResourceId').like('%Microsoft.Compute/virtualMachines%'), DBTypes.VM.value)\r\n",
					"    .otherwise(DBTypes.Unknown.value)\r\n",
					")\r\n",
					"\r\n",
					"sql_df = sql_df.where(F.col('DBType') != DBTypes.Unknown.value)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_df = sql_df.withColumn('LicenseType',\r\n",
					"    F.when(F.col('Productname').like('%Standard%') | F.col('Productname').like('%General%'), LicenseTypes.Standard.value)\r\n",
					"    .when(F.col('Productname').like('%Enterprise%') | F.col('Productname').like('%Critical%'), LicenseTypes.Enterprise.value)\r\n",
					"    .otherwise(LicenseTypes.Unknown.value)\r\n",
					")\r\n",
					"\r\n",
					"sql_df = sql_df.where(F.col('LicenseType') != LicenseTypes.Unknown.value)"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"sql_df = sql_df.withColumn('HUBCategory',\r\n",
					"    F.when((F.col('IsRIUsage') == 'RI Usage') & (F.col('IsHUB') == True), HUBCategory.RI_HUB.value)\r\n",
					"    .when((F.col('IsRIUsage') == 'RI Usage') & (F.col('IsHUB') == False), HUBCategory.RI_nHUB.value)\r\n",
					"    .when((F.col('IsRIUsage') == 'On Demand Usage') == (F.col('IsHUB') == True), HUBCategory.nRI_HUB.value)\r\n",
					"    .when((F.col('IsRIUsage') == 'On Demand Usage') == (F.col('IsHUB') == False), HUBCategory.nRI_nHUB.value)\r\n",
					"    .otherwise(HUBCategory.Unknown.value)\r\n",
					")"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_df = sql_df.withColumn('PricesheetService',\r\n",
					"    F.when((F.col('DBType') == DBTypes.MI.value) & (F.col('LicenseType') == LicenseTypes.Standard.value), 'SQL Managed Instance General Purpose - SQL License - vCore')\r\n",
					"    .when((F.col('DBType') == DBTypes.MI.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value), 'SQL Managed Instance Business Critical - SQL License - vCore')\r\n",
					"    .when((F.col('DBType') == DBTypes.DB.value) & (F.col('LicenseType') == LicenseTypes.Standard.value), 'SQL Database Single/Elastic Pool General Purpose - SQL License - vCore')\r\n",
					"    .when((F.col('DBType') == DBTypes.DB.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value), 'SQL Database Single/Elastic Pool Business Critical - SQL License - vCore')\r\n",
					"    .when((F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Standard.value) & (F.col('VCPUs') < 5), 'SQL Server Standard - 1-4 vCPU VM License')\r\n",
					"    .when((F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value) & (F.col('VCPUs') < 5), 'SQL Server Enterprise - 1-4 vCPU VM License')\r\n",
					"    .when((F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Standard.value) & (F.col('VCPUs') >= 5), F.concat(F.lit('SQL Server Standard - '), F.col('VCPUs'), F.lit(' vCPU VM License')))\r\n",
					"    .when((F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value) & (F.col('VCPUs') >= 5), F.concat(F.lit('SQL Server Enterprise - '), F.col('VCPUs'), F.lit(' vCPU VM License')))\r\n",
					"    .otherwise('undefined')\r\n",
					")"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_df = sql_df.withColumn('HUBType', F.lit(HUBType.SQL.value))"
				],
				"execution_count": 66
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Combine dataframes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = ['Date', 'ResourceName', 'MeterCategory', 'MeterSubCategory', 'VCPUs', 'Quantity', 'ResourceCost', 'HUBType', 'HUBCategory', 'DBType', 'IsRIUsage', 'IsHUB', 'PricesheetService']\r\n",
					"vm_df = vm_df.select(*columns)\r\n",
					"sql_df = sql_df.select(*columns)\r\n",
					""
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hub_df = vm_df.union(sql_df)"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hub_df = hub_df.withColumn('MonthDate', F.date_trunc('month', 'Date'))"
				],
				"execution_count": 69
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Compute HUB Savings"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create dummy date column for pricesheet join operation\r\n",
					"hub_df = hub_df.withColumn(\"TempDate\", F.date_format(\"Date\", \"yyyyMM\"))"
				],
				"execution_count": 70
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Fetch old pricesheet"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"PROD_OFFER_ID = 'MS-AZR-0017P'"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"old_pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/pricesheet-2022*.parquet'\r\n",
					"old_pricesheet_df = spark.read.format('parquet').load(old_pricesheet_path)\r\n",
					"old_pricesheet_df = old_pricesheet_df.where(F.col('offerId') == PROD_OFFER_ID)\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumnRenamed('meterName', 'MeterName')\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumnRenamed('unitOfMeasure', 'UnitOfMeasure')\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumnRenamed('unitPrice', 'UnitPrice')\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumnRenamed('billingPeriodId', 'BillingPeriodId')\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumn('UnitQuantity', F.split('UnitOfMeasure', ' ')[0])\r\n",
					"old_pricesheet_df = old_pricesheet_df.withColumn('PricePerUnit', F.col('UnitPrice') / F.col('UnitQuantity'))\r\n",
					"old_pricesheet_df = old_pricesheet_df.select('MeterName', 'UnitOfMeasure', 'UnitQuantity', 'UnitPrice', 'PricePerUnit', 'BillingPeriodId')"
				],
				"execution_count": 72
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" ##### Fetch new pricesheet"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/portal-export/FinOps-Pricesheet-Monthly/*/*/*.csv'\r\n",
					"new_pricesheet_df = spark.read.csv(new_pricesheet_path, header=True, inferSchema=True)\r\n",
					"new_pricesheet_df = new_pricesheet_df.where(F.col('OfferId') == PROD_OFFER_ID)\r\n",
					"new_pricesheet_df = new_pricesheet_df.withColumn('BillingPeriodId', F.date_format(\"EffectiveStartDate\", \"yyyyMM\"))\r\n",
					"new_pricesheet_df = new_pricesheet_df.withColumn('UnitQuantity', F.split('UnitOfMeasure', ' ')[0])\r\n",
					"new_pricesheet_df = new_pricesheet_df.withColumn('PricePerUnit', F.col('UnitPrice') / F.col('UnitQuantity'))\r\n",
					"new_pricesheet_df = new_pricesheet_df.select('MeterName', 'UnitOfMeasure', 'UnitQuantity', 'UnitPrice', 'PricePerUnit', 'BillingPeriodId')"
				],
				"execution_count": 73
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Combine pricesheets"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pricesheet_df = new_pricesheet_df.union(old_pricesheet_df)"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hub_df = hub_df.join(pricesheet_df, (pricesheet_df.MeterName == hub_df.PricesheetService) & (pricesheet_df.BillingPeriodId == hub_df.TempDate), \"left\")\r\n",
					"hub_df = hub_df.drop('PriceSheetService', 'TempDate')\r\n",
					"\r\n",
					"hub_df = hub_df.withColumn('PAYGLicenseCost', F.col('Quantity') * F.col('pricePerUnit'))"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hub_df = hub_df.withColumn('CostWithHub', \r\n",
					"    F.when((F.col('HUBCategory') == HUBCategory.nRI_HUB.value) | (F.col('HUBCategory') == HUBCategory.RI_HUB.value), F.col('ResourceCost'))\r\n",
					"    .when((F.col('HUBCategory') == HUBCategory.nRI_nHUB.value) | (F.col('HUBCategory') == HUBCategory.RI_nHUB.value), F.col('ResourceCost') - F.col('PAYGLicenseCost'))\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"\r\n",
					"hub_df = hub_df.withColumn('UnlockedSavings', F.when((F.col('HUBCategory') == HUBCategory.RI_HUB.value) | (F.col('HUBCategory') == HUBCategory.nRI_HUB.value), F.col('PAYGLicenseCost')).otherwise(0))\r\n",
					"hub_df = hub_df.withColumn('PotentialSavings', F.col('ResourceCost') - F.col('CostWithHub'))"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hub_df = hub_df.drop('UnitOfMeasure', 'UnitQuantity', 'UnitPrice', 'PricePerUnit')"
				],
				"execution_count": 77
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Store result in optimized container"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hub_path = f\"abfss://usage@{storageAccount}.dfs.core.windows.net/hub/hub-savings-past-two-years.parquet\"\r\n",
					"hub_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').save(hub_path)"
				],
				"execution_count": 78
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Finding SQL Server related cost\r\n",
					"\r\n",
					"SQL cost are grouped into three categories:\r\n",
					"\r\n",
					"1. SQL Virtual Machine - Cost with _MeterCategory_ like **Virtual Machines Licenses** and _MeterSubCategory_ like **SQL Server%** (besides SQL Server Express)\r\n",
					"2. SQL Managed Instance - Cost with _ResourceId_ like **Microsoft.Sql/managedInstances**\r\n",
					"3. SQL Database - Cost with _ResourceId_ like **Microsoft.Sql/servers**\r\n",
					"\r\n",
					"\r\n",
					"### SQL Database\r\n",
					"\r\n",
					"This category will include _MeterCategories_ like SQL Managed Instance, Microsoft Defender for Cloud, SQL Database and Azure Synapse Analytics.\r\n",
					"\r\n",
					"Should exclude _Microsoft Defender for Cloud_ and _Azure Synapse Analytics_ as these meter categories is not applicable for HUB\r\n",
					"\r\n",
					"### SQL Managed Instance\r\n",
					"\r\n",
					"This category will include _MeterCategories_ like SQL Managed Instance and Microsoft Defender for Cloud.\r\n",
					"\r\n",
					"Should exclude _Microsoft Defender for Cloud_ as this meter category is not applicable for HUB"
				]
			}
		]
	}
}