{
	"name": "sql-hub-vs-payg",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "20981076-6f71-40cf-bcdb-21cf9e4d2c40"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"from enum import Enum"
				],
				"execution_count": 167
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 168
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class HUBCategory(Enum):\r\n",
					"    SQL_RI_HUB = \"SQL - RI enabled - HUB enabled\"\r\n",
					"    SQL_RI_nHUB = \"SQL - RI enabled - HUB disabled\"\r\n",
					"    SQL_nRI_HUB = \"SQL - RI disabled - HUB enabled\"\r\n",
					"    SQL_nRI_nHUB = \"SQL - RI disabled - HUB disabled\"\r\n",
					"    UNKNOWN = \"Unknown\"\r\n",
					"\r\n",
					"class DBTypes(Enum):\r\n",
					"    DB = \"SQL DB\"\r\n",
					"    MI = \"SQL MI\"\r\n",
					"    VM = \"SQL VM\"\r\n",
					"    Unknown = \"undefined\"\r\n",
					"\r\n",
					"class LicenseTypes(Enum):\r\n",
					"    Standard = \"Standard License\"\r\n",
					"    Enterprise = \"Enterprise License\"\r\n",
					"    Unknown = \"Unknown\""
				],
				"execution_count": 169
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/20231101-20231130/Extended_v3_ACMMonthlyActualCost_20231101-20231130.parquet'\r\n",
					"df = spark.read.format('parquet').load(cost_path)"
				],
				"execution_count": 170
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"PROD_OFFER_ID = 'MS-AZR-0017P'\r\n",
					"# pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/pricesheet-20*.parquet'\r\n",
					"pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/pricesheet-LATEST.parquet'\r\n",
					"pricesheet_df = spark.read.format('parquet').load(pricesheet_path)\r\n",
					"pricesheet_df = pricesheet_df.where(F.col('offerId') == PROD_OFFER_ID)\r\n",
					"pricesheet_df = pricesheet_df.withColumn('unitQuantity', F.split('unitOfMeasure', ' ')[0])\r\n",
					"pricesheet_df = pricesheet_df.withColumn('pricePerUnit', F.col('unitPrice') / F.col('unitQuantity'))\r\n",
					"pricesheet_df = pricesheet_df.select('meterName', 'unitOfMeasure', 'unitQuantity', 'unitPrice', 'pricePerUnit', 'billingPeriodId')"
				],
				"execution_count": 171
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.select(\r\n",
					"    'Date', \r\n",
					"    'MeterCategory', \r\n",
					"    'MeterSubCategory', \r\n",
					"    'ResourceName',\r\n",
					"    'ProductName',\r\n",
					"    'CostInBillingCurrency',\r\n",
					"    'Quantity',\r\n",
					"    'UnitOfMeasure', \r\n",
					"    'ResourceId', \r\n",
					"    'ServiceInfo2', \r\n",
					"    'Azure_Hybrid_Benefit', \r\n",
					"    'IsRIUsage', \r\n",
					"    'AHB_CPUs', \r\n",
					"    'ai_DatabaseName', \r\n",
					"    'ai_vCores', \r\n",
					"    'ai_AHB', \r\n",
					"    'ai_VCPUs',\r\n",
					"    'ai_ServiceType', \r\n",
					"    'ai_UsageType'\r\n",
					")\r\n",
					"\r\n",
					"df = df.withColumn('IsHUB', F.when((F.col('ai_AHB').isNull()) | (F.col('ai_AHB') == False), False).otherwise(True)).drop('ai_AHB')\r\n",
					"df = df.withColumnRenamed('ai_VCPUs', 'VCPUs')"
				],
				"execution_count": 172
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.where(\r\n",
					"    ((F.col('ResourceId').like('%Microsoft.Sql/servers%')) & (F.col('MeterCategory').like('SQL%'))) | # SQL DB - RI - HUB\r\n",
					"    ((F.col('ResourceId').like('%Microsoft.Sql/managedInstances%')) & (F.col('MeterCategory').like('SQL%'))) | # SQL MI - RI - HUB\r\n",
					"    ((F.col('MeterCategory') == 'Virtual Machines Licenses') & (F.col('MeterSubCategory').like('SQL Server%'))) # SQL VM ---> HUB disabled (RI?)\r\n",
					")\r\n",
					"\r\n",
					"df = df.where(F.col('MeterSubCategory') != 'SQL Server Express Edition')"
				],
				"execution_count": 173
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df \\\r\n",
					"    .select('VCPUs', 'Date', 'Quantity', 'MeterCategory', 'MeterSubCategory', 'ResourceName', 'CostInBillingCurrency', 'IsHUB', 'IsRIUsage', 'ProductName', 'ResourceId', 'ProductName') \\\r\n",
					"    .groupBy('Date', 'ResourceName', 'IsHUB', 'MeterCategory', 'MeterSubCategory', 'VCPUs', 'IsRIUsage', 'ProductName', 'ResourceId', 'ProductName') \\\r\n",
					"    .agg(F.sum('Quantity').alias('Quantity'), F.sum('CostInBillingCurrency').alias('ResourceCost')) \\\r\n",
					"    .orderBy('Date', 'Quantity', 'ResourceCost')"
				],
				"execution_count": 174
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.withColumn('DBType', \r\n",
					"    F.when(F.col('ResourceId').like('%Microsoft.Sql/servers%'), DBTypes.DB.value)\r\n",
					"    .when(F.col('ResourceId').like('%Microsoft.Sql/managedInstances%'), DBTypes.MI.value)\r\n",
					"    .when(F.col('ResourceId').like('%Microsoft.Compute/virtualMachines%'), DBTypes.VM.value)\r\n",
					"    .otherwise(DBTypes.Unknown.value)\r\n",
					")\r\n",
					"\r\n",
					"df = df.where(F.col('DBType') != DBTypes.Unknown.value)"
				],
				"execution_count": 175
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.withColumn('LicenseType',\r\n",
					"    F.when(F.col('Productname').like('%Standard%') | F.col('Productname').like('%General%'), LicenseTypes.Standard.value)\r\n",
					"    .when(F.col('Productname').like('%Enterprise%') | F.col('Productname').like('%Critical%'), LicenseTypes.Enterprise.value)\r\n",
					"    .otherwise(LicenseTypes.Unknown.value)\r\n",
					")\r\n",
					"\r\n",
					"df = df.where(F.col('LicenseType') != LicenseTypes.Unknown.value)"
				],
				"execution_count": 176
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.withColumn('pricesheetService',\r\n",
					"    F.when((F.col('DBType') == DBTypes.MI.value) & (F.col('LicenseType') == LicenseTypes.Standard.value), 'SQL Managed Instance General Purpose - SQL License - vCore')\r\n",
					"    .when((F.col('DBType') == DBTypes.MI.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value), 'SQL Managed Instance Business Critical - SQL License - vCore')\r\n",
					"    .when((F.col('DBType') == DBTypes.DB.value) & (F.col('LicenseType') == LicenseTypes.Standard.value), 'SQL Database Single/Elastic Pool General Purpose - SQL License - vCore')\r\n",
					"    .when((F.col('DBType') == DBTypes.DB.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value), 'SQL Database Single/Elastic Pool Business Critical - SQL License - vCore')\r\n",
					"    .when((F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Standard.value) & (F.col('VCPUs') < 5), 'SQL Server Standard - 1-4 vCPU VM License')\r\n",
					"    .when((F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value) & (F.col('VCPUs') < 5), 'SQL Server Enterprise - 1-4 vCPU VM License')\r\n",
					"    .when((F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Standard.value) & (F.col('VCPUs') >= 5), F.concat(F.lit('SQL Server Standard - '), F.col('VCPUs'), F.lit(' vCPU VM License')))\r\n",
					"    .when((F.col('DBType') == DBTypes.VM.value) & (F.col('LicenseType') == LicenseTypes.Enterprise.value) & (F.col('VCPUs') >= 5), F.concat(F.lit('SQL Server Enterprise - '), F.col('VCPUs'), F.lit(' vCPU VM License')))\r\n",
					"    .otherwise('undefined')\r\n",
					")\r\n",
					"\r\n",
					"df = df.join(pricesheet_df, pricesheet_df.meterName == df.pricesheetService, \"left\")\r\n",
					"df = df.drop('priceSheetService')\r\n",
					"\r\n",
					"df = df.withColumn('PAYGLicenseCost', F.col('Quantity') * F.col('pricePerUnit'))"
				],
				"execution_count": 177
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = df.withColumn('HUBCategory',\r\n",
					"    F.when((F.col('IsRIUsage') == 'RI Usage') & (F.col('IsHUB') == True), HUBCategory.SQL_RI_HUB.value)\r\n",
					"    .when((F.col('IsRIUsage') == 'RI Usage') & (F.col('IsHUB') == False), HUBCategory.SQL_RI_nHUB.value)\r\n",
					"    .when((F.col('IsRIUsage') == 'On Demand Usage') == (F.col('IsHUB') == True), HUBCategory.SQL_nRI_HUB.value)\r\n",
					"    .when((F.col('IsRIUsage') == 'On Demand Usage') == (F.col('IsHUB') == False), HUBCategory.SQL_nRI_nHUB.value)\r\n",
					"    .otherwise(HUBCategory.UNKNOWN.value)\r\n",
					")"
				],
				"execution_count": 178
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.withColumn('CostWithHub', \r\n",
					"    F.when((F.col('HUBCategory') == HUBCategory.SQL_nRI_HUB.value) | (F.col('HUBCategory') == HUBCategory.SQL_RI_HUB.value), F.col('ResourceCost'))\r\n",
					"    .when((F.col('HUBCategory') == HUBCategory.SQL_nRI_nHUB.value) | (F.col('HUBCategory') == HUBCategory.SQL_RI_nHUB.value), F.col('ResourceCost') - F.col('PAYGLicenseCost'))\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"\r\n",
					"df = df.withColumn('UnlockedSavings', F.when((F.col('HUBCategory') == HUBCategory.SQL_RI_HUB.value) | (F.col('HUBCategory') == HUBCategory.SQL_nRI_HUB.value), F.col('PAYGLicenseCost')).otherwise(0))\r\n",
					"df = df.withColumn('PotentialSavings', F.col('ResourceCost') - F.col('CostWithHub'))"
				],
				"execution_count": 179
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.drop('UnitOfMeasure', 'unitQuantity', 'unitPrice', 'pricePerUnit')"
				],
				"execution_count": 181
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df.where(F.col('DBType') == DBTypes.VM.value).agg(F.sum('PotentialSavings')))"
				],
				"execution_count": 187
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Finding SQL Server related cost\r\n",
					"\r\n",
					"SQL cost are grouped into three categories:\r\n",
					"\r\n",
					"1. SQL Virtual Machine - Cost with _MeterCategory_ like **Virtual Machines Licenses** and _MeterSubCategory_ like **SQL Server%** (besides SQL Server Express)\r\n",
					"2. SQL Managed Instance - Cost with _ResourceId_ like **Microsoft.Sql/managedInstances**\r\n",
					"3. SQL Database - Cost with _ResourceId_ like **Microsoft.Sql/servers**\r\n",
					"\r\n",
					"\r\n",
					"### SQL Database\r\n",
					"\r\n",
					"This category will include _MeterCategories_ like SQL Managed Instance, Microsoft Defender for Cloud, SQL Database and Azure Synapse Analytics.\r\n",
					"\r\n",
					"Should exclude _Microsoft Defender for Cloud_ and _Azure Synapse Analytics_ as these meter categories is not applicable for HUB\r\n",
					"\r\n",
					"### SQL Managed Instance\r\n",
					"\r\n",
					"This category will include _MeterCategories_ like SQL Managed Instance and Microsoft Defender for Cloud.\r\n",
					"\r\n",
					"Should exclude _Microsoft Defender for Cloud_ as this meter category is not applicable for HUB"
				]
			}
		]
	}
}