{
	"name": "calculate-storage-volume",
	"properties": {
		"folder": {
			"name": "NotebookInProduction"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "e44596cc-9fa6-452a-9816-f5a33bbb6b49"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import pyspark.sql.types as T\r\n",
					"from enum import Enum\r\n",
					"from datetime import datetime, timedelta"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class StorageType(Enum):\r\n",
					"    StorageAccount = \"Storage Account\"\r\n",
					"    ManagedDisk = \"Managed Disk\"    \r\n",
					"    NetAppFiles = \"NetApp Files\"\r\n",
					"    Backup = \"Backup\"\r\n",
					"    SQLDatabase = \"SQL Database\"\r\n",
					"    SQLManagedInstance = \"SQL Managed Instance\"\r\n",
					"    CosmosDB = \"Cosmos DB\"\r\n",
					"    MySQLDatabase = \"MySQL Database\"\r\n",
					"    PostgreSQLDatabase = \"PostgreSQL Database\"\r\n",
					"    EventHubs = \"Event Hubs\"\r\n",
					"    AzureDevOps = \"Azure DevOps\"\r\n",
					"    AzureMonitor = \"Azure Monitor\"\r\n",
					"    SynapseAnalytics = \"Synapse Analytics\"\r\n",
					"    ContainerRegistry = \"Container Registry\"\r\n",
					"    GitHub = \"GitHub\"\r\n",
					"    InsightsAndAnalytics = \"Insight and Analytics\"\r\n",
					"    LogAnalytics = \"Log Analytics\"\r\n",
					"    LogicApps = \"Logic Apps\"\r\n",
					"    Fabric = \"Fabric\"\r\n",
					"    Snapshots = \"Snapshots\"\r\n",
					"    KustoClusters = \"Kusto Clusters\"\r\n",
					"    AmlFileSystems = \"Aml Files Systems\""
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"HOURS_PER_MONTH = 730\r\n",
					"GIB_PER_TIB = 1024\r\n",
					"TIB_PER_PIB = 1024\r\n",
					"GIB_PER_GB = 0.931322575\r\n",
					"GB_PER_TB = 1000\r\n",
					"HOURS_PER_DAY = 24"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"UNIT_OF_MEASURES = [\r\n",
					"    '1 GB/Month',\r\n",
					"    '1 GiB/Hour',\r\n",
					"    '1 GiB/Month',\r\n",
					"    '1 TB/Month'\r\n",
					"]\r\n",
					"\r\n",
					"STORAGE_ACCOUNT_RESOURCE_TYPES = [\r\n",
					"    'microsoft.storage/storageaccounts',\r\n",
					"    'microsoft.classicstorage/storageaccounts'\r\n",
					"]\r\n",
					"\r\n",
					"SNAPSHOT_RESOURCE_TYPES = [\r\n",
					"    'microsoft.compute/snapshots',\r\n",
					"    'microsoft.compute/galleries',\r\n",
					"    'microsoft.compute/images',\r\n",
					"    'microsoft.compute/restorepointcollections'\r\n",
					"]\r\n",
					"\r\n",
					"NETAPP_CAPACITIES = [\r\n",
					"    'Standard Capacity',\r\n",
					"    'Ultra Capacity',\r\n",
					"    'Premium Capacity',\r\n",
					"    'Backup Capacity'\r\n",
					"]"
				],
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load application data\r\n",
					"##### Used to resolve the organisational unit"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"app_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/applications/processed.parquet\"\r\n",
					"app_df = spark.read.format('parquet').load(app_path)\r\n",
					"app_df = app_df.select('AppID', 'OrgUnitLevel0', 'OrgUnitLevel1', 'OrgUnitLevel2')"
				],
				"execution_count": 51
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load disk size mapping\r\n",
					"##### Mapping used to determine disk size for managed disks"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"disk_size_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/services/storage-account-disk-sizes.csv\"\r\n",
					"csv_options = {'header' : True,\r\n",
					"                'delimiter' : ';',\r\n",
					"                'quote' : '\"',\r\n",
					"                'escape' : '\"'}\r\n",
					"disk_size_df = spark.read.options(**csv_options).csv(disk_size_path)\r\n",
					"\r\n",
					"disk_size_df = disk_size_df.withColumn('Size', F.split(F.col('DiskSize'), ' ').getItem(0))\r\n",
					"disk_size_df = disk_size_df.withColumn('Unit', F.split(F.col('DiskSize'), ' ').getItem(1))\r\n",
					"disk_size_df = disk_size_df.withColumn('DiskSizeGiB', \r\n",
					"    F.when(F.col('Unit') == 'TiB', F.col('Size') * 1024)\r\n",
					"    .otherwise(F.col('Size'))\r\n",
					")"
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load usage data"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"cost_path = f'abfss://usage@s037costmgmt.dfs.core.windows.net/exports/monthly/ACMMonthlyAmortizedCost/*/Extended_v3_ACMMonthlyAmortizedCost_*.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)\r\n",
					"\r\n",
					"one_year_back = datetime.now().date()-timedelta(days=365)\r\n",
					"cost_df = cost_df.where(F.col('Date') >= one_year_back)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Estimate storage volumes per service"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define service masks\r\n",
					"is_storage_account = (F.col('MeterCategory') == 'Storage') & (F.col('ResourceType').isin(STORAGE_ACCOUNT_RESOURCE_TYPES)) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_managed_disk = (F.col('MeterCategory') == 'Storage') & (F.col('ResourceType') == 'microsoft.compute/disks') & (F.col('MeterName').contains('Disk')) & (F.col('UnitOfMeasure') == '1/Month')\r\n",
					"is_managed_disk_redundancy = (F.col('MeterCategory') == 'Storage') & (F.col('ResourceType') == 'microsoft.compute/disks') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_sql_db = (F.col('MeterCategory') == 'SQL Database') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_sql_mi = (F.col('MeterCategory') == 'SQL Managed Instance') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_netapp_files = (F.col('MeterCategory') == 'Azure NetApp Files') & (F.col('ResourceType') == 'microsoft.netapp/netappaccounts') & (F.col('MeterName').isin(NETAPP_CAPACITIES)) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_backup = (F.col('MeterCategory') == 'Backup') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_cosmos_db = (F.col('MeterCategory') == 'Azure Cosmos DB') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_mysql = (F.col('MeterCategory') == 'Azure Database for MySQL') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_postgres = (F.col('MeterCategory') == 'Azure Database for PostgreSQL') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_eventhub = (F.col('MeterCategory') == 'Event Hubs') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_devops = (F.col('MeterCategory') == 'Azure DevOps') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_azure_monitor = (F.col('MeterCategory') == 'Azure Monitor') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_synapse = (F.col('MeterCategory') == 'Azure Synapse Analytics') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_container_registry = (F.col('MeterCategory') == 'Container Registry') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_github = (F.col('MeterCategory') == 'GitHub') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_insights_and_analytics = (F.col('MeterCategory') == 'Insight and Analytics') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_log_analytics = (F.col('MeterCategory') == 'Log Analytics') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_logic_apps = (F.col('MeterCategory') == 'Logic Apps') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_fabric = (F.col('MeterCategory') == 'Microsoft Fabric') & (F.col('MeterName').contains('Data Stored')) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_snapshots = (F.col('MeterCategory') == 'Storage') & (F.col('ResourceType').isin(SNAPSHOT_RESOURCE_TYPES)) & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_kusto_cluster = (F.col('MeterCategory') == 'Storage') & (F.col('ResourceType') == 'microsoft.kusto/clusters') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"is_aml_file_system = (F.col('MeterCategory') == 'Storage') & (F.col('ResourceType') == 'microsoft.storagecache/amlfilesystems') & (F.col('UnitOfMeasure').isin(UNIT_OF_MEASURES))\r\n",
					"\r\n",
					"# Define storage type for each relevant service\r\n",
					"storage_df = cost_df.withColumn('StorageType',\r\n",
					"    F.when(is_storage_account, StorageType.StorageAccount.value)\r\n",
					"    .when(is_managed_disk, StorageType.ManagedDisk.value)\r\n",
					"    .when(is_managed_disk_redundancy, StorageType.ManagedDisk.value)\r\n",
					"    .when(is_sql_db, StorageType.SQLDatabase.value)\r\n",
					"    .when(is_sql_mi, StorageType.SQLManagedInstance.value)\r\n",
					"    .when(is_netapp_files, StorageType.NetAppFiles.value)\r\n",
					"    .when(is_backup, StorageType.Backup.value)\r\n",
					"    .when(is_cosmos_db, StorageType.CosmosDB.value)\r\n",
					"    .when(is_mysql, StorageType.MySQLDatabase.value)\r\n",
					"    .when(is_postgres, StorageType.PostgreSQLDatabase.value)\r\n",
					"    .when(is_eventhub, StorageType.EventHubs.value)\r\n",
					"    .when(is_devops, StorageType.AzureDevOps.value)\r\n",
					"    .when(is_azure_monitor, StorageType.AzureMonitor.value)\r\n",
					"    .when(is_synapse, StorageType.SynapseAnalytics.value)\r\n",
					"    .when(is_container_registry, StorageType.ContainerRegistry.value)\r\n",
					"    .when(is_github, StorageType.GitHub.value)\r\n",
					"    .when(is_insights_and_analytics, StorageType.InsightsAndAnalytics.value)\r\n",
					"    .when(is_log_analytics, StorageType.LogAnalytics.value)\r\n",
					"    .when(is_logic_apps, StorageType.LogicApps.value)\r\n",
					"    .when(is_fabric, StorageType.Fabric.value)\r\n",
					"    .when(is_snapshots, StorageType.Snapshots.value)\r\n",
					"    .when(is_kusto_cluster, StorageType.KustoClusters.value)\r\n",
					"    .when(is_aml_file_system, StorageType.AmlFileSystems.value)\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"\r\n",
					"storage_df = storage_df.where(F.col('StorageType').isNotNull())"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Aggregate quantities per day - used to derive the storage volume\r\n",
					"storage_df = storage_df \\\r\n",
					"    .select('Date', 'StorageType', 'ResourceId', 'ResourceName', 'ResourceGroup', 'SubscriptionName', 'UnitOfMeasure', 'MeterName', 'AppID', 'Quantity') \\\r\n",
					"    .groupBy('Date', 'StorageType', 'ResourceId', 'ResourceName', 'ResourceGroup', 'SubscriptionName', 'UnitOfMeasure', 'MeterName', 'AppID') \\\r\n",
					"    .agg(F.sum('Quantity').alias('Quantity'))\r\n",
					"\r\n",
					"# Lookup disk storage volumes from separate table\r\n",
					"is_pre_allocated_disk = (F.col('StorageType') == StorageType.ManagedDisk.value) & (F.col('UnitOfMeasure') == '1/Month')\r\n",
					"storage_df = storage_df.withColumn('DiskType',\r\n",
					"    F.when(is_pre_allocated_disk, F.split(F.col('MeterName'), ' ').getItem(0)).otherwise(None)\r\n",
					")\r\n",
					"storage_df = storage_df.join(disk_size_df.select('DiskType', 'DiskSizeGiB'), 'DiskType', 'left')"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Compute storage volume estimates from quantity\r\n",
					"storage_df = storage_df.withColumn('EstimatedVolumeGiB',\r\n",
					"    F.when(F.col('UnitOfMeasure') == '1 GiB/Hour', F.col('Quantity') / HOURS_PER_DAY)\r\n",
					"    .when(F.col('UnitOfMeasure') == '1 GiB/Month', F.col('Quantity') * (HOURS_PER_MONTH / HOURS_PER_DAY))\r\n",
					"    .when(F.col('UnitOfMeasure') == '1 GB/Month', F.col('Quantity') * (HOURS_PER_MONTH / HOURS_PER_DAY) * GIB_PER_GB)\r\n",
					"    .when(F.col('UnitOfMeasure') == '1 TB/Month', F.col('Quantity') * (HOURS_PER_MONTH / HOURS_PER_DAY) * GIB_PER_GB * GB_PER_TB)\r\n",
					"    .when(is_pre_allocated_disk, F.col('DiskSizeGiB'))\r\n",
					"    .otherwise(None)\r\n",
					")\r\n",
					"storage_df = storage_df.withColumn('EstimatedVolumeGiB', F.col('EstimatedVolumeGiB').cast(T.DoubleType()))\r\n",
					"\r\n",
					"storage_df = storage_df.withColumn('EstimatedVolumeTiB', F.col('EstimatedVolumeGiB') / GIB_PER_TIB)\r\n",
					"storage_df = storage_df.withColumn('EstimatedVolumePiB', F.col('EstimatedVolumeTiB') / TIB_PER_PIB)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Enrich orgianisational data from Service Now based on application metadata\r\n",
					"storage_df = storage_df.join(app_df, 'AppID', 'left')"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"target_path = \"abfss://usage@s037costmgmt.dfs.core.windows.net/storage/storage-volume-estimates-1-year.parquet\"\r\n",
					"storage_df.write.format('parquet').mode('overwrite').save(target_path)"
				],
				"execution_count": 58
			}
		]
	}
}