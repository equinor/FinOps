{
	"name": "HUB Savings",
	"properties": {
		"folder": {
			"name": "NotebookNotInUse"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool32",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ca476b31-5bed-46cb-857a-b0b8202f8932"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sparkpool32",
				"name": "sparkpool32",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool32",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"start_date = '2022-06-01'\n",
					"end_date = '2022-06-30'\n",
					"storageAccount = 's037costmgmt'\n",
					"\n",
					"source_filename = 'data/' + start_date + '_' + end_date + '-cleaned.parquet'\n",
					"\n",
					"pricelist_file = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/pricesheet-LATEST.parquet'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from turtle import st\n",
					"import pandas as pd\n",
					"import numpy as np\n",
					"import pyarrow as pa\n",
					"#import fastparquet as fp\n",
					"import json\n",
					"from notebookutils import mssparkutils\n",
					"import calendar\n",
					"\n",
					"'''mssparkutils.fs.unmount(\"/usage\") \n",
					"print('Mounting storage container \"usage@s037costmgmt.dfs.core.windows.net\" to \"/usage\"...')\n",
					"mssparkutils.fs.mount( \n",
					"    \"abfss://usage@s037costmgmt.dfs.core.windows.net\", \n",
					"    \"/usage\", \n",
					"    {\"linkedService\":\"s037-cost-management-WorkspaceDefaultStorage\"} \n",
					")\n",
					"\n",
					"#path = 'synfs:/'+str(mssparkutils.env.getJobId())+filePath+fileName\n",
					"#print(mssparkutils.fs.ls(path))'''\n",
					"\n",
					"def calculate_hub_saving(path, year, month, pricelist):\n",
					"    \n",
					"    start_date = year + '-' + month + '-01'\n",
					"    end_date = year + '-' + month + '-' + str(calendar.monthrange(int(year), int(month))[1])\n",
					"\n",
					"    print(path)\n",
					"    print(start_date)\n",
					"    print(end_date)\n",
					"    \n",
					"    #Read in the source Parquet file\n",
					"    print('Reading in monthly usage parquet')\n",
					"    df = pd.read_parquet(path + start_date + '_' + end_date + '-cleaned.parquet')\n",
					"    #df = pd.read_csv(csv_file)\n",
					"\n",
					"    print('Dropping all non HUB entries from the usage df')\n",
					"    #Drop all entries where ServiceInfo2 does not contain 'Windows Server BYOL' i.e. remove all entries that are not Windows Server HUB\n",
					"    df = df.drop(df.loc[df['ServiceInfo2'] != 'Windows Server BYOL'].index).reset_index()\n",
					"\n",
					"    print('Expanding the AdditionalInfo Column')\n",
					"    # Expand the json in the AdditionalInfo column into its own columns in a pd.Series then join it with the source dataframe\n",
					"    ser = df['AdditionalInfo'].apply(lambda s: pd.json_normalize(json.loads(s)))\n",
					"    ##df.to_csv('data/1st.csv')\n",
					"    ser2 = pd.concat(list(ser), ignore_index=True)\n",
					"    df = df.join(ser2,)\n",
					"\n",
					"    print('Dropping all usage columns that are not required')\n",
					"    # Drop all columns except those in the columns_to_keep that we define below\n",
					"    columns_to_keep = ['ServiceType', 'VCPUs', 'Date', 'ConsumedQuantity','PartNumber','Product','ServiceInfo2']\n",
					"    df = df[columns_to_keep]\n",
					"\n",
					"    print('Populating the priceListService column')\n",
					"    df['priceListService'] = f'Windows Server - ' + df[\"VCPUs\"].astype(str) + ' vCPU VM License'\n",
					"    #print(df[df['VCPUs'] == 8])\n",
					"\n",
					"    print('Dropping all pricelist entries whos offerId != MS-AZR-017P')\n",
					"    pricelist.drop(pricelist[pricelist['offerId'] != 'MS-AZR-0017P'].index, inplace=True)\n",
					"    columns_to_keep = ['meterName','unitOfMeasure',\t'includedQuantity', 'partNumber', 'unitPrice']\n",
					"    pricelist = pricelist[columns_to_keep]\n",
					"    #print(pricelist)\n",
					"    #print(pricelist[pricelist['meterName'] == 'Windows Server - 4 vCPU VM License']['unitPrice'])\n",
					"    print('Merging usage df priceListService Column with pricelist details')\n",
					"    df = df.merge(pricelist, left_on='priceListService', right_on='meterName')\n",
					"    df.drop(['priceListService', 'includedQuantity'], axis = 1, inplace=True)\n",
					"    print('Removing extra text in the Units Column')\n",
					"    df['Units'] = df['unitOfMeasure']\n",
					"    df['Units'] = df['Units'].str.replace(' Hours', '')\n",
					"    df['Units'] = df['Units'].str.replace(' Hour', '')\n",
					"    df['Units'] = df['Units'].astype(float)\n",
					"    print('Calculating the unitPricePH')\n",
					"    df['unitPricePH'] = df['unitPrice'] / df['Units']\n",
					"    print('Calculating the Saving')\n",
					"    df['Saving'] = df['ConsumedQuantity'] * df['unitPricePH']\n",
					"    df = df.groupby(['ServiceType', 'Date'], as_index=False).aggregate({'VCPUs':np.mean, 'ConsumedQuantity':np.sum,'unitPrice':np.mean, 'Units':np.mean, 'unitPricePH': np.mean, 'Saving':np.sum})\n",
					"    #print(df)\n",
					"    print(df['Saving'].sum())\n",
					"    #print(df.columns)\n",
					"    #print(df[df['ServiceType'] == 'Standard_D4s_v3']['Saving'].sum())\n",
					"    print('Writing Saving to CSV')\n",
					"    df.to_csv('abfss://savings@'+storageAccount+'.dfs.core.windows.net/monthly/'+year+'/'+month+'/'+start_date + '_' + end_date + '-HUB_Windows.csv', index=False)\n",
					"    print('Writing Saving to Parquet')\n",
					"    df.to_parquet('abfss://savings@'+storageAccount+'.dfs.core.windows.net/monthly/'+year+'/'+month+'/'+start_date + '_' + end_date + '-HUB_Windows.parquet', index=False)\n",
					"\n",
					"\n",
					"pricelist = pd.read_parquet(pricelist_file)\n",
					"#print(source_filename)\n",
					"\n",
					"year_list = mssparkutils.fs.ls(f'abfss://usage@{storageAccount}.dfs.core.windows.net/monthly')\n",
					"\n",
					"schema = ['path','name','size']\n",
					"year_list_df = pd.DataFrame([[getattr(i,j) for j in schema] for i in year_list], columns = schema)\n",
					"#print(dir_list_df)\n",
					"\n",
					"for year in year_list_df['name']:\n",
					"    month_list = mssparkutils.fs.ls('abfss://usage@' + storageAccount + '.dfs.core.windows.net/monthly/' + year)\n",
					"    schema = ['path','name','size']\n",
					"    month_list_df = pd.DataFrame([[getattr(i,j) for j in schema] for i in month_list], columns = schema)\n",
					"    #print(month_list_df)\n",
					"    for month in month_list_df['name']:\n",
					"        calculate_hub_saving('abfss://usage' + storageAccount + '.dfs.core.windows.net/monthly/' + year + '/' + month + '/', year, month, pricelist)\n",
					"\n",
					"\n",
					"\n",
					""
				],
				"execution_count": 2
			}
		]
	}
}