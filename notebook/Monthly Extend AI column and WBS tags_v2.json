{
	"name": "Monthly Extend AI column and WBS tags_v2",
	"properties": {
		"folder": {
			"name": "NotebookInProduction"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "d343d185-1e1b-4e85-a309-5134f16e9b45"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# # Input data\n",
					"toDate = '20230531'\n",
					"fromDate = '20230501'\n",
					"container = 'usage'\n",
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 647
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\n",
					"import pyspark.pandas as ps\n",
					"import json\n",
					"import numpy as np\n",
					"from datetime import datetime\n",
					"import calendar\n",
					"import warnings\n",
					"\n",
					"import pyspark.sql.functions as F\n",
					"import pyspark.sql.types as T"
				],
				"execution_count": 648
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def load_source_files(path, subscription_path, appListPath):\r\n",
					"    \r\n",
					"    print(f'Loading Cost file list - {path}')\r\n",
					"    cost_df = spark.read.format('parquet').load(path)\r\n",
					"    print(f\"Cost file contains: {cost_df.count()} rows\")\r\n",
					"    \r\n",
					"    print(f'Loading Subscription list - {subscription_path}...')\r\n",
					"    subscription_list = spark.read.json(subscription_path)\r\n",
					"    print(f\"Subscription file contains: {subscription_list.count()} rows\")\r\n",
					"\r\n",
					"    print(f'Loading SNOW application list - {appListPath}...')\r\n",
					"    appList = spark.read.format('parquet').load(appListPath)\r\n",
					"    appList = appList.withColumn('AppID', F.col('AppID').cast(\"int\"))\r\n",
					"\r\n",
					"    print(f'App list contains: {appList.count()}')\r\n",
					"\r\n",
					"    return cost_df, subscription_list, appList"
				],
				"execution_count": 649
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def populate_columns(cost_df):\r\n",
					"\r\n",
					"    # Populating the Azure Hybrid Benefit Column\r\n",
					"    cost_df = cost_df.withColumn('Azure_Hybrid_Benefit', F.when(F.col('MeterSubCategory').contains('Windows'), \"Not Enabled\")\\\r\n",
					"                                                         .when(F.col('ServiceInfo2') == 'Windows Server BYOL', \"Enabled\")\\\r\n",
					"                                                         .otherwise('Not Supported'))\r\n",
					"\r\n",
					"    # Populating the isRIUsage Column\r\n",
					"    cost_df = cost_df.withColumn('IsRIUsage',\r\n",
					"                                 F.when(F.col('ReservationId').isNull(), 'On Demand Usage')\\\r\n",
					"                                  .otherwise('RI Usage'))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 650
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def extend_additional_info(cost_df):\r\n",
					"    # Extend AdditionalInfo Column\r\n",
					"    cost_df = cost_df.withColumn('AdditionalInfo', F.from_json('AdditionalInfo', 'map<string,string>', options={'inferSchema': 'true'}))\r\n",
					"\r\n",
					"    # Creating an ID column\r\n",
					"    cost_df = cost_df.withColumn('id', F.monotonically_increasing_id())\r\n",
					"\r\n",
					"    # Creating a list of columns we want to keep\r\n",
					"    cols_to_keep = [\"UsageType\", \r\n",
					"                    \"ImageType\",\r\n",
					"                    \"ServiceType\",\r\n",
					"                    \"VMName\",\r\n",
					"                    \"VMApplicationName\",\r\n",
					"                    \"VMProperties\",\r\n",
					"                    \"VCPUs\",\r\n",
					"                    \"AHB\",\r\n",
					"                    \"vCores\",\r\n",
					"                    \"RINormalizationRatio\",\r\n",
					"                    \"ConsumedQuantity\",\r\n",
					"                    \"DatabaseName\"]\r\n",
					"\r\n",
					"    for col in cols_to_keep:\r\n",
					"        cost_df = cost_df.withColumn('ai_' + col, F.coalesce(F.col(f'AdditionalInfo.{col}'), F.lit(None)))\r\n",
					"    print(cost_df.columns)\r\n",
					"    return cost_df"
				],
				"execution_count": 651
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def AHB_column(cost_df):\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ai_VCPUs', F.col('ai_VCPUs').cast('int'))\r\n",
					"    cost_df = cost_df.na.fill({'ai_VCPUs' : 0})\r\n",
					"    cost_df = cost_df.withColumn('AHB_CPUs', F.when(F.col('ai_VCPUs') == 0, 0)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') < 8, 8)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') < 16, 16)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') == 20, 24)\\\r\n",
					"                                              .when(F.col('ai_VCPUs') > 20, F.col('ai_VCPUs'))\\\r\n",
					"                                              .otherwise(0))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 652
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def instance_name(cost_df):\r\n",
					"\r\n",
					"    # cost_df = cost_df.withColumnRenamed('ai_VMName', 'ai_Container_VMName')\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('Instance_Name', F.when(F.col('ai_VMName').isNull(), F.col('ResourceName'))\\\r\n",
					"                                                   .when(F.col('ai_VMName').isNotNull(), F.col('ai_VMName'))\\\r\n",
					"                                                   .otherwise(0))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('UnitPrice', F.col('UnitPrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('PayGPrice', F.col('PayGPrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('Quantity', F.col('Quantity').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('EffectivePrice', F.col('EffectivePrice').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('CostInBillingCurrency', F.col('CostInBillingCurrency').cast(T.DoubleType()))\\\r\n",
					"                     .withColumn('Date', F.to_date(F.col('Date'), 'MM/dd/yyyy'))\\\r\n",
					"                     .withColumn('BillingPeriodStartDate', F.to_date(F.col('BillingPeriodStartDate'), 'MM/dd/yyyy'))\\\r\n",
					"                     .withColumn('BillingPeriodEndDate', F.to_date(F.col('BillingPeriodEndDate'), 'MM/dd/yyyy'))\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 653
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_subscription_tags(subscription_list):\r\n",
					"        \r\n",
					"    subscription_list = subscription_list.withColumnRenamed('id', 'SubId')\r\n",
					"    subscription_list = subscription_list.withColumn('id', F.monotonically_increasing_id())\r\n",
					"\r\n",
					"    try:\r\n",
					"        subscription_list = subscription_list.withColumn('tags', F.from_json(F.col('tags')))\r\n",
					"    except:\r\n",
					"        print('Already a json file')\r\n",
					"\r\n",
					"    # Expanding the tags list into separate columns\r\n",
					"    subscription_list = subscription_list.withColumn('SubscriptionWBS', F.col('tags.WBS'))\r\n",
					"    subscription_list = subscription_list.withColumn('SubscriptionServiceNow-App', F.col('tags.ServiceNow-App'))\r\n",
					"    subscription_list = subscription_list.drop('tags')\r\n",
					"\r\n",
					"    # Dropping unnecessary columns and setting the schema\r\n",
					"    columns_to_keep = ['SubId', 'SubscriptionWBS', 'SubscriptionServiceNow-App']\r\n",
					"    subscription_list = subscription_list.select(columns_to_keep)\r\n",
					"\r\n",
					"    \r\n",
					"\r\n",
					"    return subscription_list"
				],
				"execution_count": 654
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def merge_dataframes(cost_df, subscription_list):\r\n",
					"    \r\n",
					"    cost_df = cost_df.join(subscription_list, cost_df.SubscriptionId == subscription_list.SubId, how='left')\r\n",
					"    cost_df = cost_df.drop('SubId')\r\n",
					"\r\n",
					"    return cost_df, subscription_list"
				],
				"execution_count": 655
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_cost_tags(cost_df):\r\n",
					"    \r\n",
					"    # Storing the Tags column in a new column, and cleaning it up to fit with CostAllocationType\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.regexp_extract(F.col('Tags'), 'CostAllocationType\": \"(.*)\"', 0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.regexp_replace(F.col('CostAllocationType'), 'CostAllocationType\": \"', \"\"))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.split(F.col('CostAllocationType'),'\"', 0).getItem(0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('CostAllocationType') == \"\", None).otherwise(F.col('CostAllocationType')))\r\n",
					"\r\n",
					"    # Storing the Tags column in a new column, and cleaning it up to fit with CostAllocationCode\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.regexp_extract(F.col('Tags'), 'CostAllocationCode\": \"(.*)\"', 0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.regexp_replace(F.col('CostAllocationCode'), 'CostAllocationCode\": \"', \"\"))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.split(F.col('CostAllocationCode'),'\"', 0).getItem(0))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.when(F.col('CostAllocationCode') == \"\", None).otherwise(F.col('CostAllocationCode')))\r\n",
					"    \r\n",
					"    print(\"Cost Tags expansion complete\")\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 656
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def replace_empty_cost_fields_with_subscription_details(cost_df, appList):\r\n",
					"    print(\"Creating ActiveWBS column, copying over CostAllocationCode, replacing 'TOBESPECIFIED' and empty values then filling gaps with SubscriptionWBS...\")\r\n",
					"\r\n",
					"    # Apply Upper-case for all CostAllocationTypes and Codes\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.upper(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.upper(F.col('CostAllocationCode')))\r\n",
					"\r\n",
					"    # When the tag does not contain CostAllocationCode or CostAllocationType, then we fill/replace the value in ActiveWBSReason\r\n",
					"    invalidCostAllocationMask = F.col('CostAllocationCode').isNull() | F.col('CostAllocationType').isNull()\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(invalidCostAllocationMask, F.lit('CostAllocationType or CostAllocationCode not present in Tags')))\r\n",
					"\r\n",
					"    # When either value in mask appears in AcitveWBS, add invalid reason in new column\r\n",
					"    validCostAllocationType = ['WBS', 'APPID', 'CI']\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(~F.col('CostAllocationType').isin(validCostAllocationType), F.lit('Invalid CostAllocationType: not APPID, CI or WBS')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    # When the values in the columns below match the mask and the cost type is WBS, then:\r\n",
					"    # regex pattern states that the string should start with a case insensitive letter, followed by a dot, followed by either letters, numbers or dots\r\n",
					"    pattern = r'^[a-zA-Z]\\.[a-zA-Z0-9.]+$'\r\n",
					"    rmask = F.col('CostAllocationCode').rlike(pattern)\r\n",
					"    cost_wbs = (F.col('CostAllocationType') == 'WBS')\r\n",
					"\r\n",
					"    # Applying valid WBS' as Active WBS'\r\n",
					"    # 1. Where the CostAllocationCode follows the regex and the CostAllocationType is WBS, we apply the CostAllocationCode\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(cost_wbs & rmask, F.col('CostAllocationCode')))\r\n",
					"    # 2. Where the CostAllocationCode doesn't follow the regex and the CostAllocationType is WBS, we set the ActiveWBSReason to be \"Invalid CostAllocationCode WBS\"\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(cost_wbs & ~rmask, F.lit('Invalid CostAllocationCode WBS')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    # 3. Where the CostAllocationCode doesn't follow the regex and the CostAllocationType is WBS, the CostAllocationType is changed to \"SubscriptionWBS\"\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(cost_wbs & ~rmask, F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"\r\n",
					"    # Applying valid AppIDs as Active WBS'\r\n",
					"    # If the CostAllocationCode is empty, we fill/replace the column ActiveWBS with Operational WBS in the AppList\r\n",
					"    map_app = appList.withColumn('AppID', F.col('AppID').cast(T.StringType())).select('AppID', 'OperationalWBS')\r\n",
					"    joined_df = cost_df.join(map_app, (cost_df.CostAllocationType == 'APPID') & (cost_df.CostAllocationCode == map_app.AppID), how='left')\r\n",
					"    cost_df = joined_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('OperationalWBS')).otherwise(F.col('ActiveWBS')))\r\n",
					"    cost_df = cost_df.drop('OperationalWBS')\r\n",
					"\r\n",
					"    # Applying valid CIs as Active WBS'\r\n",
					"    # Same here as above, but we merge the dataframes on ApplicationNames rather than AppID\r\n",
					"    map_app = appList.select('ApplicationName', 'OperationalWBS')\r\n",
					"    # Apply join with case insensitivity\r\n",
					"    map_app = map_app.withColumn('ApplicationName_upper',F.upper(F.col('ApplicationName')))\r\n",
					"    joined_df = cost_df.join(map_app, (cost_df.CostAllocationType == 'CI') & (cost_df.CostAllocationCode == map_app.ApplicationName_upper), how='left').drop('ApplicationName_upper')\r\n",
					"    cost_df = joined_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('OperationalWBS')).otherwise(F.col('ActiveWBS')))\r\n",
					"    \r\n",
					"    # Alternative 1 remove \"AppID\" \r\n",
					"    cost_df = cost_df.drop('ApplicationName', 'OperationalWBS')\r\n",
					"\r\n",
					"    # When ActiveWBS value is string 'TOBESPECIFIED', we replace the value with None. # Why this ActiveWBS have TOBSPECIFIED value? \r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.upper(F.col('ActiveWBS')) == 'TOBESPECIFIED', F.lit(None)).otherwise(F.col('ActiveWBS')))\r\n",
					"\r\n",
					"    # When Subscriptions are not attached to the costs (unassigned), we fill the values with Unassigned and state the ActiveWBSReason.\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned')).otherwise(F.col('ActiveWBS')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('SubscriptionName') == 'Unassigned', F.lit('Unassigned Subscription, possibly unused RI/SP')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    # Now that we have filled in most places in ActiveWBS, if the rest of ActiveWBS is Null, then we apply the CostCenter WBS\r\n",
					"    # When CostAllocationType is null, we fill it with the value from SubscriptionWBS\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBS').isNull() & (F.col('CostAllocationType') == 'APPID'), F.lit('AppID CostAllocationCode Invalid or Missing')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBS').isNull() & (F.col('CostAllocationType') == 'CI'), F.lit('CI CostAllocationCode Invalid or Missing')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('ActiveWBS').isNull(), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.when(F.col('ActiveWBS').isNull(), F.col('CostCenter')).otherwise(F.col('ActiveWBS'))) # Cost Center is identical to SubscriptionWBS. So we can remove subscription.json.\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(~F.col('CostAllocationType').isin(validCostAllocationType), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType')))\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationType', F.when(F.col('CostAllocationType').isNull(), F.lit('SubscriptionWBS')).otherwise(F.col('CostAllocationType'))) #  Can be removed.\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('ActiveWBSReason').isNull() & (F.col('CostAllocationType') == 'SubscriptionWBS'), F.lit('No valid AppID, WBS or CI')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    \r\n",
					"\r\n",
					"    # When CostAllocationType is a specific string, we fill/replace the value in ActiveWBSReason \r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'CI', F.lit('CI WBS Lookup from SNOW')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'APPID', F.lit('AppID WBS Lookup from SNOW')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBSReason', F.when(F.col('CostAllocationType') == 'WBS', F.lit('WBS Cost Tag used')).otherwise(F.col('ActiveWBSReason')))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('ActiveWBS', F.upper(F.col('ActiveWBS')))\r\n",
					"\r\n",
					"    # For cases that where CostAllocationCode is empty, we will use AppID from SerivceNow and Application from Subscription.json to replace.\r\n",
					"    mask3 = (F.col('CostAllocationType').isin(['APPID']) & F.col('CostAllocationCode').isNull())\r\n",
					"    mask4 = (F.col('CostAllocationType').isin(['CI']) & F.col('CostAllocationCode').isNull())\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode', F.when(mask3, F.col('AppID')) \\\r\n",
					"                                                       .when(mask4, F.col('SubscriptionServiceNow-App')) \\\r\n",
					"                                                       .otherwise(F.col('CostAllocationCode'))).drop('AppID')\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 657
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_application_names(cost_df, appList):\r\n",
					"    from pyspark.sql.functions import broadcast\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    # For Validation purpose and add codes for testing CostAllocationCode and CostAllocationType typo.\r\n",
					"    # Scenairo 1: CostAllocationType is APPID and CostAllocation is PETRAL\r\n",
					"    # Scenairo 2: CostAllocationType is CI and CostAllocation is 90009\r\n",
					"    # Select the first row for testing\r\n",
					"    #test_row = cost_df.limit(1)\r\n",
					"    # Update values in the CostAllocationType and CostAllocationCode\r\n",
					"    #test_row = test_row.withColumn('CostAllocationType',F.lit(\"APPID\"))\r\n",
					"    #test_row = test_row.withColumn('CostAllocationCode',F.lit(\"PETRAL\"))\r\n",
					"    #test_row = test_row.withColumn('CostAllocationType',F.lit(\"CI\"))\r\n",
					"    #test_row = test_row.withColumn('CostAllocationCode',F.lit(\"90009\"))\r\n",
					"    #test_row = test_row.withColumn('CostAllocationCode',F.lit(90009))\r\n",
					"    # Create a new DataFrame with the updated row and union it with the Cost_df\r\n",
					"    #cost_df = cost_df.union(test_row)\r\n",
					"\r\n",
					"    # Masks for CI and AppID\r\n",
					"    ci_mask = F.col('CostAllocationType') == 'CI'\r\n",
					"    appid_mask = F.col('CostAllocationType') == 'APPID'\r\n",
					"\r\n",
					"    # When AppID is present, we use the application name from the Service-Now Application list\r\n",
					"    # First convert AppID to a string, then select the desired columns\r\n",
					"    map_app = appList.withColumn('AppID', F.col('AppID').cast(T.StringType())).select('AppID', 'ApplicationName')\r\n",
					"    \r\n",
					"    # Apply case insensitivity merge by creating upper case columns\r\n",
					"    cost_df = cost_df.withColumn('CostAllocationCode_upper',F.upper(F.col('CostAllocationCode')))\r\n",
					"    map_app = map_app.withColumn('ApplicationName_upper',F.upper(F.col('ApplicationName')))\r\n",
					"\r\n",
					"    # Conduct the merge between Azure cost file and ServiceNow data based on CostAllocationCode and APPID or ApplicationName.\r\n",
					"\r\n",
					"    # Tobias can take a look. \r\n",
					"    ## Old Code\r\n",
					"    #condition1 = (cost_df.CostAllocationCode_upper == map_app.AppID) & (cost_df.CostAllocationType == 'APPID')\r\n",
					"    condition1 = (cost_df.CostAllocationCode_upper == map_app.AppID)\r\n",
					"    #condition2 = (cost_df.CostAllocationCode_upper == map_app.ApplicationName_upper) & (cost_df.CostAllocationType == 'CI')\r\n",
					"    condition2 = (cost_df.CostAllocationCode_upper == map_app.ApplicationName_upper)\r\n",
					"    #cost_df = cost_df.join(map_app,(condition1 | condition2),how='left').drop('CostAllocationCode_upper','ApplicationName_upper') \r\n",
					"\r\n",
					"    # Tobias can take a look. \r\n",
					"    # Using the following code to replace the code above. \r\n",
					"    print(cost_df.count())\r\n",
					"    joined_df1 = cost_df.join(broadcast(map_app),condition1, how='inner')\r\n",
					"    cost_df = cost_df.exceptAll(joined_df1)\r\n",
					"    print(cost_df.count())\r\n",
					"    joined_df2 = cost_df.join(broadcast(map_app),condition2, how='inner')\r\n",
					"    cost_df = cost_df.exceptAll(joined_df2)\r\n",
					"    print(cost_df.count())\r\n",
					"    #cost_df = joined_df1.join(broadcast(map_app),condition2, how='left')    \r\n",
					"    joined_df3 = joined_df1.union(joined_df2) \r\n",
					"    cost_df = cost_df.withColumn(\"AppID\", F.lit(None).cast(\"string\"))\r\n",
					"    cost_df = cost_df.withColumn(\"ApplicationName\", F.lit(None).cast(\"string\"))\r\n",
					"    cost_df = cost_df.withColumn('ApplicationName_upper', F.lit(None).cast(\"string\"))\r\n",
					"    cost_df = cost_df.union(joined_df3)\r\n",
					"    print(cost_df.count())\r\n",
					"    display(cost_df.filter((F.col('CostAllocationType')=='CI')))\r\n",
					"\r\n",
					"    # Create Application_Name column based on Application from ServiceNow to start with.\r\n",
					"    cost_df = cost_df.withColumn('Application_Name',F.col('ApplicationName'))\r\n",
					"\r\n",
					"    # Resolve CostAllocationCode and CostAllocationType typo by replacing Application_name with SubscriptionServiceNow-App value \r\n",
					"    cost_df = cost_df.withColumn('Application_Name',F.when((F.col('CostAllocationType') == 'APPID') & F.col('CostAllocationCode').cast('int').isNull(),F.col('SubscriptionServiceNow-App'))\\\r\n",
					"                                                    .when((F.col('CostAllocationType') == 'CI') & F.col('CostAllocationCode').cast('int').isNotNull(),F.col('SubscriptionServiceNow-App')).otherwise(F.col('Application_Name')))\r\n",
					"  \r\n",
					"    print('For those empty ApplicationNames will be replaced by SubscriptionServiceNowApp (Applications from Subscription.json) when CostAllocationTypes are SubscriptionWBS and WBS')\r\n",
					"    # For those empty ApplicationNames will be replaced by SubscriptionServiceNowApp (Applications from Subscription.json) when CostAllocationTypes are SubscriptionWBS and WBS\r\n",
					"    # We need two otherwise in the code to avoid any Null/empty value return to Applciation_Name column\r\n",
					"    ## Old Code\r\n",
					"#   cost_df = cost_df.withColumn('Application_Name',F.when((F.col('CostAllocationType') == \"SubscriptionWBS\") | (F.col('CostAllocationType') == \"WBS\"),\r\n",
					"#                                                    F.when(F.col('Application_Name').isNull(),F.col('SubscriptionServiceNow-App')).otherwise(F.col('Application_Name')))\\\r\n",
					"#                                                    .otherwise(F.col('Application_Name')))\r\n",
					"\r\n",
					"    cost_df = cost_df.withColumn('Application_Name',F.when(((F.col('CostAllocationType') == \"SubscriptionWBS\") | (F.col('CostAllocationType') == \"WBS\"))&(F.col('Application_Name').isNull()),F.col('SubscriptionServiceNow-App'))\\\r\n",
					"                                                     .otherwise(F.col('Application_Name')))\r\n",
					"\r\n",
					"    ## Title : Assign Applications that do not have AppID with AppID from ServiceNow by looking up the applications in ServiceNow.\r\n",
					"    print(\"Create upper case column for merge purpose.\")\r\n",
					"\r\n",
					"    # Create upper case column for merge purpose.\r\n",
					"    cost_df = cost_df.withColumn('Application_Name_upper',F.upper(F.col('Application_Name')))\r\n",
					"    map_app = map_app.withColumn('ServiceNowApplicationName_upper',F.upper(F.col('ApplicationName')))\r\n",
					"    map_app = map_app.withColumn('ServiceNowAppID',F.col('AppID')).drop('AppID')\r\n",
					"\r\n",
					"    print('Lookup application in ServiceNow')\r\n",
					"    # Lookup application in ServiceNow. Those applications that can be found will be merged.\r\n",
					"    \r\n",
					"    cost_df = cost_df.join(broadcast(map_app),cost_df.Application_Name_upper==map_app.ServiceNowApplicationName_upper,how='left')\r\n",
					"\r\n",
					"    print('Fill empty AppID with AppID from ServiceNow')\r\n",
					"    # Fill empty AppID with AppID from ServiceNow\r\n",
					"    cost_df = cost_df.withColumn('AppID',F.when(F.col('AppID').isNull(),F.col('ServiceNowAppID'))\\\r\n",
					"                                          .otherwise(F.col('AppID'))) # Maybe use cost_df = cost_df.na.fill().\r\n",
					"\r\n",
					"      \r\n",
					"    print('remove unused Columns')\r\n",
					"    # Remove unused Columns\r\n",
					"    cost_df = cost_df.drop('Application_Name_upper','ApplicationName','ServiceNowAppID','ServiceNowApplicationName_upper','ApplicationName_upper')\r\n",
					"\r\n",
					"    print('Application Name is not found when SubscriptionServiceNow-App is equal to Application_name and AppID is empty')\r\n",
					"    # Application Name will be \"Application not defined or not found\" when SubscriptionServiceNow-App is equal to Application_name as well as AppID is empty.\r\n",
					"    # This indicates that application from subscription.json file can not be found in ServiceNow. One of Application example is DATAHUB - MARKETING AND SUPPLY, not found in ServiceNow.\r\n",
					"    cost_df = cost_df.withColumn('Application_Name', F.when((F.upper(F.col('SubscriptionServiceNow-App'))==F.upper(F.col('Application_Name'))) & (F.col('AppID').isNull()),F.lit('Application not defined or not found'))\\\r\n",
					"                                                    .otherwise(F.col('Application_Name')))\r\n",
					"\r\n",
					"    print('For anything that left ApplicationName will be \"Application not defined or not found\".')\r\n",
					"    # For anything that left ApplicationName will be \"Application not defined or not found\" and For anything that left AppID will be 0.\r\n",
					"    cost_df = cost_df.na.fill({'AppID': 0, 'Application_Name': 'Application not defined or not found'})\r\n",
					"\r\n",
					"    ##  Old Code \r\n",
					"    # For anything that left ApplicationName will be \"Application not defined or not found\".\r\n",
					"    #cost_df = cost_df.withColumn('Application_Name',F.when(F.col('Application_Name').isNull(),F.lit('Application not defined or not found'))\\\r\n",
					"    #                                                 .otherwise(F.col('Application_Name')))\r\n",
					"    # For anything that left AppID will be 0.\r\n",
					"    #cost_df = cost_df.withColumn('AppID',F.when(F.col('AppID').isNull(),F.lit(0))\\\r\n",
					"    #                                                 .otherwise(F.col('AppID'))\r\n",
					"\r\n",
					"    \r\n",
					"    # Display the final result'\r\n",
					"    #print('Display the final result')\r\n",
					"    #display(cost_df)\r\n",
					"\r\n",
					"    # Those codes are used for the future.\r\n",
					"    #display(cost_df.filter(cost_df.CostAllocationCode == \"PETRAL\"))\r\n",
					"    #display(cost_df.filter(cost_df.CostAllocationCode == \"90009\"))\r\n",
					"    #display(cost_df.filter(cost_df.CostAllocationCode == 90009))\r\n",
					"    #display(cost_df.filter(cost_df.Application_Name == \"BIZTALK360\"))\r\n",
					"\r\n",
					"    cost_df.cache()\r\n",
					"    return cost_df"
				],
				"execution_count": 658
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def expand_ai_column(cost_df):\r\n",
					"\r\n",
					"    warnings.simplefilter(action='ignore', category=FutureWarning)\r\n",
					"\r\n",
					"    # actualCostSourcefilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + actualCostPath + dateRange + '/ACMMonthlyActualCost_' + dateRange + '.parquet'\r\n",
					"    # amortizedCostSourcefilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + amortizedCostPath + '/' + dateRange + '/ACMMonthlyActualCost_' + dateRange + '.parquet'\r\n",
					"\r\n",
					"    # actualCostDestinationfilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + actualCostPath + dateRange + '/Extended_ACMMonthlyActualCost_' + dateRange + '.parquet'\r\n",
					"    # amortizedCostDestinationfilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + amortizedCostPath + '/' + dateRange + '/Extended_ACMMonthlyActualCost_' + dateRange + '.parquet'\r\n",
					"\r\n",
					"    # cost_df = load_source(actualCostSourcefilename)\r\n",
					"    cost_df = populate_columns(cost_df)\r\n",
					"    cost_df = extend_additional_info(cost_df)\r\n",
					"    cost_df = AHB_column(cost_df)\r\n",
					"    cost_df = instance_name(cost_df)\r\n",
					"    \r\n",
					"    return cost_df"
				],
				"execution_count": 659
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def populate_wbs_columns(cost_df, subscription_list, appList):\r\n",
					"\r\n",
					"    cost_df = expand_cost_tags(cost_df)\r\n",
					"    subscription_list = expand_subscription_tags(subscription_list)\r\n",
					"    cost_df, subscription_list = merge_dataframes(cost_df, subscription_list)\r\n",
					"    cost_df = replace_empty_cost_fields_with_subscription_details(cost_df, appList)\r\n",
					"\r\n",
					"    print('WBS population complete. Populating application names')\r\n",
					"\r\n",
					"    cost_df = get_application_names(cost_df, appList)\r\n",
					"    \r\n",
					"    print('App-name population complete')\r\n",
					"\r\n",
					"    return cost_df"
				],
				"execution_count": 660
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_output_file(cost_df, destinationFilename):\n",
					"\n",
					"    # Dropping some columns before writing the output\n",
					"    cost_df = cost_df.drop('id', 'AdditionalInfo')\n",
					"    \n",
					"    print(f'Writing output file to: \"{destinationFilename}\"')\n",
					"    #print(f'Dataframe length is: {cost_df.count()}')\n",
					"    print('start to write to container')\n",
					"    # Cache the dataframe to accelerate the process to write into container.\n",
					"    cost_df.cache()\n",
					"    # Writing the df to the destination path\n",
					"    cost_df.write.format('parquet').mode('overwrite').option('overwriteSchema', 'true').option('path', destinationFilename).save() # df.coalesce(1) if partition should be 1\n",
					"    # IF not able to write to destination path, may use .option('overwriteSchema', 'true') after mode().\n",
					"    print('File write complete!')"
				],
				"execution_count": 661
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"print(f'fromDate: {fromDate}')\n",
					"print(f'toDate: {toDate}')\n",
					"#reportTypes = ['ActualCost', 'AmortizedCost']\n",
					"reportTypes = ['AmortizedCost']\n",
					"year = toDate[:4]\n",
					"month = toDate[4:6]\n",
					"day = toDate[6:]\n",
					"\n",
					"print(f\"------ From: {fromDate}, To: {toDate} -----------\")\n",
					"\n",
					"for reportType in reportTypes:\n",
					"\n",
					"    print(f\"------ {reportType} -----------\")\n",
					"\n",
					"    sourceCostPath = 'exports/monthly/ACMMonthly' + reportType + '/'\n",
					"\n",
					"    longToDate = f'{toDate[0:4]}-{toDate[4:6]}-{toDate[6:]}'\n",
					"    print(f'longToDate: {longToDate}')\n",
					"    dateRange = fromDate + '-' + toDate\n",
					"    print(f'dateRange: {dateRange}')\n",
					"\n",
					"    print(dateRange)\n",
					"    costSourcefilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + sourceCostPath + dateRange + '/ACMMonthly' + reportType + '_' + dateRange + '.parquet'\n",
					"    costDestinationfilename = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/' + sourceCostPath + dateRange + '/Extended_v2_ACMMonthly' + reportType + '_' + dateRange + '.parquet'\n",
					"    if str(longToDate) < '2021-11-30':\n",
					"        print(longToDate)\n",
					"        print(f'Using default 2021-11-30 subscription json file')\n",
					"        subscriptionListPath = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/subscriptions/subscriptions_2021-11-30.json'\n",
					"    else:\n",
					"        print(f'Using {longToDate} subscription json file')\n",
					"        subscriptionListPath = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/subscriptions/subscriptions_' + longToDate + '.json'\n",
					"    appListPath = 'abfss://' + container + '@' + storageAccount + '.dfs.core.windows.net/applications/ServiceNow-Application-List-Extended.parquet'\n",
					"\n",
					"    cost_df, subscription_list, appList = load_source_files(costSourcefilename, subscriptionListPath, appListPath)\n",
					"    cost_df = expand_ai_column(cost_df)\n",
					"    cost_df = populate_wbs_columns(cost_df, subscription_list, appList)\n",
					"    write_output_file(cost_df, costDestinationfilename)\n",
					"    print(' ')"
				],
				"execution_count": 662
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}