{
	"name": "compute-savings-plan-savings",
	"properties": {
		"folder": {
			"name": "NotebookInProduction/HUB and RI Savings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sprkpool33large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "84cefd8a-435b-4b82-8d5b-355ed21c0b23"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/13d66f54-0a19-4912-b4f3-54d15897368d/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/s037-cost-management/bigDataPools/sprkpool33large",
				"name": "sprkpool33large",
				"type": "Spark",
				"endpoint": "https://s037-cost-management.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sprkpool33large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Amortized Cost\r\n",
					"\r\n",
					"### Savings Plan\r\n",
					"\r\n",
					"Looking up cost with **PriceModel** set to _SavingsPlan_ yield two kinds of cost:\r\n",
					"- Has **ChargeType** set to _Usage_ where EffectivePrice < UnitPrice\r\n",
					"- Has **ChargeType** set to _UnusedSavingsPlan_ (MeterCategory = Unassigned) where EffectiveCost is 100 and CostInBillingCurrency is 0 (is this corresponding to the unused parts of the savingsplan?)\r\n",
					"\r\n",
					"### Reservation\r\n",
					"\r\n",
					"Looking at **IsRIUsage** set to _RI Usage_\r\n",
					"\r\n",
					"There are two distinct charge types -> **Usage** and **UnusedReservation**\r\n",
					"\r\n",
					"## Actual Cost\r\n",
					"\r\n",
					"### Savings Plan\r\n",
					"\r\n",
					"Looking up cost with **PriceModel** set to _SavingsPlan_ yield two kinds of cost:\r\n",
					"- Has **ChargeType** set to _Usage_ where EffectivePrice and CostInBillingCurrency are 0\r\n",
					"- Has **ChargeType** set to _Purchase_ (MeterCategory = Unassigned) where CostInBillingCurrency = EffectivePrice = UnitPrice is 73000 which corresponds to 100 NOK/Hour for roughly 30 days\r\n",
					"\r\n",
					"### Reservation\r\n",
					"\r\n",
					"Looking at **IsRIUsage** set to _RI Usage_\r\n",
					"\r\n",
					"There are three distinct charge types -> **Usage**, **Purchase** and **Refund**\r\n",
					"- ChargeType=Purchase --> EffectivePrice=UnitPrice and UnitPrice*Quantity = CostInBillingCurrency -> add up to get total cost for RI purchase\r\n",
					"- ChargeType=Refund --> Same as above, just negative (since its money back) \r\n",
					"- ChargeType=Usage --> cost is always 0 since its covered by RI purchases"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"from datetime import datetime, timedelta"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"PROD_OFFER_ID = 'MS-AZR-0017P'"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storageAccount = 's037costmgmt'"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"date_two_year_ago = datetime.now().date()-timedelta(days=730)"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyActualCost/*/Extended_v3_ACMMonthlyActualCost_*.parquet'\r\n",
					"# cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyAmortizedCost/*/Extended_v3_ACMMonthlyAmortizedCost_*.parquet'\r\n",
					"cost_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/exports/monthly/ACMMonthlyAmortizedCost/20240101-20240131/Extended_v3_ACMMonthlyAmortizedCost_20240101-20240131.parquet'\r\n",
					"cost_df = spark.read.format('parquet').load(cost_path)\r\n",
					"# cost_df = cost_df.where(F.col('Date') >= date_two_year_ago)"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pricesheet_path = f'abfss://usage@{storageAccount}.dfs.core.windows.net/pricesheet/portal-export/pricesheet-converted/20240101-20240131.parquet'\r\n",
					"pricesheet_df = spark.read.format('parquet').load(pricesheet_path)\r\n",
					"pricesheet_df = pricesheet_df.where((F.col('OfferID') == PROD_OFFER_ID) & (F.col('PriceType') == 'SavingsPlan'))"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p3y_df = pricesheet_df.where(F.col('Term') == 'P3Y')\r\n",
					"p1y_df = pricesheet_df.where(F.col('Term') == 'P1Y')"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p3y_df = p3y_df.withColumn('NormalizedUnit', F.regexp_extract('UnitOfMeasure', r'^(\\d+)', 1).cast('integer'))\r\n",
					"p3y_df = p3y_df.withColumn('NormalizedMemoryFactor', \r\n",
					"    F.when(F.col('UnitOfMeasure').contains('TiB'), 1024) # Standard measure in usage file is GiB --> convertion factor between TiB and Gib is 1024\r\n",
					"    .when(F.col('UnitOfMeasure').contains(\"PiB\"), 1048576) # Standard measure in usage file is GiB --> convertion factor between PiB and Gib is 1048576\r\n",
					"    .when(F.col('UnitOfMeasure').contains(\"TB\"), 1000) # Standard measure in usage file is GB --> convertion factor between TB and Gb is 1000\r\n",
					"    .when(F.col('UnitOfMeasure').contains(\"PB\"), 1000000) # Standard measure in usage file is GB --> convertion factor between PB and Gib is 1000000\r\n",
					"    .otherwise(1)\r\n",
					")\r\n",
					"p3y_df = p3y_df.withColumn('NormalizedP3YUnitPrice', F.col('UnitPrice') / (F.col('NormalizedUnit') * F.col('NormalizedMemoryFactor')))"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"p3y_df = p3y_df.select('PartNumber', 'NormalizedP3YUnitPrice')"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(p3y_df.where(F.col('PartNumber') == 'AAM-61322'))"
				],
				"execution_count": 61
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Find eligible SP cost and compute potential savings\r\n",
					"\r\n",
					"- Virtual Machines cost have unit of measure on format `x Hours` in pricesheet --> must divide UnitPrice by `x`\r\n",
					"- Azure Function cost have unit of measure on format `x TiB Hours` or `x Hours` --> must divide UnitPrice by `x` then if GiB --> leave cost as-is, if TiB --> divide UnitPrice by 1024\r\n",
					"- Azure App Service have unit of measure on format `x Hours` in pricesheet --> must divide UnitPrice by `x`\r\n",
					"- Azure Container Instance cost have unit of measure on format `x TB Hours` or `x Hours` --> must divide UnitPrice by `x` then if GB --> leave cost as-is, if TB --> divide UnitPrice by 1000\r\n",
					"- Azure Container Apps cost have unit of measure on format `x PiB Hours` or `x Seconds` --> must divide UnitPrice by `x` then if GiB --> leave cost as-is, if PiB --> divide UnitPrice by 1 048 576"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sp_df = cost_df.where((F.col('PricingModel') == 'OnDemand') & (F.col('ChargeType') == 'Usage') & (F.col('MeterCategory') == 'Container Instances'))"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sp_df = sp_df.join(p3y_df, 'PartNumber', 'left')"
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sp_df = sp_df.withColumn('Savings', (F.col('UnitPrice') - F.col('NormalizedP3YUnitPrice')) * F.col('Quantity'))"
				],
				"execution_count": 90
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(sp_df)"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(sp_df.agg(F.sum('CostInBillingCurrency')))"
				],
				"execution_count": 91
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(sp_df.agg(F.sum('Savings')))"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(sp_df.select('UnitPrice', 'NormalizedP3YUnitPrice', 'Savings'))"
				],
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Compute existing SP savings"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.where(F.col('PricingModel') == 'SavingsPlan')"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.select('Date', 'PricingModel', 'ChargeType', 'UnitOfMeasure', 'Quantity', 'EffectivePrice', 'UnitPrice', 'CostInBillingCurrency', 'PayGPrice')"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_df = cost_df.withColumn('EffectiveCost', F.col('EffectivePrice') * F.col('Quantity'))\r\n",
					"cost_df = cost_df.withColumn('CostSavings', (F.col('UnitPrice') - F.col('EffectivePrice')) * F.col('Quantity'))"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Compute total savings for savings plan\r\n",
					"display(cost_df.where(F.col('ChargeType') == 'Usage').agg(F.sum('CostSavings')))"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Compute cost of unused savings plan\r\n",
					"display(cost_df.where(F.col('ChargeType') == 'UnusedSavingsPlan').agg(F.sum('EffectiveCost')))"
				],
				"execution_count": 32
			}
		]
	}
}